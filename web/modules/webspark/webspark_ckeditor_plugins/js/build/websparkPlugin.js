!function(e,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define([],n):"object"==typeof exports?exports.CKEditor5=n():(e.CKEditor5=e.CKEditor5||{},e.CKEditor5.websparkPlugin=n())}(self,(()=>(()=>{var __webpack_modules__={"./js/ckeditor5_plugins/websparkPlugin/src/advancedimage/insertadvancedimagecommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ InsertWebsparkAdvancedImageCommand)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/**\n * @file defines InsertWebsparkAdvancedImageCommand.\n */\n\n\nclass InsertWebsparkAdvancedImageCommand extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Command {\n  /**\n   * Executes the function with the given parameters.\n   *\n   * @param {number} spacingtop - the spacing from the top\n   * @param {number} spacingbottom - the spacing from the bottom\n   * @param {number} spacingleft - the spacing from the left\n   * @param {number} spacingright - the spacing from the right\n   * @param {boolean} roundedimage - whether the image is rounded or not\n   */\n  execute({\n    spacingtop,\n    spacingbottom,\n    spacingleft,\n    spacingright,\n    roundedimage,\n  }) {\n    const { model } = this.editor;\n\n    model.change((writer) => {\n      const selectedElement = model.document.selection.getSelectedElement();\n\n      if (selectedElement) {\n        writer.setAttribute("spacingTop", spacingtop, selectedElement);\n        writer.setAttribute("spacingBottom", spacingbottom, selectedElement);\n        writer.setAttribute("spacingRight", spacingright, selectedElement);\n        writer.setAttribute("spacingLeft", spacingleft, selectedElement);\n        writer.setAttribute("roundedImage", roundedimage, selectedElement);\n      }\n    });\n  }\n\n  /**\n   * Refreshes the editor by updating the model and selection.\n   *\n   * @return {void}\n   */\n  refresh() {\n    const { model } = this.editor;\n    const { selection } = model.document;\n\n    const imageTypes = ["imageInline", "imageBlock"];\n\n    const allowedIn = imageTypes.some((type) =>\n      model.schema.findAllowedParent(selection.getFirstPosition(), type)\n    );\n\n    this.isEnabled = allowedIn !== null;\n\n    const selectedElement = selection.getSelectedElement();\n\n    if (\n      selectedElement?.name === "imageBlock" ||\n      selectedElement?.name === "imageInline"\n    ) {\n      this.value = Object.fromEntries(selectedElement.getAttributes());\n\n      model.change((writer) => {\n        writer.setAttribute("imageFluid", true, selectedElement);\n      });\n    } else {\n      this.value = null;\n    }\n  }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./js/ckeditor5_plugins/websparkPlugin/src/advancedimage/insertadvancedimagecommand.js?')},"./js/ckeditor5_plugins/websparkPlugin/src/advancedimage/websparkadvancedimage.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ WebsparkAdvancedImage)\n/* harmony export */ });\n/* harmony import */ var _websparkadvancedimageediting__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./websparkadvancedimageediting */ "./js/ckeditor5_plugins/websparkPlugin/src/advancedimage/websparkadvancedimageediting.js");\n/* harmony import */ var _websparkadvancedimageui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./websparkadvancedimageui */ "./js/ckeditor5_plugins/websparkPlugin/src/advancedimage/websparkadvancedimageui.js");\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/**\n * @file This is what CKEditor refers to as a master (glue) plugin. Its role is\n * just to load the “editing” and “UI” components of this Plugin. Those\n * components could be included in this file, but\n *\n * I.e, this file\'s purpose is to integrate all the separate parts of the plugin\n * before it\'s made discoverable via index.js.\n */\n\n\n\n\n\nclass WebsparkAdvancedImage extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__.Plugin {\n  static get requires() {\n    return [_websparkadvancedimageediting__WEBPACK_IMPORTED_MODULE_0__["default"], _websparkadvancedimageui__WEBPACK_IMPORTED_MODULE_1__["default"]];\n  }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./js/ckeditor5_plugins/websparkPlugin/src/advancedimage/websparkadvancedimage.js?')},"./js/ckeditor5_plugins/websparkPlugin/src/advancedimage/websparkadvancedimageediting.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ WebsparkAdvancedImageEditing)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/* harmony import */ var ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/widget */ "ckeditor5/src/widget.js");\n/* harmony import */ var _insertadvancedimagecommand__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./insertadvancedimagecommand */ "./js/ckeditor5_plugins/websparkPlugin/src/advancedimage/insertadvancedimagecommand.js");\n\n\n\n\nclass WebsparkAdvancedImageEditing extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n  static get requires() {\n    return [ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.Widget];\n  }\n\n  init() {\n    this._defineSchema();\n    this._defineConverters();\n    this.editor.commands.add(\n      "insertWebsparkAdvancedImage",\n      new _insertadvancedimagecommand__WEBPACK_IMPORTED_MODULE_2__["default"](this.editor)\n    );\n  }\n\n  _defineSchema() {\n    const schema = this.editor.model.schema;\n\n    if (schema.isRegistered("imageInline")) {\n      schema.extend("imageInline", {\n        allowAttributes: [\n          "spacingTop",\n          "spacingBottom",\n          "spacingLeft",\n          "spacingRight",\n          "roundedImage",\n          "imageFluid",\n        ],\n      });\n    }\n\n    if (schema.isRegistered("imageBlock")) {\n      schema.extend("imageBlock", {\n        allowAttributes: [\n          "spacingTop",\n          "spacingBottom",\n          "spacingLeft",\n          "spacingRight",\n          "roundedImage",\n          "imageFluid",\n        ],\n      });\n    }\n  }\n\n  /**\n   * Converters determine how CKEditor 5 models are converted into markup and\n   * vice-versa.\n   */\n  _defineConverters() {\n    const { conversion } = this.editor;\n\n    const spaces = [\n      {\n        htmlName: "spacing-top",\n        modelName: "spacingTop",\n      },\n      {\n        htmlName: "spacing-bottom",\n        modelName: "spacingBottom",\n      },\n      {\n        htmlName: "spacing-right",\n        modelName: "spacingRight",\n      },\n      {\n        htmlName: "spacing-left",\n        modelName: "spacingLeft",\n      },\n      {\n        htmlName: "rounded-circle",\n        modelName: "roundedImage",\n      },\n    ];\n    \n    // Iterates over each space object and defines attribute converters for upcast and downcast.\n    spaces.forEach((space) => {\n      conversion.for("upcast").attributeToAttribute({\n        view: {\n          key: "class",\n          value: new RegExp(space.htmlName + "+"),\n        },\n        model: {\n          key: space.modelName,\n          value: (viewElement) => {\n            let classes = Array.from(viewElement._classes);\n            let filteredClass = classes.filter((htmlClass) =>\n              htmlClass.includes(space.htmlName)\n            );\n            return filteredClass.length === 0 ? "none" : filteredClass[0];\n          },\n        },\n      });\n\n      conversion.for("downcast").attributeToAttribute({\n        model: {\n          name: "imageBlock",\n          key: space.modelName,\n        },\n        view: (modelAttributeValue) => {\n          if (modelAttributeValue !== "none") {\n            return {\n              key: "class",\n              value: modelAttributeValue,\n            };\n          }\n        },\n      });\n\n      conversion.for("downcast").attributeToAttribute({\n        model: {\n          name: "imageInline",\n          key: space.modelName,\n        },\n        view: (modelAttributeValue) => {\n          return {\n            key: "class",\n            value: modelAttributeValue,\n          };\n        },\n      });\n    });\n\n    conversion.for("downcast").attributeToAttribute({\n      model: {\n        name: "imageBlock",\n        key: "imageFluid",\n      },\n      view: (modelAttributeValue) => {\n        return {\n          key: "class",\n          value: "img-fluid",\n        };\n      },\n    });\n\n    conversion.for("downcast").attributeToAttribute({\n      model: {\n        name: "imageInline",\n        key: "imageFluid",\n      },\n      view: (modelAttributeValue) => {\n        return {\n          key: "class",\n          value: "img-fluid",\n        };\n      },\n    });\n\n    conversion.for("upcast").attributeToAttribute({\n      view: {\n        key: "class",\n        value: "img-fluid",\n      },\n      model: {\n        key: "imageFluid",\n        value: (viewElement) => {\n          return true;\n        },\n      },\n    });\n  }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./js/ckeditor5_plugins/websparkPlugin/src/advancedimage/websparkadvancedimageediting.js?')},"./js/ckeditor5_plugins/websparkPlugin/src/advancedimage/websparkadvancedimageui.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ WebsparkAdvancedImageUI)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/ui */ "ckeditor5/src/ui.js");\n/* harmony import */ var _websparkadvancedimageview__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./websparkadvancedimageview */ "./js/ckeditor5_plugins/websparkPlugin/src/advancedimage/websparkadvancedimageview.js");\n/**\n * @file registers the websparkAdvancedImage toolbar button and binds functionality to it.\n */\n\n\n\n\n\nclass WebsparkAdvancedImageUI extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n  static get requires() {\n    return [ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.ContextualBalloon];\n  }\n\n  init() {\n    const editor = this.editor;\n    const command = editor.commands.get("insertWebsparkAdvancedImage");\n\n\n    this.form = new _websparkadvancedimageview__WEBPACK_IMPORTED_MODULE_2__.WebsparkAdvancedImageFormView(\n      getFormValidators(editor.t),\n      editor.locale,\n      command\n    );\n\n    editor.ui.componentFactory.add("websparkAdvancedImage", (locale) => {\n      const dropdown = (0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.createDropdown)(locale);\n      this._setUpDropdown(dropdown, this.form, command);\n      this._setUpForm(this.form, dropdown, command);\n\n      return dropdown;\n    });\n  }\n\n  _setUpDropdown(dropdown, form, command) {\n    const editor = this.editor;\n    const t = editor.t;\n    const button = dropdown.buttonView;\n\n    dropdown.bind("isEnabled").to(command);\n    dropdown.panelView.children.add(form);\n\n    button.set({\n      label: t("Image styles"),\n      tooltip: true,\n    });\n\n    // Note: Use the low priority to make sure the following listener starts working after the\n    // default action of the drop-down is executed (i.e. the panel showed up). Otherwise, the\n    // invisible form/input cannot be focused/selected.\n    button.on(\n      "open",\n      () => {\n        form.setValues(command.value);\n        form.focus();\n      },\n      { priority: "low" }\n    );\n\n    dropdown.on("submit", () => {\n       editor.execute("insertWebsparkAdvancedImage", {\n          spacingtop: form.spacingtop,\n          spacingbottom: form.spacingbottom,\n          spacingright: form.spacingright,\n          spacingleft: form.spacingleft,\n          roundedimage: form.roundedimage,\n       });\n\n        closeUI();\n    });\n\n    dropdown.on("change:isOpen", () => form.element.reset());\n    dropdown.on("cancel", () => closeUI());\n\n    function closeUI() {\n      editor.editing.view.focus();\n      dropdown.isOpen = false;\n    }\n  }\n\n  _setUpForm(form, dropdown, command) {\n    form.delegate("submit", "cancel").to(dropdown);\n    form.saveButtonView.bind("isEnabled").to(command);\n  }\n}\n\nfunction getFormValidators(t) {\n  return [\n  ];\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./js/ckeditor5_plugins/websparkPlugin/src/advancedimage/websparkadvancedimageui.js?')},"./js/ckeditor5_plugins/websparkPlugin/src/advancedimage/websparkadvancedimageview.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WebsparkAdvancedImageFormView: () => (/* binding */ WebsparkAdvancedImageFormView)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/ui */ "ckeditor5/src/ui.js");\n/* harmony import */ var ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ckeditor5/src/utils */ "ckeditor5/src/utils.js");\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/utils */ "./js/ckeditor5_plugins/websparkPlugin/src/utils/utils.js");\n\n\n\n\n\n\nclass WebsparkAdvancedImageFormView extends ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.View {\n\n\n  constructor(validators, locale) {\n    super(locale);\n    const t = locale.t;\n    this.focusTracker = new ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_2__.FocusTracker();\n    this.keystrokes = new ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_2__.KeystrokeHandler();\n\n    this.spacingTopSelect = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createSelect)(\n      t("Spacing top"),\n      this._getSpacingOptions(t, \'top\'),\n      locale\n    );\n\n    this.spacingBottomSelect = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createSelect)(\n      t("Spacing bottom"),\n      this._getSpacingOptions(t, \'bottom\'),\n      locale\n    );\n\n    this.spacingLeftSelect = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createSelect)(\n      t("Spacing left"),\n      this._getSpacingOptions(t, \'left\'),\n      locale\n    );\n\n    this.spacingRightSelect = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createSelect)(\n      t("Spacing right"),\n      this._getSpacingOptions(t, \'right\'),\n      locale\n    );\n\n    this.roundedImage = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createSelect)(\n      t(\'Round image\'),\n      [\n        {\n          value: "none",\n          title: t("No"),\n        },\n        {\n          value: `rounded-circle`,\n          title: t("Yes"),\n        }\n      ],\n      locale\n    )\n\n    this.saveButtonView = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createButton)(\n      t("Save"),\n      ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.icons.check,\n      "ck-button-save",\n      locale\n    );\n    this.saveButtonView.type = "submit";\n\n    this.cancelButtonView = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createButton)(\n      t("Cancel"),\n      ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.icons.cancel,\n      "ck-button-cancel",\n      locale\n    );\n\n    this.cancelButtonView.delegate("execute").to(this, "cancel");\n\n    this._focusables = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.ViewCollection();\n\n    this._focusCycler = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.FocusCycler({\n      focusables: this._focusables,\n      focusTracker: this.focusTracker,\n      keystrokeHandler: this.keystrokes,\n      actions: {\n        focusPrevious: "shift + tab",\n        focusNext: "tab",\n      },\n    });\n\n    this.setTemplate({\n      tag: "form",\n      attributes: {\n        class: ["ck", "ck-webspark-form"],\n        tabindex: "-1",\n      },\n      children: [\n        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createRow)(this.spacingTopSelect),\n        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createRow)(this.spacingBottomSelect),\n        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createRow)(this.spacingLeftSelect),\n        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createRow)(this.spacingRightSelect),\n        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createRow)(this.roundedImage),\n        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createContainer)(\n          [this.saveButtonView, this.cancelButtonView],\n          ["ck-webspark-form-buttons"]\n        ),\n      ],\n    });\n  }\n\n  /**\n   * Generates an array of spacing options based on the given position.\n   *\n   * @param {type} t - A function for translating strings.\n   * @param {type} position - The position of the spacing options.\n   * @return {type} An array of spacing options.\n   */\n  _getSpacingOptions(t, position) {\n    return [\n      {\n        value: "none",\n        title: t("None"),\n      },\n      {\n        value: `spacing-${position}-8`,\n        title: t("8px"),\n      },\n      {\n        value: `spacing-${position}-16`,\n        title: t("16px"),\n      },\n      {\n        value: `spacing-${position}-24`,\n        title: t("24px"),\n      },\n    ];\n  }\n\n  render() {\n    super.render();\n\n    (0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.submitHandler)({\n      view: this,\n    });\n\n    // TODO: Check why focus isn\'t working for a custom view\n    const childViews = [\n      this.spacingTopSelect.children[1],\n      this.spacingBottomSelect.children[1],\n      this.spacingLeftSelect.children[1],\n      this.spacingRightSelect.children[1],\n      this.roundedImage.children[1],\n\n      this.saveButtonView,\n      this.cancelButtonView,\n    ];\n\n    childViews.forEach((v) => {\n      // Register the view as focusable.\n      this._focusables.add(v);\n\n      // Register the view in the focus tracker.\n      this.focusTracker.add(v.element);\n    });\n\n    // Start listening for the keystrokes coming from #element.\n    this.keystrokes.listenTo(this.element);\n\n    const stopPropagation = (data) => data.stopPropagation();\n\n    // Since the form is in the dropdown panel which is a child of the toolbar, the toolbar\'s\n    // keystroke handler would take over the key management in the URL input. We need to prevent\n    // this ASAP. Otherwise, the basic caret movement using the arrow keys will be impossible.\n    this.keystrokes.set("arrowright", stopPropagation);\n    this.keystrokes.set("arrowleft", stopPropagation);\n    this.keystrokes.set("arrowup", stopPropagation);\n    this.keystrokes.set("arrowdown", stopPropagation);\n  }\n\n  destroy() {\n    super.destroy();\n\n    this.focusTracker.destroy();\n    this.keystrokes.destroy();\n  }\n\n  focus() {\n    this._focusCycler.focusFirst();\n  }\n\n  get spacingtop() {\n    return this.spacingTopSelect.children[1].value;\n  }\n\n  set spacingtop(spacingtop) {\n    this.spacingTopSelect.children[1].value = spacingtop;\n  }\n\n  get spacingbottom() {\n    return this.spacingBottomSelect.children[1].value;\n  }\n\n  set spacingbottom(spacingbottom) {\n    this.spacingBottomSelect.children[1].value = spacingbottom;\n  }\n\n  get spacingright() {\n    return this.spacingRightSelect.children[1].value;\n  }\n\n  set spacingright(spacingright) {\n    this.spacingRightSelect.children[1].value = spacingright;\n  }\n\n  get spacingleft() {\n    return this.spacingLeftSelect.children[1].value;\n  }\n\n  set spacingleft(spacingleft) {\n    this.spacingLeftSelect.children[1].value = spacingleft;\n  }\n\n  get roundedimage() {\n    return this.roundedImage.children[1].value;\n  }\n\n  set roundedimage(spacingleft) {\n    this.roundedImage.children[1].value = spacingleft;\n  }\n\n  setValues(values) {\n    this.spacingtop = values?.spacingTop;\n    this.spacingbottom = values?.spacingBottom;\n    this.spacingleft = values?.spacingLeft;\n    this.spacingright = values?.spacingRight;\n    this.roundedimage = values?.roundedImage;\n  }\n\n  isValid() {\n    return true;\n  }\n}\n\n/**\n * Generates a list of dropdown items based on the given options.\n *\n * @param {Array} options - An array of objects representing the dropdown options.\n * Each object should have the following properties:\n *   - model: The command parameter for the dropdown item.\n *   - title: The label to display for the dropdown item.\n *   - value: The value of the dropdown item.\n * @return {Collection} - A Collection object containing the generated dropdown items.\n */\nfunction prepareListOptions(options) {\n  const itemDefinitions = new ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_2__.Collection();\n\n  // Create dropdown items.\n  for (const option of options) {\n    const def = {\n      type: "button",\n      model: new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.Model({\n        commandName: "websparkAdvancedImage",\n        commandParam: option.model,\n        label: option.title,\n        withText: true,\n        value: option.value,\n      }),\n    };\n\n    itemDefinitions.add(def);\n  }\n\n  return itemDefinitions;\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./js/ckeditor5_plugins/websparkPlugin/src/advancedimage/websparkadvancedimageview.js?')},"./js/ckeditor5_plugins/websparkPlugin/src/button/insertbuttoncommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ InsertWebsparkButtonCommand)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/**\n * @file defines InsertWebsparkButtonCommand, which is executed when the websparkButton\n * form is submitted.\n */\n\n\n\nclass InsertWebsparkButtonCommand extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Command {\n  execute({ href, text, styles, target, size }) {\n    const { model } = this.editor;\n\n    model.change((writer) => {\n      const websparkButton = writer.createElement("websparkButton", {\n        text,\n        href,\n        target,\n        styles,\n        size,\n      });\n      const websparkButtonText = writer.createElement("websparkButtonText");\n      const textNode = writer.createText(text);\n\n      writer.append(textNode, websparkButtonText);\n      writer.append(websparkButtonText, websparkButton);\n\n      model.insertContent(websparkButton);\n    });\n  }\n\n  refresh() {\n    const { model } = this.editor;\n    const { selection } = model.document;\n\n    // Determine if the cursor (selection) is in a position where adding a\n    // websparkButton is permitted. This is based on the schema of the model(s)\n    // currently containing the cursor.\n    const allowedIn = model.schema.findAllowedParent(\n      selection.getFirstPosition(),\n      "websparkButton"\n    );\n\n    // If the cursor is not in a location where a simpleBox can be added, return\n    // null so the addition doesn\'t happen.\n    this.isEnabled = allowedIn !== null;\n\n    const selectedElement = selection.getSelectedElement();\n\n    if (selectedElement?.name === "websparkButton") {\n      const text = selectedElement?.getChild(0)?.getChild(0)?._data;\n\n      this.value = {\n        ...Object.fromEntries(selectedElement.getAttributes()),\n        text,\n      };\n    } else {\n      this.value = null;\n    }\n\n    // In the layout view, when the editor inserts a webspark button in the editor,then\n    // undesired styles are added. So, a timeout and some javascript code is applied to remove them.\n    // TO DO: A better solution should be sought.\n    setTimeout(function () {\n      let offCanvasCssStyle = document.getElementById("ckeditor5-off-canvas-reset");\n      if (offCanvasCssStyle) {\n        document.body.removeChild(offCanvasCssStyle);\n        offCanvasCssStyle.textContent = offCanvasCssStyle.textContent.replace(\n          "#drupal-off-canvas-wrapper [data-drupal-ck-style-fence] .ck.ck-content * {display:revert;background:revert;color:initial;padding:revert;}",\n          ""\n        );\n        document.body.appendChild(offCanvasCssStyle);\n      }\n    }, 500);\n  }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./js/ckeditor5_plugins/websparkPlugin/src/button/insertbuttoncommand.js?')},"./js/ckeditor5_plugins/websparkPlugin/src/button/websparkbutton.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ WebsparkButton)\n/* harmony export */ });\n/* harmony import */ var _websparkbuttonediting__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./websparkbuttonediting */ "./js/ckeditor5_plugins/websparkPlugin/src/button/websparkbuttonediting.js");\n/* harmony import */ var _websparkbuttonui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./websparkbuttonui */ "./js/ckeditor5_plugins/websparkPlugin/src/button/websparkbuttonui.js");\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/**\n * @file This is what CKEditor refers to as a master (glue) plugin. Its role is\n * just to load the “editing” and “UI” components of this Plugin. Those\n * components could be included in this file, but\n *\n * I.e, this file\'s purpose is to integrate all the separate parts of the plugin\n * before it\'s made discoverable via index.js.\n */\n\n\n\n\n\nclass WebsparkButton extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__.Plugin {\n  static get requires() {\n    return [_websparkbuttonediting__WEBPACK_IMPORTED_MODULE_0__["default"], _websparkbuttonui__WEBPACK_IMPORTED_MODULE_1__["default"]];\n  }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./js/ckeditor5_plugins/websparkPlugin/src/button/websparkbutton.js?')},"./js/ckeditor5_plugins/websparkPlugin/src/button/websparkbuttonediting.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ WebsparkButtonEditing)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/* harmony import */ var ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/widget */ "ckeditor5/src/widget.js");\n/* harmony import */ var _insertbuttoncommand__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./insertbuttoncommand */ "./js/ckeditor5_plugins/websparkPlugin/src/button/insertbuttoncommand.js");\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/utils */ "./js/ckeditor5_plugins/websparkPlugin/src/utils/utils.js");\n\n\n\n\n\n/**\n * CKEditor 5 plugins do not work directly with the DOM. They are defined as\n * plugin-specific data models that are then converted to markup that\n * is inserted in the DOM.\n *\n * CKEditor 5 internally interacts with websparkButton as this model:\n * <websparkButton>\n *    <websparkButtonText></websparkButtonText>\n * </websparkButton>\n *\n * Which is converted for the browser/user as this markup\n * <a class="btn">\n *   <span class="text"></span>\n * </a>\n *\n * This file has the logic for defining the websparkButton model, and for how it is\n * converted to standard DOM markup.\n */\nclass WebsparkButtonEditing extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n  static get requires() {\n    return [ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.Widget];\n  }\n\n  init() {\n    this._defineSchema();\n    this._defineConverters();\n    this.editor.commands.add(\n      "insertWebsparkButton",\n      new _insertbuttoncommand__WEBPACK_IMPORTED_MODULE_2__["default"](this.editor)\n    );\n  }\n\n  /*\n   * This registers the structure that will be seen by CKEditor 5 as\n   * <websparkButton>\n   *    <websparkButtonText></websparkButtonText>\n   * </websparkButton>\n   *\n   * The logic in _defineConverters() will determine how this is converted to\n   * markup.\n   */\n  _defineSchema() {\n    // Schemas are registered via the central `editor` object.\n    const schema = this.editor.model.schema;\n\n    schema.register("websparkButton", {\n      isObject: true,\n      allowWhere: "$block",\n      allowAttributes: ["text", "href", "target", "styles", "role", "size"],\n    });\n\n    schema.register("websparkButtonText", {\n      isLimit: true,\n      allowIn: "websparkButton",\n      allowContentOf: "$block",\n    });\n  }\n\n  /**\n   * Converters determine how CKEditor 5 models are converted into markup and\n   * vice-versa.\n   */\n  _defineConverters() {\n    // Converters are registered via the central editor object.\n    const { conversion } = this.editor;\n\n    conversion.for("upcast").elementToElement({\n      view: {\n        name: "a",\n        classes: ["btn", /^btn-(gold|maroon|gray|dark)$/],\n        attributes: true,\n      },\n      model: (viewElement, { writer }) => {\n        const classes = viewElement.getAttribute("class");\n\n        return writer.createElement("websparkButton", {\n          text: viewElement.getAttribute("text"),\n          href: viewElement.getAttribute("href"),\n          styles: (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.extractDataFromClasses)(classes, {\n            "btn-gold": "gold",\n            "btn-maroon": "maroon",\n            "btn-gray": "gray",\n            "btn-dark": "dark",\n          }, null),\n          size: (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.extractDataFromClasses)(classes, {\n            "btn-md": "md",\n            "btn-sm": "sm"\n          }, \'default\'),\n          role: "button",\n          target: viewElement.getAttribute("target") || "unset",\n        });\n      },\n    });\n\n    conversion.for("dataDowncast").elementToElement({\n      model: "websparkButton",\n      view: (modelElement, { writer }) => {\n        const target = modelElement.getAttribute("target");\n        let classes = `btn btn-${modelElement.getAttribute("styles")}`;\n\n        const size = modelElement.getAttribute("size");\n\n        if (size !== "default") {\n          classes += ` btn-${size}`;\n        }\n\n        return writer.createContainerElement("a", {\n          class: classes,\n          href: modelElement.getAttribute("href"),\n          role: "button",\n          ...(target !== "unset" && { target }),\n        });\n      },\n    });\n\n    conversion.for("editingDowncast").elementToElement({\n      model: "websparkButton",\n      view: (modelElement, { writer }) => {\n        let classes = `btn btn-${modelElement.getAttribute("styles")}`;\n\n        const size = modelElement.getAttribute("size");\n\n        if (size !== "default") {\n          classes += ` btn-${size}`;\n        }\n\n        const a = writer.createContainerElement("a", {\n          class: classes,\n        });\n\n        return (0,ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.toWidget)(a, writer, { label: "Webspark button" });\n      },\n    });\n\n    conversion.for("upcast").elementToElement({\n      model: "websparkButtonText",\n      view: {\n        name: "span",\n        classes: "text",\n      },\n    });\n\n    conversion.for("dataDowncast").elementToElement({\n      model: "websparkButtonText",\n      view: {\n        name: "span",\n        classes: "text",\n      },\n    });\n\n    conversion.for("editingDowncast").elementToElement({\n      model: "websparkButtonText",\n      view: (_modelElement, { writer }) => {\n        const span = writer.createEditableElement("span", {\n          class: "text",\n        });\n\n        return (0,ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.toWidgetEditable)(span, writer);\n      },\n    });\n  }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./js/ckeditor5_plugins/websparkPlugin/src/button/websparkbuttonediting.js?')},"./js/ckeditor5_plugins/websparkPlugin/src/button/websparkbuttonui.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ WebsparkButtonUI)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/ui */ "ckeditor5/src/ui.js");\n/* harmony import */ var _icons_websparkButton_svg__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../icons/websparkButton.svg */ "./icons/websparkButton.svg");\n/* harmony import */ var _websparkbuttonview__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./websparkbuttonview */ "./js/ckeditor5_plugins/websparkPlugin/src/button/websparkbuttonview.js");\n/**\n * @file registers the websparkButton toolbar button and binds functionality to it.\n */\n\n\n\n\n\n\nclass WebsparkButtonUI extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n  static get requires() {\n    return [ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.ContextualBalloon];\n  }\n\n  init() {\n    const editor = this.editor;\n    const command = editor.commands.get("insertWebsparkButton");\n\n    this.form = new _websparkbuttonview__WEBPACK_IMPORTED_MODULE_3__.WebsparkButtonFormView(\n      getFormValidators(editor.t),\n      editor.locale,\n      command\n    );\n\n    editor.ui.componentFactory.add("websparkButton", (locale) => {\n      const dropdown = (0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.createDropdown)(locale);\n\n      this._setUpDropdown(dropdown, this.form, command);\n      this._setUpForm(this.form, dropdown, command);\n\n      return dropdown;\n    });\n  }\n\n  _setUpDropdown(dropdown, form, command) {\n    const editor = this.editor;\n    const t = editor.t;\n    const button = dropdown.buttonView;\n\n    dropdown.bind("isEnabled").to(command);\n    dropdown.panelView.children.add(form);\n\n    button.set({\n      label: t("Button"),\n      icon: _icons_websparkButton_svg__WEBPACK_IMPORTED_MODULE_2__["default"],\n      tooltip: true,\n    });\n\n    // Note: Use the low priority to make sure the following listener starts working after the\n    // default action of the drop-down is executed (i.e. the panel showed up). Otherwise, the\n    // invisible form/input cannot be focused/selected.\n    button.on(\n      "open",\n      () => {\n        form.setValues(command.value);\n        form.textInputView.children[1].select();\n\n        form.focus();\n      },\n      { priority: "low" }\n    );\n\n    dropdown.on("submit", () => {\n      if (form.isValid()) {\n        editor.execute("insertWebsparkButton", {\n          text: form.text,\n          href: form.href,\n          styles: form.styles,\n          size: form.size,\n          target: form.target,\n        });\n\n        closeUI();\n      }\n    });\n\n    dropdown.on("change:isOpen", () => form.element.reset());\n    dropdown.on("cancel", () => closeUI());\n\n    function closeUI() {\n      editor.editing.view.focus();\n      dropdown.isOpen = false;\n    }\n  }\n\n  _setUpForm(form, dropdown, command) {\n    form.delegate("submit", "cancel").to(dropdown);\n    form.saveButtonView.bind("isEnabled").to(command);\n  }\n}\n\nfunction getFormValidators(t) {\n  return [\n    (form) =>{} /*/{\n      if (!form.text.length) {\n       return t("The text must not be empty.");\n      } else if (!form.href.length) {\n       t("The URL must not be empty.");\n      }\n    },*/\n  ];\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./js/ckeditor5_plugins/websparkPlugin/src/button/websparkbuttonui.js?')},"./js/ckeditor5_plugins/websparkPlugin/src/button/websparkbuttonview.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WebsparkButtonFormView: () => (/* binding */ WebsparkButtonFormView)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/ui */ "ckeditor5/src/ui.js");\n/* harmony import */ var ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ckeditor5/src/utils */ "ckeditor5/src/utils.js");\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/utils */ "./js/ckeditor5_plugins/websparkPlugin/src/utils/utils.js");\n\n\n\n\n\n\nclass WebsparkButtonFormView extends ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.View {\n  DEFAULT_TEXT = "Button";\n  DEFAULT_HREF = "#";\n  DEFAULT_STYLE = "gold";\n  DEFAULT_SIZE = "default";\n  DEFAULT_TARGET = "unset";\n\n  constructor(validators, locale) {\n    super(locale);\n\n    const t = locale.t;\n\n    this.focusTracker = new ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_2__.FocusTracker();\n    this.keystrokes = new ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_2__.KeystrokeHandler();\n\n    this.textInputView = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createInput)(t("Text"), locale);\n    this.urlInputView = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createInput)(t("URL"), locale);\n    this.styleSelect = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createSelect)(\n      t("Style"),\n      this._getStyleOptions(t),\n      locale\n    );\n    this.sizeSelect = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createSelect)(t("Size"), this._getSizeOptions(t), locale);\n    this.targetSelect = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createSelect)(\n      t("Target"),\n      this._getTargetOptions(t),\n      locale\n    );\n\n    this.saveButtonView = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createButton)(\n      t("Save"),\n      ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.icons.check,\n      "ck-button-save",\n      locale\n    );\n    this.saveButtonView.type = "submit";\n\n    this.cancelButtonView = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createButton)(\n      t("Cancel"),\n      ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.icons.cancel,\n      "ck-button-cancel",\n      locale\n    );\n\n    this.cancelButtonView.delegate("execute").to(this, "cancel");\n\n    this._focusables = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.ViewCollection();\n\n    this._focusCycler = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.FocusCycler({\n      focusables: this._focusables,\n      focusTracker: this.focusTracker,\n      keystrokeHandler: this.keystrokes,\n      actions: {\n        focusPrevious: "shift + tab",\n        focusNext: "tab",\n      },\n    });\n\n    this._validators = validators;\n\n    this.setTemplate({\n      tag: "form",\n      attributes: {\n        class: ["ck", "ck-webspark-form"],\n        tabindex: "-1",\n      },\n      children: [\n        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createRow)(this.textInputView, this.urlInputView),\n        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createRow)(this.styleSelect, this.sizeSelect, this.targetSelect),\n        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createContainer)(\n          [this.saveButtonView, this.cancelButtonView],\n          ["ck-webspark-form-buttons"]\n        ),\n      ],\n    });\n  }\n\n  render() {\n    super.render();\n\n    (0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.submitHandler)({\n      view: this,\n    });\n\n    // TODO: Check why focus isn\'t working for a custom view\n    const childViews = [\n      this.textInputView.children[1],\n      this.urlInputView.children[1],\n      this.styleSelect.children[1],\n      this.sizeSelect.children[1],\n      this.targetSelect.children[1],\n      this.saveButtonView,\n      this.cancelButtonView,\n    ];\n\n    childViews.forEach((v) => {\n      // Register the view as focusable.\n      this._focusables.add(v);\n\n      // Register the view in the focus tracker.\n      this.focusTracker.add(v.element);\n    });\n\n    // Start listening for the keystrokes coming from #element.\n    this.keystrokes.listenTo(this.element);\n\n    const stopPropagation = (data) => data.stopPropagation();\n\n    // Since the form is in the dropdown panel which is a child of the toolbar, the toolbar\'s\n    // keystroke handler would take over the key management in the URL input. We need to prevent\n    // this ASAP. Otherwise, the basic caret movement using the arrow keys will be impossible.\n    this.keystrokes.set("arrowright", stopPropagation);\n    this.keystrokes.set("arrowleft", stopPropagation);\n    this.keystrokes.set("arrowup", stopPropagation);\n    this.keystrokes.set("arrowdown", stopPropagation);\n  }\n\n  destroy() {\n    super.destroy();\n\n    this.focusTracker.destroy();\n    this.keystrokes.destroy();\n  }\n\n  focus() {\n    this._focusCycler.focusFirst();\n  }\n\n  get text() {\n    return this.textInputView.children[1].element.value.trim();\n  }\n\n  set text(text) {\n    this.textInputView.children[1].element.value = text.trim();\n  }\n\n  get href() {\n    return this.urlInputView.children[1].element.value.trim();\n  }\n\n  set href(url) {\n    this.urlInputView.children[1].element.value = url.trim();\n  }\n\n  get styles() {\n    return this.styleSelect.children[1].value;\n  }\n\n  set styles(styles) {\n    this.styleSelect.children[1].value = styles;\n  }\n\n  get size() {\n    return this.sizeSelect.children[1].value;\n  }\n\n  set size(size) {\n    this.sizeSelect.children[1].value = size;\n  }\n\n  get target() {\n    return this.targetSelect.children[1].value;\n  }\n\n  set target(target) {\n    this.targetSelect.children[1].value = target;\n  }\n\n  setValues(values) {\n    this.text = values?.text || this.DEFAULT_TEXT;\n    this.href = values?.href || this.DEFAULT_HREF;\n    this.styles = values?.styles || this.DEFAULT_STYLE;\n    this.size = values?.size || this.DEFAULT_SIZE;\n    this.target = values?.target || this.DEFAULT_TARGET;\n  }\n\n  isValid() {\n    this.resetFormStatus();\n    for (const validator of this._validators) {\n      const errorText = validator(this);\n      if (errorText) {\n        if (errorText.includes("text")) {\n          this.textInputView.errorText = errorText;\n        } else if (errorText.includes("URL")) {\n          this.urlInputView.errorText = errorText;\n        }\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  resetFormStatus() {\n    this.textInputView.errorText = null;\n    this.urlInputView.errorText = null;\n  }\n\n  _getStyleOptions(t) {\n    return [\n      {\n        value: "gold",\n        title: t("Button Gold"),\n      },\n      {\n        value: "maroon",\n        title: t("Button Maroon"),\n      },\n      {\n        value: "gray",\n        title: t("Button Gray 2"),\n      },\n      {\n        value: "dark",\n        title: t("Button Gray 7"),\n      },\n    ];\n  }\n\n  _getSizeOptions(t) {\n    return [\n      {\n        value: "default",\n        title: t("Default"),\n      },\n      {\n        value: "md",\n        title: t("Medium"),\n      },\n      {\n        value: "sm",\n        title: t("Small"),\n      },\n    ];\n  }\n\n  _getTargetOptions(t) {\n    return [\n      {\n        value: "",\n        title: t("Not set"),\n      },\n      {\n        value: "_blank",\n        title: t("New window (_blank)"),\n      },\n\n      {\n        value: "_top",\n        title: t("Topmost window (_top)"),\n      },\n\n      {\n        value: "_self",\n        title: t("Same window (_self)"),\n      },\n\n      {\n        value: "_parent",\n        title: t("Parent window (_parent)"),\n      },\n    ];\n  }\n}\n\nfunction prepareListOptions(options) {\n  const itemDefinitions = new ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_2__.Collection();\n\n  // Create dropdown items.\n  for (const option of options) {\n    const def = {\n      type: "button",\n      model: new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.Model({\n        commandName: "websparkButton",\n        commandParam: option.model,\n        label: option.title,\n        withText: true,\n        value: option.value,\n      }),\n    };\n\n    itemDefinitions.add(def);\n  }\n  return itemDefinitions;\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./js/ckeditor5_plugins/websparkPlugin/src/button/websparkbuttonview.js?')},"./js/ckeditor5_plugins/websparkPlugin/src/divider/insertwebsparkdividercommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ InsertWebsparkDividerCommand)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/**\n * @file defines InsertWebsparkDividerCommand, which is executed when the websparkDivider\n * toolbar button is pressed.\n */\n// cSpell:ignore websparkdividerediting\n\n\n\nclass InsertWebsparkDividerCommand extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Command {\n  \n  execute(option) {\n    const { model } = this.editor;\n\n    model.change((writer) => {\n      // Insert <websparkDividerArea>*</websparkDividerArea> at the current selection position\n      // in a way that will result in creating a valid model structure.\n      model.insertContent(createWebsparkDividerArea(writer));\n    });\n  }\n\n  refresh() {\n    const { model } = this.editor;\n    const { selection } = model.document;\n\n    // Determine if the cursor (selection) is in a position where adding a\n    // websparkDivider is permitted. This is based on the schema of the model(s)\n    // currently containing the cursor.\n    const allowedIn = model.schema.findAllowedParent(\n      selection.getFirstPosition(),\n      "$block"\n    );\n\n    // If the cursor is not in a location where a websparkDivider can be added, return\n    // null so the addition doesn\'t happen.\n    this.isEnabled = allowedIn !== null;\n  }\n}\n\nfunction createWebsparkDividerArea(writer) {\n  // Create instances of the three elements registered with the editor in\n  // websparkdividerediting.js.\n  const websparkDivider = writer.createElement("websparkDivider");\n  writer.setAttribute(\'class\', \'copy-divider\', websparkDivider);\n  // Return the element to be added to the editor.\n  return websparkDivider;\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./js/ckeditor5_plugins/websparkPlugin/src/divider/insertwebsparkdividercommand.js?')},"./js/ckeditor5_plugins/websparkPlugin/src/divider/websparkdivider.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ WebsparkDivider)\n/* harmony export */ });\n/* harmony import */ var _websparkdividerediting__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./websparkdividerediting */ "./js/ckeditor5_plugins/websparkPlugin/src/divider/websparkdividerediting.js");\n/* harmony import */ var _websparkdividerui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./websparkdividerui */ "./js/ckeditor5_plugins/websparkPlugin/src/divider/websparkdividerui.js");\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/**\n * @file This is what CKEditor refers to as a master (glue) plugin. Its role is\n * just to load the “editing” and “UI” components of this Plugin. Those\n * components could be included in this file, but\n *\n * I.e, this file\'s purpose is to integrate all the separate parts of the plugin\n * before it\'s made discoverable via index.js.\n */\n// cSpell:ignore websparkdividerediting websparkdividerui\n\n// The contents of WebsparkDividerUI and WebsparkDivider editing could be included in this\n// file, but it is recommended to separate these concerns in different files.\n\n\n\n\nclass WebsparkDivider extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__.Plugin {\n  // Note that WebsparkDividerEditing and WebsparkDividerUI also extend `Plugin`, but these\n  // are not seen as individual plugins by CKEditor 5. CKEditor 5 will only\n  // discover the plugins explicitly exported in index.js.\n  static get requires() {\n    return [_websparkdividerediting__WEBPACK_IMPORTED_MODULE_0__["default"], _websparkdividerui__WEBPACK_IMPORTED_MODULE_1__["default"]];\n  }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./js/ckeditor5_plugins/websparkPlugin/src/divider/websparkdivider.js?')},"./js/ckeditor5_plugins/websparkPlugin/src/divider/websparkdividerediting.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ WebsparkDividerEditing)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/* harmony import */ var ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/widget */ "ckeditor5/src/widget.js");\n/* harmony import */ var _insertwebsparkdividercommand__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./insertwebsparkdividercommand */ "./js/ckeditor5_plugins/websparkPlugin/src/divider/insertwebsparkdividercommand.js");\n\n\n\n\n\n// cSpell:ignore responsivearea insertresponsiveareacommand\nclass WebsparkDividerEditing extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n  static get requires() {\n    return [ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.Widget];\n  }\n\n  init() {\n    this._defineSchema();\n    this._defineConverters();\n    this.editor.commands.add(\n      "insertWebsparkDivider",\n      new _insertwebsparkdividercommand__WEBPACK_IMPORTED_MODULE_2__["default"](this.editor)\n    );\n  }\n\n  /*\n   * This registers the structure that will be seen by CKEditor 5 as\n   * <websparkDivider>\n   * </websparkDivider>\n   *\n   * The logic in _defineConverters() will determine how this is converted to\n   * markup.\n   */\n  _defineSchema() {\n    // Schemas are registered via the central `editor` object.\n    const schema = this.editor.model.schema;\n\n    schema.register("websparkDivider", {\n      isObject: true,\n      allowWhere: "$block",\n    });\n  }\n\n  /**\n   * Converters determine how CKEditor 5 models are converted into markup and\n   * vice-versa.\n   */\n  _defineConverters() {\n    // Converters are registered via the central editor object.\n    const { conversion } = this.editor;\n\n    conversion.for("upcast").elementToElement({\n      view: {\n        name: "hr",\n        classes: "copy-divider",\n      },\n      model: (viewElement, { writer }) => {\n        return writer.createElement("websparkDivider");\n      },\n      converterPriority: "high",\n    });\n\n    conversion.for("dataDowncast").elementToElement({\n      model: "websparkDivider",\n      view: (modelElement, { writer }) => {\n        return writer.createEmptyElement("hr", {\n          class: "copy-divider",\n        });\n      },\n    });\n\n    conversion.for("editingDowncast").elementToElement({\n      model: "websparkDivider",\n      view: (modelElement, { writer }) => {\n        const wrapper = writer.createContainerElement(\n          "div",\n          null,\n          writer.createEmptyElement("hr", { class: "copy-divider" })\n        );\n\n        writer.addClass("copy-divider", wrapper);\n        writer.setCustomProperty("hr", true, wrapper);\n\n        return (0,ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.toWidget)(wrapper, writer, { label: "Webspark divider" });\n      },\n    });\n  }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./js/ckeditor5_plugins/websparkPlugin/src/divider/websparkdividerediting.js?')},"./js/ckeditor5_plugins/websparkPlugin/src/divider/websparkdividerui.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ WebsparkDividerUI)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/ui */ "ckeditor5/src/ui.js");\n/* harmony import */ var _icons_websparkDivider_svg__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../icons/websparkDivider.svg */ "./icons/websparkDivider.svg");\n/* harmony import */ var ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ckeditor5/src/utils */ "ckeditor5/src/utils.js");\n/**\n * @file registers the websparkDivider toolbar button and binds functionality to it.\n */\n\n\n\n\n\n\nclass WebsparkDividerUI extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n  init() {\n    const editor = this.editor;\n    const t = editor.t;\n  \n    editor.ui.componentFactory.add("websparkDivider", (locale) => {\n      const command = editor.commands.get("insertWebsparkDivider");\n      const buttonView = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.ButtonView(locale);\n\n      // Create the toolbar button.\n      buttonView.set({\n        label: editor.t("Divider"),\n        icon: _icons_websparkDivider_svg__WEBPACK_IMPORTED_MODULE_2__["default"],\n        tooltip: true,\n      });\n\n      // Bind the state of the button to the command.\n      buttonView.bind("isOn", "isEnabled").to(command, "value", "isEnabled");\n\n      // Execute the command when the button is clicked (executed).\n      this.listenTo(buttonView, "execute", () =>\n        editor.execute("insertWebsparkDivider")\n      );\n\n      return buttonView;\n    });\n  }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./js/ckeditor5_plugins/websparkPlugin/src/divider/websparkdividerui.js?')},"./js/ckeditor5_plugins/websparkPlugin/src/heading/insertwebsparkhighlightedheadingcommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ InsertWebsparkHighlightedHeadingCommand)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/**\n * @file defines InsertWebsparkHighlightedHeadingCommand, which is executed when the websparkHighlightedHeading\n * form is submitted.\n */\n\n\nclass InsertWebsparkHighlightedHeadingCommand extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Command {\n  execute({ text, styles, heading }) {\n    const { model } = this.editor;\n    model.change((writer) => {\n      const websparkHighlightedHeading = writer.createElement(\n        "websparkHighlightedHeading"\n      );\n      const websparkHighlightedHeadingHelement = writer.createElement(\n        "websparkHighlightedHeadingHelement",\n        { level: heading }\n      );\n      const websparkHighlightedHeadingText = writer.createElement(\n        "websparkHighlightedHeadingText",\n        { styles }\n      );\n      const textNode = writer.createText(text);\n\n      writer.append(textNode, websparkHighlightedHeadingText);\n      writer.append(\n        websparkHighlightedHeadingText,\n        websparkHighlightedHeadingHelement\n      );\n      writer.append(websparkHighlightedHeadingHelement, websparkHighlightedHeading);\n\n      model.insertContent(websparkHighlightedHeading);\n    });\n  }\n\n  refresh() {\n    const { model } = this.editor;\n    const { selection } = model.document;\n\n    // Determine if the cursor (selection) is in a position where adding a\n    // websparkHighlightedHeading is permitted. This is based on the schema of the model(s)\n    // currently containing the cursor.\n    const allowedIn = model.schema.findAllowedParent(\n      selection.getFirstPosition(),\n      "websparkHighlightedHeading"\n    );\n\n    // If the cursor is not in a location where a websparkHighlightedHeading can be added, return\n    // null so the addition doesn\'t happen.\n    this.isEnabled = allowedIn !== null;\n\n    // Checks if the selected element is a "websparkHighlightedHeading".\n    // If it is, retrieves the attributes, text, and heading level from the first child span element.\n    // Sets the value object with the retrieved data.\n    // If the selected element is not a "websparkHighlightedHeading", sets the value object to null.\n    const selectedElement = selection.getSelectedElement();\n    if (selectedElement?.name === "websparkHighlightedHeading") {\n      const span = selectedElement.getChild(0)?.getChild(0);\n      if (span) {\n        this.value = {\n          ...Object.fromEntries(span.getAttributes()),\n          text: span.getChild(0)?._data ?? "",\n          heading: span.parent.getAttribute("level"),\n        };\n      }\n    } else {\n      this.value = null;\n    }\n  }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./js/ckeditor5_plugins/websparkPlugin/src/heading/insertwebsparkhighlightedheadingcommand.js?')},"./js/ckeditor5_plugins/websparkPlugin/src/heading/websparkhighlightedheading.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ WebsparkHighlightedHeading)\n/* harmony export */ });\n/* harmony import */ var _websparkhighlightedheadingediting__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./websparkhighlightedheadingediting */ "./js/ckeditor5_plugins/websparkPlugin/src/heading/websparkhighlightedheadingediting.js");\n/* harmony import */ var _websparkhighlightedheadingui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./websparkhighlightedheadingui */ "./js/ckeditor5_plugins/websparkPlugin/src/heading/websparkhighlightedheadingui.js");\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/**\n * @file This is what CKEditor refers to as a master (glue) plugin. Its role is\n * just to load the “editing” and “UI” components of this Plugin. Those\n * components could be included in this file, but\n *\n * I.e, this file\'s purpose is to integrate all the separate parts of the plugin\n * before it\'s made discoverable via index.js.\n */\n\n\n\n\n\nclass WebsparkHighlightedHeading extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__.Plugin {\n  static get requires() {\n    return [_websparkhighlightedheadingediting__WEBPACK_IMPORTED_MODULE_0__["default"], _websparkhighlightedheadingui__WEBPACK_IMPORTED_MODULE_1__["default"]];\n  }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./js/ckeditor5_plugins/websparkPlugin/src/heading/websparkhighlightedheading.js?')},"./js/ckeditor5_plugins/websparkPlugin/src/heading/websparkhighlightedheadingediting.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ WebsparkHighlightedHeadingEditing)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/* harmony import */ var ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/widget */ "ckeditor5/src/widget.js");\n/* harmony import */ var _insertwebsparkhighlightedheadingcommand__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./insertwebsparkhighlightedheadingcommand */ "./js/ckeditor5_plugins/websparkPlugin/src/heading/insertwebsparkhighlightedheadingcommand.js");\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/utils */ "./js/ckeditor5_plugins/websparkPlugin/src/utils/utils.js");\n\n\n\n\n\n// cSpell:ignore websparkHighlightedHeading insertwebsparkhighlightedheadingcommand\n\n/**\n * CKEditor 5 plugins do not work directly with the DOM. They are defined as\n * plugin-specific data models that are then converted to markup that\n * is inserted in the DOM.\n *\n * CKEditor 5 internally interacts with websparkHighlightedHeading as this model:\n * <websparkHighlightedHeading>\n *    <websparkHighlightedHeadingText></websparkHighlightedHeadingText>\n * </websparkHighlightedHeading>\n *\n * Which is converted for the browser/user as this markup\n * <a class="btn">\n *   <span class="text"></span>\n * </a>\n *\n * This file has the logic for defining the websparkHighlightedHeading model, and for how it is\n * converted to standard DOM markup.\n */\nclass WebsparkHighlightedHeadingEditing extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n  static get requires() {\n    return [ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.Widget];\n  }\n\n  init() {\n    this._defineSchema();\n    this._defineConverters();\n    this.editor.commands.add(\n      "insertWebsparkHighlightedHeading",\n      new _insertwebsparkhighlightedheadingcommand__WEBPACK_IMPORTED_MODULE_2__["default"](this.editor)\n    );\n  }\n\n  /*\n   * This registers the structure that will be seen by CKEditor 5 as\n   * <websparkHighlightedHeading>\n   *    <websparkHighlightedHeadingText></websparkHighlightedHeadingText>\n   * </websparkHighlightedHeading>\n   *\n   * The logic in _defineConverters() will determine how this is converted to\n   * markup.\n   */\n  _defineSchema() {\n    // Schemas are registered via the central `editor` object.\n    const schema = this.editor.model.schema;\n\n    schema.register("websparkHighlightedHeading", {\n      isObject: true,\n      allowWhere: "$block",\n    });\n\n    schema.register("websparkHighlightedHeadingHelement", {\n      allowIn: "websparkHighlightedHeading",\n      allowAttributes: ["level"],\n    });\n\n    schema.register("websparkHighlightedHeadingText", {\n      allowIn: "websparkHighlightedHeadingHelement",\n      allowAttributes: ["styles"],\n      allowChildren: "$text",\n    });\n  }\n\n  /**\n   * Converters determine how CKEditor 5 models are converted into markup and\n   * vice-versa.\n   */\n  _defineConverters() {\n    // Converters are registered via the central editor object.\n    const { conversion } = this.editor;\n\n    conversion.for("upcast").elementToElement({\n      view: {\n        name: /^(h1|h2|h3|h4)$/,\n      },\n      model: (viewElement, { writer }) => {\n        return writer.createElement("websparkHighlightedHeadingHelement", {\n          level: viewElement.name,\n        });\n      },\n    });\n\n    conversion.for("downcast").elementToElement({\n      model: {\n        name: "websparkHighlightedHeadingHelement",\n        attributes: ["level"],\n      },\n      view: (modelElement, { writer }) => {\n        return writer.createContainerElement(\n          modelElement.getAttribute("level")\n        );\n      },\n    });\n\n    conversion.for("upcast").elementToElement({\n      view: {\n        name: "span",\n        classes: [/^highlight-(gold|black|white)$/],\n      },\n      model: (viewElement, { writer }) => {\n        const classes = viewElement.getAttribute("class");\n\n        return writer.createElement("websparkHighlightedHeadingText", {\n          styles: (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.extractDataFromClasses)(\n            classes,\n            {\n              "highlight-gold": "gold",\n              "highlight-black": "black",\n              "highlight-white": "white",\n            },\n            null\n          ),\n        });\n      },\n    });\n\n    conversion.for("dataDowncast").elementToElement({\n      model: "websparkHighlightedHeadingText",\n      view: (modelElement, { writer }) => {\n        const classes = `highlight-${modelElement.getAttribute("styles")}`;\n\n        return writer.createContainerElement("span", {\n          class: classes,\n        });\n      },\n    });\n\n    conversion.for("editingDowncast").elementToElement({\n      model: "websparkHighlightedHeadingText",\n      view: (modelElement, { writer }) => {\n        const classes = `highlight-${modelElement.getAttribute("styles")}`;\n        const span = writer.createEditableElement("span", {\n          class: classes,\n        });\n\n        return (0,ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.toWidgetEditable)(span, writer, { label: "Highlighted Text" });\n      },\n    });\n\n    conversion.for("upcast").elementToElement({\n      view: {\n        name: "div",\n        classes: ["uds-highlighted-heading"],\n      },\n      model: (viewElement, { writer }) => {\n        return writer.createElement("websparkHighlightedHeading");\n      },\n    });\n\n    conversion.for("dataDowncast").elementToElement({\n      model: "websparkHighlightedHeading",\n      view: (modelElement, { writer }) => {\n        return writer.createContainerElement("div", {\n          class: "uds-highlighted-heading",\n        });\n      },\n    });\n\n    conversion.for("editingDowncast").elementToElement({\n      model: "websparkHighlightedHeading",\n      view: (modelElement, { writer }) => {\n        const divHH = writer.createContainerElement("div", {\n          class: "uds-highlighted-heading",\n        });\n\n        return (0,ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.toWidget)(divHH, writer, { label: "Highlighted Heading" });\n      },\n    });\n  }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./js/ckeditor5_plugins/websparkPlugin/src/heading/websparkhighlightedheadingediting.js?')},"./js/ckeditor5_plugins/websparkPlugin/src/heading/websparkhighlightedheadingui.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ WebsparkHighlightedHeadingUI)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/ui */ "ckeditor5/src/ui.js");\n/* harmony import */ var _icons_websparkHighlightedHeading_svg__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../icons/websparkHighlightedHeading.svg */ "./icons/websparkHighlightedHeading.svg");\n/* harmony import */ var _websparkhighlightedheadingview__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./websparkhighlightedheadingview */ "./js/ckeditor5_plugins/websparkPlugin/src/heading/websparkhighlightedheadingview.js");\n/**\n * @file registers the websparkHighlightedHeading toolbar button and binds functionality to it.\n */\n\n\n\n\n\n\nclass WebsparkHighlightedHeadingUI extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n  static get requires() {\n    return [ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.ContextualBalloon];\n  }\n\n  init() {\n    const editor = this.editor;\n    const command = editor.commands.get("insertWebsparkHighlightedHeading");\n\n    this.form = new _websparkhighlightedheadingview__WEBPACK_IMPORTED_MODULE_3__.WebsparkHighlightedHeadingFormView(\n      getFormValidators(editor.t),\n      editor.locale,\n      command\n    );\n\n    editor.ui.componentFactory.add("websparkHighlightedHeading", (locale) => {\n      const dropdown = (0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.createDropdown)(locale);\n\n      this._setUpDropdown(dropdown, this.form, command);\n      this._setUpForm(this.form, dropdown, command);\n\n      return dropdown;\n    });\n  }\n\n  _setUpDropdown(dropdown, form, command) {\n    const editor = this.editor;\n    const t = editor.t;\n    const button = dropdown.buttonView;\n\n    dropdown.bind("isEnabled").to(command);\n    dropdown.panelView.children.add(form);\n\n    button.set({\n      label: t("Highlighted Heading"),\n      icon: _icons_websparkHighlightedHeading_svg__WEBPACK_IMPORTED_MODULE_2__["default"],\n      tooltip: true,\n    });\n\n    // Note: Use the low priority to make sure the following listener starts working after the\n    // default action of the drop-down is executed (i.e. the panel showed up). Otherwise, the\n    // invisible form/input cannot be focused/selected.\n \n    button.on(\n      "open",\n      () => {\n        form.setValues(command.value);\n        form.textInputView.children[1].element.select() ;\n      },\n      { priority: "low" }\n    );\n\n    dropdown.on("submit", () => {\n      if (form.isValid()) {\n        editor.execute("insertWebsparkHighlightedHeading", {\n          text: form.text,\n          styles: form.styles,\n          heading: form.heading,\n        });\n\n        closeUI();\n      }\n    });\n\n    dropdown.on("change:isOpen", () => form.element.reset());\n    dropdown.on("cancel", () => closeUI());\n\n    function closeUI() {\n      editor.editing.view.focus();\n      dropdown.isOpen = false;\n    }\n  }\n\n  _setUpForm(form, dropdown, command) {\n    form.delegate("submit", "cancel").to(dropdown);\n    form.saveButtonView.bind("isEnabled").to(command);\n  }\n}\n\nfunction getFormValidators(t) {\n  return [\n    (form) => {}/*{\n      if (!form.text.length) {\n        return t("The text must not be empty.");\n      }\n    },*/\n  ];\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./js/ckeditor5_plugins/websparkPlugin/src/heading/websparkhighlightedheadingui.js?')},"./js/ckeditor5_plugins/websparkPlugin/src/heading/websparkhighlightedheadingview.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WebsparkHighlightedHeadingFormView: () => (/* binding */ WebsparkHighlightedHeadingFormView)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/ui */ "ckeditor5/src/ui.js");\n/* harmony import */ var ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ckeditor5/src/utils */ "ckeditor5/src/utils.js");\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/utils */ "./js/ckeditor5_plugins/websparkPlugin/src/utils/utils.js");\n\n\n\n\n\n\nclass WebsparkHighlightedHeadingFormView extends ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.View {\n  DEFAULT_TEXT = "";\n  DEFAULT_STYLE = "gold";\n  DEFAULT_HEADING = "h1";\n\n  constructor(validators, locale) {\n    super(locale);\n\n    const t = locale.t;\n\n    this.focusTracker = new ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_2__.FocusTracker();\n    this.keystrokes = new ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_2__.KeystrokeHandler();\n\n    this.textInputView = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createTextArea)(t("Content"), locale);\n    this.styleSelect = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createSelect)(\n      t("Style"),\n      this._getStyleOptions(t),\n      locale\n    );\n    this.headingSelect = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createSelect)(\n      t("Heading"),\n      this._getHeadingOptions(t),\n      locale\n    );\n\n    this.saveButtonView = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createButton)(\n      t("Save"),\n      ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.icons.check,\n      "ck-button-save",\n      locale\n    );\n    this.saveButtonView.type = "submit";\n\n    this.cancelButtonView = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createButton)(\n      t("Cancel"),\n      ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.icons.cancel,\n      "ck-button-cancel",\n      locale\n    );\n\n    this.cancelButtonView.delegate("execute").to(this, "cancel");\n\n    this._focusables = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.ViewCollection();\n\n    this._focusCycler = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.FocusCycler({\n      focusables: this._focusables,\n      focusTracker: this.focusTracker,\n      keystrokeHandler: this.keystrokes,\n      actions: {\n        focusPrevious: "shift + tab",\n        focusNext: "tab",\n      },\n    });\n\n    this._validators = validators;\n\n    this.setTemplate({\n      tag: "form",\n      attributes: {\n        class: ["ck", "ck-webspark-form", "webspark-heading-dialog"],\n        tabindex: "-1",\n      },\n      children: [\n        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createRow)(this.textInputView),\n        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createRow)(this.styleSelect, this.headingSelect),\n        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createContainer)(\n          [this.saveButtonView, this.cancelButtonView],\n          ["ck-webspark-form-buttons"]\n        ),\n      ],\n    });\n  }\n\n  render() {\n    super.render();\n\n    (0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.submitHandler)({\n      view: this,\n    });\n\n    // TODO: Check why focus isn\'t working for a custom view\n    const childViews = [\n      this.textInputView.children[1],\n      this.styleSelect.children[1],\n      this.headingSelect.children[1],\n      this.saveButtonView,\n      this.cancelButtonView,\n    ];\n\n    childViews.forEach((v) => {\n      // Register the view as focusable.\n      this._focusables.add(v);\n\n      // Register the view in the focus tracker.\n      this.focusTracker.add(v.element);\n    });\n\n    // Start listening for the keystrokes coming from #element.\n    this.keystrokes.listenTo(this.element);\n\n    const stopPropagation = (data) => data.stopPropagation();\n\n    // Since the form is in the dropdown panel which is a child of the toolbar, the toolbar\'s\n    // keystroke handler would take over the key management in the URL input. We need to prevent\n    // this ASAP. Otherwise, the basic caret movement using the arrow keys will be impossible.\n    this.keystrokes.set("arrowright", stopPropagation);\n    this.keystrokes.set("arrowleft", stopPropagation);\n    this.keystrokes.set("arrowup", stopPropagation);\n    this.keystrokes.set("arrowdown", stopPropagation);\n  }\n\n  destroy() {\n    super.destroy();\n\n    this.focusTracker.destroy();\n    this.keystrokes.destroy();\n  }\n\n  focus() {\n    this._focusCycler.focusFirst();\n  }\n\n  get text() {\n    return this.textInputView.children[1].element.value.trim();\n  }\n\n  set text(text) {\n    this.textInputView.children[1].element.value = text.trim();\n  }\n\n  get styles() {\n    return this.styleSelect.children[1].value;\n  }\n\n  set styles(styles) {\n    this.styleSelect.children[1].value = styles;\n  }\n\n  get heading() {\n    return this.headingSelect.children[1].value;\n  }\n\n  set heading(heading) {\n    this.headingSelect.children[1].value = heading;\n  }\n\n  setValues(values) {\n    this.text = values?.text || this.DEFAULT_TEXT;\n    this.styles = values?.styles || this.DEFAULT_STYLE;\n    this.heading = values?.heading || this.DEFAULT_HEADING;\n  }\n\n  isValid() {\n    return true;\n    this.resetFormStatus();\n\n    for (const validator of this._validators) {\n      const errorText = validator(this);\n\n      if (errorText) {\n        if (errorText.includes("text")) {\n          this.textInputView.errorText = errorText;\n        }\n\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  resetFormStatus() {\n    this.textInputView.errorText = null;\n  }\n\n  /**\n   * Generates an array of style options.\n   *\n   * @param {function} t - the translation function\n   * @return {array} an array of style options\n   */\n  _getStyleOptions(t) {\n    return [\n      {\n        value: "gold",\n        title: t("Gold Highlight"),\n      },\n      {\n        value: "black",\n        title: t("Gray 7 Highlight"),\n      },\n      {\n        value: "white",\n        title: t("White Highlight"),\n      },\n    ];\n  }\n\n  /**\n   * Generates an array of heading options.\n   *\n   * @param {type} t - a function used for translation\n   * @return {Array} an array of heading options\n   */\n  _getHeadingOptions(t) {\n    return [\n      {\n        value: "h1",\n        title: t("H1"),\n      },\n\n      {\n        value: "h2",\n        title: t("H2"),\n      },\n\n      {\n        value: "h3",\n        title: t("H3"),\n      },\n\n      {\n        value: "h4",\n        title: t("H4"),\n      },\n    ];\n  }\n}\n\nfunction prepareListOptions(options) {\n  const itemDefinitions = new ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_2__.Collection();\n\n  // Create dropdown items.\n  for (const option of options) {\n    const def = {\n      type: "button",\n      model: new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.Model({\n        commandName: "websparkHighlightedHeading",\n        commandParam: option.model,\n        label: option.title,\n        withText: true,\n        value: option.value,\n      }),\n    };\n\n    itemDefinitions.add(def);\n  }\n  return itemDefinitions;\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./js/ckeditor5_plugins/websparkPlugin/src/heading/websparkhighlightedheadingview.js?')},"./js/ckeditor5_plugins/websparkPlugin/src/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _button_websparkbutton__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./button/websparkbutton */ "./js/ckeditor5_plugins/websparkPlugin/src/button/websparkbutton.js");\n/* harmony import */ var _divider_websparkdivider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./divider/websparkdivider */ "./js/ckeditor5_plugins/websparkPlugin/src/divider/websparkdivider.js");\n/* harmony import */ var _lead_websparklead__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lead/websparklead */ "./js/ckeditor5_plugins/websparkPlugin/src/lead/websparklead.js");\n/* harmony import */ var _heading_websparkhighlightedheading__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./heading/websparkhighlightedheading */ "./js/ckeditor5_plugins/websparkPlugin/src/heading/websparkhighlightedheading.js");\n/* harmony import */ var _quote_websparkblockquote__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./quote/websparkblockquote */ "./js/ckeditor5_plugins/websparkPlugin/src/quote/websparkblockquote.js");\n/* harmony import */ var _table_websparktable__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./table/websparktable */ "./js/ckeditor5_plugins/websparkPlugin/src/table/websparktable.js");\n/* harmony import */ var _advancedimage_websparkadvancedimage__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./advancedimage/websparkadvancedimage */ "./js/ckeditor5_plugins/websparkPlugin/src/advancedimage/websparkadvancedimage.js");\n/* harmony import */ var _mediaalter_websparkmediaalter__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./mediaalter/websparkmediaalter */ "./js/ckeditor5_plugins/websparkPlugin/src/mediaalter/websparkmediaalter.js");\n/* harmony import */ var _liststyle_websparkliststyle__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./liststyle/websparkliststyle */ "./js/ckeditor5_plugins/websparkPlugin/src/liststyle/websparkliststyle.js");\n/**\n * @file The build process always expects an index.js file. Anything exported\n * here will be recognized by CKEditor 5 as an available plugin. Multiple\n * plugins can be exported in this one file.\n *\n * I.e. this file\'s purpose is to make plugin(s) discoverable.\n */\n\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  WebsparkButton: _button_websparkbutton__WEBPACK_IMPORTED_MODULE_0__["default"],\n  WebsparkDivider: _divider_websparkdivider__WEBPACK_IMPORTED_MODULE_1__["default"],\n  WebsparkLead: _lead_websparklead__WEBPACK_IMPORTED_MODULE_2__["default"],\n  WebsparkHighlightedHeading: _heading_websparkhighlightedheading__WEBPACK_IMPORTED_MODULE_3__["default"],\n  WebsparkBlockquote: _quote_websparkblockquote__WEBPACK_IMPORTED_MODULE_4__["default"],\n  WebsparkTable: _table_websparktable__WEBPACK_IMPORTED_MODULE_5__["default"],\n  WebsparkAdvancedImage: _advancedimage_websparkadvancedimage__WEBPACK_IMPORTED_MODULE_6__["default"],\n  WebsparkMediaAlter: _mediaalter_websparkmediaalter__WEBPACK_IMPORTED_MODULE_7__["default"],\n  WebsparkListStyle: _liststyle_websparkliststyle__WEBPACK_IMPORTED_MODULE_8__["default"],\n});\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./js/ckeditor5_plugins/websparkPlugin/src/index.js?')},"./js/ckeditor5_plugins/websparkPlugin/src/lead/insertwebsparkleadcommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ InsertWebsparkLeadCommand)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/**\n * @file defines InsertWebsparkLeadCommand, which is executed when the websparkLead\n * form is submitted.\n */\n\n\n\nclass InsertWebsparkLeadCommand extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Command {\n  execute({text}) {\n    const {model} = this.editor;\n    model.change((writer) => {\n      const websparkLead = writer.createElement(\n        "websparkLead"\n      );\n      const websparkLeadText = writer.createElement(\n        "websparkLeadText",\n      );\n      const textNode = writer.createText(text);\n      writer.append(textNode, websparkLeadText);\n      writer.append(websparkLeadText, websparkLead);\n      model.insertContent(websparkLead);\n    });\n  }\n\n  refresh() {\n    const {model} = this.editor;\n    const {selection} = model.document;\n\n    const allowedIn = model.schema.findAllowedParent(\n      selection.getFirstPosition(),\n      "websparkLead"\n    );\n\n    this.isEnabled = allowedIn !== null;\n\n    const selectedElement = selection.getSelectedElement();\n    if (selectedElement?.name === "websparkLead") {\n      const span = selectedElement.getChild(0)?.getChild(0);\n      if (span) {\n        this.value = {\n          ...Object.fromEntries(span.getAttributes()),\n          text: span._data ?? "",\n        };\n      }\n    } else {\n      this.value = null;\n    }\n  }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./js/ckeditor5_plugins/websparkPlugin/src/lead/insertwebsparkleadcommand.js?')},"./js/ckeditor5_plugins/websparkPlugin/src/lead/websparklead.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ WebsparkLead)\n/* harmony export */ });\n/* harmony import */ var _websparkleadediting__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./websparkleadediting */ "./js/ckeditor5_plugins/websparkPlugin/src/lead/websparkleadediting.js");\n/* harmony import */ var _websparkleadui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./websparkleadui */ "./js/ckeditor5_plugins/websparkPlugin/src/lead/websparkleadui.js");\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/**\n * @file This is what CKEditor refers to as a master (glue) plugin. Its role is\n * just to load the “editing” and “UI” components of this Plugin. Those\n * components could be included in this file, but\n *\n * I.e, this file\'s purpose is to integrate all the separate parts of the plugin\n * before it\'s made discoverable via index.js.\n */\n\n\n\n\n\nclass WebsparkLead extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__.Plugin {\n  static get requires() {\n    return [_websparkleadediting__WEBPACK_IMPORTED_MODULE_0__["default"], _websparkleadui__WEBPACK_IMPORTED_MODULE_1__["default"]];\n  }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./js/ckeditor5_plugins/websparkPlugin/src/lead/websparklead.js?')},"./js/ckeditor5_plugins/websparkPlugin/src/lead/websparkleadediting.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ WebsparkLeadEditing)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/* harmony import */ var ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/widget */ "ckeditor5/src/widget.js");\n/* harmony import */ var _insertwebsparkleadcommand__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./insertwebsparkleadcommand */ "./js/ckeditor5_plugins/websparkPlugin/src/lead/insertwebsparkleadcommand.js");\n\n\n\n\n// cSpell:ignore websparkLead insertwebsparkleadcommand\n\n/**\n * CKEditor 5 plugins do not work directly with the DOM. They are defined as\n * plugin-specific data models that are then converted to markup that\n * is inserted in the DOM.\n *\n * CKEditor 5 internally interacts with websparkLead as this model:\n * <websparkLead>\n *    <websparkLeadText></websparkLeadText>\n * </websparkLead>\n *\n * Which is converted for the browser/user as this markup\n * <a class="btn">\n *   <span class="text"></span>\n * </a>\n *\n * This file has the logic for defining the websparkLead model, and for how it is\n * converted to standard DOM markup.\n */\nclass WebsparkLeadEditing extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n  static get requires() {\n    return [ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.Widget];\n  }\n\n  init() {\n    this._defineSchema();\n    this._defineConverters();\n    this.editor.commands.add(\n      "insertWebsparkLead",\n      new _insertwebsparkleadcommand__WEBPACK_IMPORTED_MODULE_2__["default"](this.editor)\n    );\n  }\n\n  _defineSchema() {\n    // Schemas are registered via the central `editor` object.\n    const schema = this.editor.model.schema;\n\n    schema.register("websparkLead", {\n      isObject: true,\n      allowWhere: "$block",\n    });\n\n    schema.register("websparkLeadText", {\n      allowIn: "websparkLead",\n      allowAttributes: ["classes"],\n      allowChildren: "$text",\n    });\n  }\n\n  /**\n   * Converters determine how CKEditor 5 models are converted into markup and\n   * vice-versa.\n   */\n  _defineConverters() {\n    // Converters are registered via the central editor object.\n    const { conversion } = this.editor;\n\n    conversion.for("upcast").elementToElement({\n      view: {\n        name: "p",\n        class: "lead",\n      },\n      model: (viewElement, { writer }) => {\n        const classes = viewElement.getAttribute("class");\n\n        return writer.createElement("websparkLeadText", { classes: classes });\n      },\n    });\n\n    conversion.for("dataDowncast").elementToElement({\n      model: "websparkLeadText",\n      view: (modelElement, { writer }) => {\n        return writer.createContainerElement("p", {\n          class: "lead",\n        });\n      },\n    });\n\n    conversion.for("editingDowncast").elementToElement({\n      model: "websparkLeadText",\n      view: (modelElement, { writer }) => {\n        const span = writer.createEditableElement("p", {\n          class: "lead",\n        });\n\n        return (0,ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.toWidgetEditable)(span, writer, { label: "Lead Text" });\n      },\n    });\n\n    conversion.for("upcast").elementToElement({\n      view: {\n        name: "div",\n        classes: ["uds-lead"],\n      },\n      model: (viewElement, { writer }) => {\n        return writer.createElement("websparkLead");\n      },\n    });\n\n    conversion.for("dataDowncast").elementToElement({\n      model: "websparkLead",\n      view: (modelElement, { writer }) => {\n        return writer.createContainerElement("div", {\n          class: "uds-lead",\n        });\n      },\n    });\n\n    conversion.for("editingDowncast").elementToElement({\n      model: "websparkLead",\n      view: (modelElement, { writer }) => {\n        const divHH = writer.createContainerElement("div", {\n          class: "uds-lead",\n        });\n\n        return (0,ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.toWidget)(divHH, writer, { label: "Lead" });\n      },\n    });\n  }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./js/ckeditor5_plugins/websparkPlugin/src/lead/websparkleadediting.js?')},"./js/ckeditor5_plugins/websparkPlugin/src/lead/websparkleadui.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ WebsparkLeadUI)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/ui */ "ckeditor5/src/ui.js");\n/* harmony import */ var _icons_websparklead_svg__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../icons/websparklead.svg */ "./icons/websparklead.svg");\n/* harmony import */ var _websparkleadview__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./websparkleadview */ "./js/ckeditor5_plugins/websparkPlugin/src/lead/websparkleadview.js");\n/**\n * @file registers the websparkLead toolbar button and binds functionality to it.\n */\n\n\n\n\n\n\nclass WebsparkLeadUI extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n  static get requires() {\n    return [ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.ContextualBalloon];\n  }\n\n  init() {\n    const editor = this.editor;\n    const command = editor.commands.get("insertWebsparkLead");\n\n    this.form = new _websparkleadview__WEBPACK_IMPORTED_MODULE_3__.WebsparkLeadFormView(\n      getFormValidators(editor.t),\n      editor.locale,\n      command\n    );\n\n    editor.ui.componentFactory.add("websparkLead", (locale) => {\n      const dropdown = (0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.createDropdown)(locale);\n\n      this._setUpDropdown(dropdown, this.form, command);\n      this._setUpForm(this.form, dropdown, command);\n\n      return dropdown;\n    });\n  }\n\n  _setUpDropdown(dropdown, form, command) {\n    const editor = this.editor;\n    const t = editor.t;\n    const button = dropdown.buttonView;\n\n    dropdown.bind("isEnabled").to(command);\n    dropdown.panelView.children.add(form);\n\n    button.set({\n      label: t("Lead"),\n      icon: _icons_websparklead_svg__WEBPACK_IMPORTED_MODULE_2__["default"],\n      tooltip: true,\n    });\n\n    // Note: Use the low priority to make sure the following listener starts working after the\n    // default action of the drop-down is executed (i.e. the panel showed up). Otherwise, the\n    // invisible form/input cannot be focused/selected.\n\n    button.on(\n      "open",\n      () => {\n        form.setValues(command.value);\n        form.textInputView.children[1].element.select();\n      },\n      { priority: "low" }\n    );\n\n    dropdown.on("submit", () => {\n      if (form.isValid()) {\n        editor.execute("insertWebsparkLead", {\n          text: form.text,\n        });\n\n        closeUI();\n      }\n    });\n\n    dropdown.on("change:isOpen", () => form.element.reset());\n    dropdown.on("cancel", () => closeUI());\n\n    function closeUI() {\n      editor.editing.view.focus();\n      dropdown.isOpen = false;\n    }\n  }\n\n  _setUpForm(form, dropdown, command) {\n    form.delegate("submit", "cancel").to(dropdown);\n    form.saveButtonView.bind("isEnabled").to(command);\n  }\n}\n\nfunction getFormValidators(t) {\n  return [\n    (form) => {}/*{\n      if (!form.text.length) {\n        return t("The text must not be empty.");\n      }\n    },*/\n  ];\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./js/ckeditor5_plugins/websparkPlugin/src/lead/websparkleadui.js?')},"./js/ckeditor5_plugins/websparkPlugin/src/lead/websparkleadview.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WebsparkLeadFormView: () => (/* binding */ WebsparkLeadFormView)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/ui */ "ckeditor5/src/ui.js");\n/* harmony import */ var ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ckeditor5/src/utils */ "ckeditor5/src/utils.js");\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/utils */ "./js/ckeditor5_plugins/websparkPlugin/src/utils/utils.js");\n\n\n\n\n\n\nclass WebsparkLeadFormView extends ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.View {\n  DEFAULT_TEXT = "";\n\n  constructor(validators, locale) {\n    super(locale);\n\n    const t = locale.t;\n\n    this.focusTracker = new ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_2__.FocusTracker();\n    this.keystrokes = new ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_2__.KeystrokeHandler();\n\n    this.textInputView = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createTextArea)(t("Content"), locale);\n\n    this.saveButtonView = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createButton)(\n      t("Save"),\n      ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.icons.check,\n      "ck-button-save",\n      locale\n    );\n    this.saveButtonView.type = "submit";\n\n    this.cancelButtonView = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createButton)(\n      t("Cancel"),\n      ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.icons.cancel,\n      "ck-button-cancel",\n      locale\n    );\n\n    this.cancelButtonView.delegate("execute").to(this, "cancel");\n\n    this._focusables = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.ViewCollection();\n\n    this._focusCycler = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.FocusCycler({\n      focusables: this._focusables,\n      focusTracker: this.focusTracker,\n      keystrokeHandler: this.keystrokes,\n      actions: {\n        focusPrevious: "shift + tab",\n        focusNext: "tab",\n      },\n    });\n\n    this._validators = validators;\n\n    this.setTemplate({\n      tag: "form",\n      attributes: {\n        class: ["ck", "ck-webspark-form", "webspark-heading-dialog"],\n        tabindex: "-1",\n      },\n      children: [\n        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createRow)(this.textInputView),\n        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createContainer)(\n          [this.saveButtonView, this.cancelButtonView],\n          ["ck-webspark-form-buttons"]\n        ),\n      ],\n    });\n  }\n\n  render() {\n    super.render();\n\n    (0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.submitHandler)({\n      view: this,\n    });\n\n    // TODO: Check why focus isn\'t working for a custom view\n    const childViews = [\n      this.textInputView.children[1],\n      this.saveButtonView,\n      this.cancelButtonView,\n    ];\n\n    childViews.forEach((v) => {\n      // Register the view as focusable.\n      this._focusables.add(v);\n\n      // Register the view in the focus tracker.\n      this.focusTracker.add(v.element);\n    });\n\n    // Start listening for the keystrokes coming from #element.\n    this.keystrokes.listenTo(this.element);\n\n    const stopPropagation = (data) => data.stopPropagation();\n\n    // Since the form is in the dropdown panel which is a child of the toolbar, the toolbar\'s\n    // keystroke handler would take over the key management in the URL input. We need to prevent\n    // this ASAP. Otherwise, the basic caret movement using the arrow keys will be impossible.\n    this.keystrokes.set("arrowright", stopPropagation);\n    this.keystrokes.set("arrowleft", stopPropagation);\n    this.keystrokes.set("arrowup", stopPropagation);\n    this.keystrokes.set("arrowdown", stopPropagation);\n  }\n\n  destroy() {\n    super.destroy();\n\n    this.focusTracker.destroy();\n    this.keystrokes.destroy();\n  }\n\n  focus() {\n    this._focusCycler.focusFirst();\n  }\n\n  get text() {\n    return this.textInputView.children[1].element.value.trim();\n  }\n\n  set text(text) {\n    this.textInputView.children[1].element.value = text.trim();\n  }\n\n  setValues(values) {\n    this.text = values?.text || this.DEFAULT_TEXT;\n  }\n\n  isValid() {\n    return true;\n  }\n\n  resetFormStatus() {\n    this.textInputView.errorText = null;\n  }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./js/ckeditor5_plugins/websparkPlugin/src/lead/websparkleadview.js?')},"./js/ckeditor5_plugins/websparkPlugin/src/liststyle/insertliststylecommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ InsertWebsparkListStyleCommand)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/* harmony import */ var ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/utils */ "ckeditor5/src/utils.js");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ "./js/ckeditor5_plugins/websparkPlugin/src/liststyle/utils.js");\n/**\n * @file defines InsertWebsparkListStyleCommand.\n */\n\n\n\n\nclass InsertWebsparkListStyleCommand extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Command {\n  /**\n   * Executes an action on selected blocks in the editor.\n   *\n   * @param {Object} options - The options for executing the action.\n   * @param {string} options.styleClass - The CSS class to be applied to the selected blocks.\n   */\n  execute({ styleClass }) {\n    const model = this.editor.model;\n    const selection = model.document.selection;\n    const document = model.document;\n\n    let currentNode = (0,ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_1__.first)(\n      this.editor.model.document.selection.getSelectedBlocks()\n    );\n    const elementsBelow = [];\n    const listTypeClasses = this.editor.commands.get("bulletedListOld").value\n      ? (0,_utils__WEBPACK_IMPORTED_MODULE_2__._formatStyleBulletedClass)(styleClass)\n      : this.editor.commands.get("numberedListOld").value\n      ? (0,_utils__WEBPACK_IMPORTED_MODULE_2__._formatStyleNumberedClass)(styleClass)\n      : "";\n    model.change((writer) => {\n      (0,_utils__WEBPACK_IMPORTED_MODULE_2__._getSibling)(currentNode, elementsBelow, "backward");\n      (0,_utils__WEBPACK_IMPORTED_MODULE_2__._getSibling)(currentNode, elementsBelow, "forward");\n      elementsBelow.forEach((element) => {\n        if (element.getAttribute("listIndent") == 0) {\n          if (element.getAttribute("listType") === \'bulleted\') {\n            writer.setAttribute(\n              "htmlUlAttributes",\n              {classes: listTypeClasses},\n              element\n            );\n          } else if (element.getAttribute("listType") === \'numbered\') {\n            writer.setAttribute(\n              "htmlOlAttributes",\n              {classes: listTypeClasses},\n              element\n            );\n          }\n        }\n      });\n    });\n  }\n\n  /**\n   * Refreshes the state of the action.\n   * Updates the isEnabled property and captures attributes from sibling elements.\n   */\n  refresh() {\n    this.isEnabled = this._checkEnabled();\n    let currentNode = (0,ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_1__.first)(\n      this.editor.model.document.selection.getSelectedBlocks()\n    );\n\n    const elementsBelow = [];\n    (0,_utils__WEBPACK_IMPORTED_MODULE_2__._getSibling)(currentNode, elementsBelow, "backward");\n    (0,_utils__WEBPACK_IMPORTED_MODULE_2__._getSibling)(currentNode, elementsBelow, "forward");\n    elementsBelow.forEach((element) => {\n      this.value = Object.fromEntries(element.getAttributes());\n    });\n  }\n\n  /**\n   * Checks whether the command can be enabled in the current context.\n   *\n   * @returns Whether the command should be enabled.\n   */\n  _checkEnabled() {\n    const editor = this.editor;\n\n    const numberedListOld = editor.commands.get("numberedListOld");\n    const bulletedListOld = editor.commands.get("bulletedListOld");\n\n    return numberedListOld.isEnabled || bulletedListOld.isEnabled;\n  }\n\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./js/ckeditor5_plugins/websparkPlugin/src/liststyle/insertliststylecommand.js?')},"./js/ckeditor5_plugins/websparkPlugin/src/liststyle/utils.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _formatStyleBulletedClass: () => (/* binding */ _formatStyleBulletedClass),\n/* harmony export */   _formatStyleNumberedClass: () => (/* binding */ _formatStyleNumberedClass),\n/* harmony export */   _getBulletedPropertiesOptions: () => (/* binding */ _getBulletedPropertiesOptions),\n/* harmony export */   _getNumberedPropertiesOptions: () => (/* binding */ _getNumberedPropertiesOptions),\n/* harmony export */   _getSibling: () => (/* binding */ _getSibling),\n/* harmony export */   _initUdsListClass: () => (/* binding */ _initUdsListClass),\n/* harmony export */   _removeClassesFromString: () => (/* binding */ _removeClassesFromString),\n/* harmony export */   _removeKeyClass: () => (/* binding */ _removeKeyClass),\n/* harmony export */   _setUpClassSelect: () => (/* binding */ _setUpClassSelect),\n/* harmony export */   areArraysEqualIgnoringOrder: () => (/* binding */ areArraysEqualIgnoringOrder)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/utils */ "ckeditor5/src/utils.js");\n\n\n/**\n * Retrieves sibling elements in a specified direction within the same list type.\n *\n * @param {Element} currentNode - The current element to start from.\n * @param {Array} elementsBelow - An array to store the retrieved sibling elements.\n * @param {string} direction - The direction to search for siblings (\'forward\' or \'backward\').\n * @private\n */\nfunction _getSibling(currentNode, elementsBelow, direction) {\n  const listType = currentNode ? currentNode.getAttribute("listType") : "";\n  if (direction === "forward") {\n    while (currentNode && currentNode.getAttribute("listType") === listType) {\n      if (!elementsBelow.includes(currentNode)) {\n        elementsBelow.push(currentNode);\n      }\n      currentNode = currentNode.nextSibling;\n    }\n  } else {\n    while (currentNode && currentNode.getAttribute("listType") === listType) {\n      if (!elementsBelow.includes(currentNode)) {\n        elementsBelow.push(currentNode);\n      }\n      currentNode = currentNode.previousSibling;\n    }\n  }\n}\n\n/**\n * Initialize the UDS list class for selected blocks in the model.\n *\n * @param {Model} model - The model to operate on.\n */\nfunction _initUdsListClass(model) {\n  // Get the currently selected block\n  let currentNode = (0,ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_0__.first)(\n    model.document.selection.getSelectedBlocks()\n  );\n  const elementsBelow = [];\n  model.change((writer) => {\n    // Find and store sibling elements both backward and forward\n    _getSibling(currentNode, elementsBelow, "backward");\n    _getSibling(currentNode, elementsBelow, "forward");\n    // Set the \'uds-list\' class for each element below the current block\n    elementsBelow.forEach((element) => {\n      if (element.getAttribute("listType") === \'bulleted\') {\n        writer.setAttribute(\n          "htmlUlAttributes",\n          {classes: \'uds-list\'},\n          element\n        );\n      } else if (element.getAttribute("listType") === \'numbered\') {\n        writer.setAttribute(\n          "htmlOlAttributes",\n          {classes: \'uds-list\'},\n          element\n        );\n      }\n    });\n  });\n}\n\n\nfunction _setUpClassSelect(form, editor) {\n  // This const will store the list options. Depending on the\n  // list type(Bulleted or Numbered) it will display a set of data.\n  const listOptions = editor.commands.get("bulletedListOld").value\n    ? _getBulletedPropertiesOptions(editor.t)\n    : editor.commands.get("numberedListOld").value\n      ? _getNumberedPropertiesOptions(editor.t)\n      : "";\n\n  if (!listOptions) {\n    return;\n  }\n\n  let currentNode = (0,ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_0__.first)(\n    editor.model.document.selection.getSelectedBlocks()\n  );\n  const elementsBelow = [];\n  let currentClasses = [];\n  let listType = \'\';\n  _getSibling(currentNode, elementsBelow, "backward");\n  _getSibling(currentNode, elementsBelow, "forward");\n  elementsBelow.forEach((element) => {\n    if (element.getAttribute("listIndent") == 0) {\n      try {\n        if (element.getAttribute("listType") === \'bulleted\') {\n          currentClasses = element.getAttribute("htmlUlAttributes").classes\n          listType = element.getAttribute(\'listType\');\n        } else if (element.getAttribute("listType") === \'numbered\') {\n          currentClasses = element.getAttribute("htmlOlAttributes").classes\n          listType = element.getAttribute(\'listType\');\n        }\n      } catch (e) {\n      }\n    }\n  });\n\n  if (!Array.isArray(currentClasses)) {\n    currentClasses = currentClasses.split(\' \');\n  }\n\n  //remove current options\n  form.classSelect.children[1].element.options.length = 0;\n\n  listOptions.forEach((optionData) => {\n    const optionElement = document.createElement("option");\n    optionElement.value = optionData.value;\n    optionElement.text = optionData.title;\n\n    let classList = [];\n    if (listType === \'bulleted\') {\n      classList = _formatStyleBulletedClass(optionData.value).split(\' \');\n    } else {\n      classList = _formatStyleNumberedClass(optionData.value).split(\' \');\n    }\n\n    if (areArraysEqualIgnoringOrder(classList, currentClasses)) {\n      optionElement.defaultSelected = true;\n    }\n\n    form.classSelect.children[1].element.appendChild(optionElement);\n  });\n}\n\n/**\n * Checks if two arrays have the same elements, regardless of their order.\n * @param {Array} arr1 - The first array.\n * @param {Array} arr2 - The second array.\n * @returns {boolean} True if the arrays have the same elements, false otherwise.\n */\nfunction areArraysEqualIgnoringOrder(arr1, arr2) {\n  // Check if the length of both arrays is the same\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n\n  // Convert both arrays to sets for comparison\n  const set1 = new Set(arr1);\n  const set2 = new Set(arr2);\n\n  // Compare the sets\n  for (const elemento of set1) {\n    if (!set2.has(elemento)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Generate an array of objects with specified values and titles.\n * @param {function} t - Translation function to translate titles.\n * @returns {Array} An array of objects with \'value\' and \'title\' properties.\n */\nfunction _getBulletedPropertiesOptions(t) {\n  return [\n    {\n      value: "default-list",\n      title: t("Default"),\n    },\n    {\n      value: `maroon`,\n      title: t("Maroon"),\n    },\n    {\n      value: `light-smokemode`,\n      title: t("Gray 1"),\n    },\n    {\n      value: `smokemode`,\n      title: t("Gray 2"),\n    },\n    {\n      value: `darkmode`,\n      title: t("Gray 7"),\n    },\n    {\n      value: `darkmode-gold`,\n      title: t("Gray 7 Gold Bullet"),\n    },\n    {\n      value: `icn-default`,\n      title: t("Icon list"),\n    },\n    {\n      value: `icn-maroon`,\n      title: t("Icon list Maroon"),\n    },\n    {\n      value: `icn-darkmode`,\n      title: t("Icon list Gray 7"),\n    },\n    {\n      value: `icn-darkmode-gold`,\n      title: t("Icon list Gray 7 Gold"),\n    },\n  ];\n}\n\n/**\n * Formats the given style class to be used as a bulleted class.\n *\n * @param {string} styleClass - The style class to be formatted.\n * @return {string} The formatted bulleted class.\n */\nfunction _formatStyleBulletedClass(styleClass) {\n  // Get select value.\n  let bulletedClass = styleClass;\n\n  // Add class to be identified from.\n  let stclass = _removeKeyClass(styleClass);\n  // Add the class to be identified.\n  stclass = `wp-${styleClass}`;\n  // Use \'default-list\' if bulletedClass is empty\n  bulletedClass = bulletedClass || "default-list";\n\n  // If value starts with icn its a icon list.\n  if (bulletedClass.startsWith("icn")) {\n    stclass += " uds-list fa-ul";\n\n    switch (bulletedClass) {\n      case "icn-maroon":\n        stclass = _removeClassesFromString(stclass, [\n          "darkmode",\n          "gold",\n        ]);\n        stclass += " maroon";\n        break;\n      case "icn-darkmode":\n        stclass = _removeClassesFromString(stclass, ["gold", "maroon"]);\n        stclass += " darkmode";\n        break;\n      case "icn-darkmode-gold":\n        stclass = _removeClassesFromString(stclass, ["maroon"]);\n        stclass += " darkmode gold";\n        break;\n      // Add more cases if needed\n    }\n  } else {\n    // Remove step list elements.\n    stclass = _removeClassesFromString(stclass, ["fa-ul"]);\n    // Add class after removing existing class.\n    if (bulletedClass) {\n      // Ensure the step list class is not applied.\n      // Add remove classes as required.\n      const removeList = [\n        "default-list",\n        "maroon",\n        "light-smokemode",\n        "smokemode",\n        "darkmode",\n      ];\n\n      for (const removeClass of removeList) {\n        if (stclass.includes(removeClass) && bulletedClass !== removeClass) {\n          stclass = stclass.replace(removeClass, "");\n        }\n      }\n\n      if (\n        stclass.includes("darkmode") &&\n        stclass.includes("gold") &&\n        bulletedClass != "darkmode-gold"\n      ) {\n        stclass = _removeClassesFromString(stclass, [\n          "darkmode",\n          "gold",\n        ]);\n      }\n\n      stclass +=\n        bulletedClass === "darkmode-gold"\n          ? " darkmode gold"\n          : " " + bulletedClass;\n    }\n    // Apply uds-list class if element does not have it.\n    if (!stclass.includes("uds-list")) {\n      stclass += " uds-list";\n    }\n  }\n  return stclass;\n}\n\n/**\n * Generate an array of objects with specified values and titles.\n * @param {function} t - Translation function to translate titles.\n * @returns {Array} An array of objects with \'value\' and \'title\' properties.\n */\nfunction _getNumberedPropertiesOptions(t) {\n  return [\n    {\n      value: "default-list",\n      title: t("Default"),\n    },\n    {\n      value: "maroon",\n      title: t("Maroon"),\n    },\n    {\n      value: "light-smokemode",\n      title: t("Gray 1"),\n    },\n    {\n      value: "smokemode",\n      title: t("Gray 2"),\n    },\n    {\n      value: "darkmode",\n      title: t("Gray 7"),\n    },\n    {\n      value: "darkmode-gold",\n      title: t("Gray 7 Gold"),\n    },\n    {\n      value: "stp-default",\n      title: t("Step List Default"),\n    },\n    {\n      value: "stp-gold-counter",\n      title: t("Step List Gold Counter"),\n    },\n    {\n      value: "stp-maroon-counter",\n      title: t("Step List Maroon Counter"),\n    },\n    {\n      value: "stp-smokemode",\n      title: t("Step List Gray 2"),\n    },\n    {\n      value: "stp-smokemode-gold",\n      title: t("Step List Gray 2 Gold Counter"),\n    },\n    {\n      value: "stp-smokemode-maroon",\n      title: t("Step List Gray 2 Maroon Counter"),\n    },\n    {\n      value: "stp-lightsmokemode",\n      title: t("Step List Gray 1"),\n    },\n    {\n      value: "stp-lightsmokemode-gold",\n      title: t("Step List Gray 1 Gold Counter"),\n    },\n    {\n      value: "stp-lightsmokemode-maroon",\n      title: t("Step List Gray 1 Maroon Counter"),\n    },\n    {\n      value: "stp-darkmode",\n      title: t("Step List Gray 7"),\n    },\n    {\n      value: "stp-darkmode-gold",\n      title: t("Step List Gray 7 Gold Counter"),\n    },\n  ];\n}\n\n/**\n * Formats the style number class.\n *\n * @param {string} styleClass - The style class to format.\n * @return {string} The formatted style number class.\n */\nfunction _formatStyleNumberedClass(styleClass) {\n  // Get select value.\n  let numberedClass = styleClass;\n  // Use \'default-list\' if numberedClass is empty\n  numberedClass = numberedClass || "default-list";\n  // Add class to be identified from.\n  let stclass = _removeKeyClass(styleClass);\n\n  // Add the class to be identified.\n  stclass = `wp-${styleClass}`;\n\n  // If value starts with stp its a step value.\n  if (numberedClass.startsWith("stp")) {\n    stclass += " uds-list uds-steplist";\n\n    // Remove NLR clases.\n    if (numberedClass === "stp-default") {\n      // Remove NLR classes.\n      stclass = _removeClassesFromString(stclass, [\n        "uds-steplist-gold",\n        "uds-steplist-maroon",\n        "smokemode",\n        "light-smokemode",\n        "darkmode",\n        "maroon",\n      ]);\n    }\n    // Default gold.\n    if (numberedClass === "stp-gold-counter") {\n      // Remove NLR classes.\n      stclass = _removeClassesFromString(stclass, [\n        "uds-steplist-maroon",\n        "smokemode",\n        "light-smokemode",\n        "darkmode",\n      ]);\n\n      // Add classes.\n      stclass += " uds-steplist-gold";\n    }\n    // Default maroon.\n    if (numberedClass === "stp-maroon-counter") {\n      // Remove NLR classes.\n      stclass = _removeClassesFromString(stclass, [\n        "uds-steplist-gold",\n        "smokemode",\n        "light-smokemode",\n        "darkmode",\n      ]);\n\n      // Add classes.\n      stclass += " uds-steplist-maroon";\n    }\n    // Smoke mode.\n    if (numberedClass === "stp-smokemode") {\n      // Remove NLR classes.\n      stclass = _removeClassesFromString(stclass, [\n        "uds-steplist-gold",\n        "uds-steplist-maroon",\n        "light-smokemode",\n        "darkmode",\n      ]);\n\n      // Add classes.\n      stclass += " smokemode";\n    }\n    // Smoke mode gold.\n    if (numberedClass === "stp-smokemode-gold") {\n      // Remove NLR classes.\n      stclass = _removeClassesFromString(stclass, [\n        "uds-steplist-maroon",\n        "light-smokemode",\n        "darkmode",\n      ]);\n\n      // Add classes.\n      stclass += " smokemode uds-steplist-gold";\n    }\n    // Smoke mode maroon.\n    if (numberedClass === "stp-smokemode-maroon") {\n      // Remove NLR classes.\n      stclass = _removeClassesFromString(stclass, [\n        "uds-steplist-maroon",\n        "light-smokemode",\n        "darkmode",\n      ]);\n\n      // Add classes.\n      stclass += " smokemode uds-steplist-maroon";\n    }\n    // Light Smoke mode.\n    if (numberedClass === "stp-lightsmokemode") {\n      // Remove NLR classes.\n      stclass = _removeClassesFromString(stclass, [\n        "uds-steplist-gold",\n        "uds-steplist-maroon",\n        "smokemode",\n        "darkmode",\n      ]);\n\n      // Add classes.\n      stclass += " light-smokemode";\n    }\n    // Light Smoke mode gold.\n    if (numberedClass === "stp-lightsmokemode-gold") {\n      // Remove NLR classes.\n      stclass = _removeClassesFromString(stclass, [\n        "uds-steplist-maroon",\n        "smokemode",\n        "darkmode",\n      ]);\n\n      // Add classes.\n      stclass += " light-smokemode uds-steplist-gold";\n    }\n    // Light Smoke mode maroon.\n    if (numberedClass === "stp-lightsmokemode-maroon") {\n      // Remove NLR classes.\n      stclass = _removeClassesFromString(stclass, [\n        "uds-steplist-gold",\n        "smokemode",\n        "darkmode",\n      ]);\n      // Add classes.\n      stclass += " light-smokemode uds-steplist-maroon";\n    }\n    // Darkmode.\n    if (numberedClass === "stp-darkmode") {\n      // Remove NLR classes.\n      stclass = _removeClassesFromString(stclass, [\n        "uds-steplist-gold",\n        "uds-steplist-maroon",\n        "light-smokemode",\n        "darkmode",\n      ]);\n      // Add classes.\n      stclass += " darkmode";\n    }\n    // Darkmode gold.\n    if (numberedClass === "stp-darkmode-gold") {\n      // Remove NLR classes.\n      stclass = _removeClassesFromString(stclass, [\n        "uds-steplist-maroon",\n        "smokemode",\n        "light-smokemode",\n      ]);\n      // Add classes.\n      stclass += " darkmode uds-steplist-gold";\n    }\n  } else {\n    // Remove step list elements.\n    stclass = _removeClassesFromString(stclass, [\n      "uds-steplist",\n      "uds-steplist-maroon",\n      "uds-steplist-gold",\n    ]);\n    // Add class after removing existing class.\n    if (numberedClass) {\n      // Ensure the step list class is not applied.\n      // Add remove classes as required.\n      const removeList = [\n        "default-list",\n        "maroon",\n        "light-smokemode",\n        "smokemode",\n        "darkmode",\n      ];\n\n      for (const removeClass of removeList) {\n        if (stclass.includes(removeClass) && numberedClass !== removeClass) {\n          stclass = stclass.replace(removeClass, "");\n        }\n      }\n      if (\n        stclass.includes("darkmode") &&\n        stclass.includes("gold") &&\n        numberedClass != "darkmode-gold"\n      ) {\n        // element.removeClass("darkmode");\n        //element.removeClass("gold");\n        stclass = _removeClassesFromString(stclass, [\n          "darkmode",\n          "gold",\n        ]);\n      }\n      if (numberedClass === "darkmode-gold") {\n        stclass += " darkmode gold";\n      } else {\n        stclass += " " + numberedClass;\n      }\n    }\n    // Apply uds-list class if element does not have it.\n    if (!stclass.includes("uds-list")) {\n      stclass += " uds-list";\n    }\n  }\n  return stclass;\n}\n\n/**\n * Removes specified classes from a string.\n *\n * @param {string} element - The input string from which to remove classes.\n * @param {Array} classesToRemove - An array of classes to be removed.\n * @return {string} - The modified string with classes removed.\n */\nfunction _removeClassesFromString(element, classesToRemove) {\n  let result = element;\n  for (const classToRemove of classesToRemove) {\n    const pattern = new RegExp(classToRemove, "g");\n    result = element.replace(pattern, "");\n  }\n  return result;\n}\n\n/**\n * Remove all words starting with "wp-" from the given element.\n *\n * @param {string} element - The element to remove words from.\n * @return {string} The modified element with words removed.\n */\nfunction _removeKeyClass(element) {\n  // Define a regular expression pattern to match words starting with "wp-"\n  let pattern = /\\bwp-\\w+\\b/g;\n  // Use the replace method to remove all words that match the pattern\n  return element ? element.replace(pattern, "") : "";\n}\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./js/ckeditor5_plugins/websparkPlugin/src/liststyle/utils.js?')},"./js/ckeditor5_plugins/websparkPlugin/src/liststyle/websparkliststyle.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ WebsparkListStyle)\n/* harmony export */ });\n/* harmony import */ var _websparkliststyleediting__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./websparkliststyleediting */ "./js/ckeditor5_plugins/websparkPlugin/src/liststyle/websparkliststyleediting.js");\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/* harmony import */ var _websparkliststyleui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./websparkliststyleui */ "./js/ckeditor5_plugins/websparkPlugin/src/liststyle/websparkliststyleui.js");\n/**\n * @file This is what CKEditor refers to as a master (glue) plugin. Its role is\n * just to load the “editing” and “UI” components of this Plugin. Those\n * components could be included in this file, but\n *\n * I.e, this file\'s purpose is to integrate all the separate parts of the plugin\n * before it\'s made discoverable via index.js.\n */\n\n\n\n\n\nclass WebsparkListStyle extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_1__.Plugin {\n    static get requires() {\n        return [_websparkliststyleediting__WEBPACK_IMPORTED_MODULE_0__["default"], _websparkliststyleui__WEBPACK_IMPORTED_MODULE_2__["default"]];\n    }\n}\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./js/ckeditor5_plugins/websparkPlugin/src/liststyle/websparkliststyle.js?')},"./js/ckeditor5_plugins/websparkPlugin/src/liststyle/websparkliststyleediting.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ WebsparkListStyleEditing)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/ui */ "ckeditor5/src/ui.js");\n/* harmony import */ var _insertliststylecommand__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./insertliststylecommand */ "./js/ckeditor5_plugins/websparkPlugin/src/liststyle/insertliststylecommand.js");\n/* harmony import */ var ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ckeditor5/src/widget */ "ckeditor5/src/widget.js");\n/* harmony import */ var ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ckeditor5/src/utils */ "ckeditor5/src/utils.js");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils */ "./js/ckeditor5_plugins/websparkPlugin/src/liststyle/utils.js");\n/**\n * @file This is what CKEditor refers to as a master (glue) plugin. Its role is\n * just to load the “editing” and “UI” components of this Plugin. Those\n * components could be included in this file, but\n *\n * I.e, this file\'s purpose is to integrate all the separate parts of the plugin\n * before it\'s made discoverable via index.js.\n */\n\n\n\n\n\n\n\n//\nclass WebsparkListStyleEditing extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n\n  static get requires() {\n    return [\n      ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_3__.Widget,\n      ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.ContextualBalloon,\n    ];\n  }\n\n  /**\n   * @inheritdoc\n   */\n  static get pluginName() {\n    return \'WebsparkListStyleEditing\';\n  }\n\n  constructor(editor) {\n    super(editor);\n  }\n\n  init() {\n    const editor = this.editor;\n    const {model} = this.editor;\n    editor.commands.add(\n      "insertliststyle",\n      new _insertliststylecommand__WEBPACK_IMPORTED_MODULE_2__["default"](editor)\n    );\n\n    editor.commands.add(\n      "bulletedListOld",\n      editor.commands.get(\'bulletedList\')\n    );\n    const customBulletedListCommand = {\n      execute: function (value) {\n        // Call the original bulletedList command.\n        editor.execute(\'bulletedListOld\', value);\n        (0,_utils__WEBPACK_IMPORTED_MODULE_5__._initUdsListClass)(model);\n      }\n    };\n    // Register custom commands.\n    editor.commands.add(\'bulletedList\', customBulletedListCommand);\n    editor.commands.get(\'bulletedList\').isEnabled = true;\n\n    editor.commands.add(\n      "numberedListOld",\n      editor.commands.get(\'numberedList\')\n    );\n    const customNumberedListCommand = {\n      execute: function (value) {\n        // Call the original numberedList command.\n        editor.execute(\'numberedListOld\', value);\n        (0,_utils__WEBPACK_IMPORTED_MODULE_5__._initUdsListClass)(model);\n      }\n    };\n    // Register custom commands.\n    editor.commands.add(\'numberedList\', customNumberedListCommand);\n    editor.commands.get(\'numberedList\').isEnabled = true;\n  }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./js/ckeditor5_plugins/websparkPlugin/src/liststyle/websparkliststyleediting.js?')},"./js/ckeditor5_plugins/websparkPlugin/src/liststyle/websparkliststyleui.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ WebsparkListStyleUI)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/ui */ "ckeditor5/src/ui.js");\n/* harmony import */ var _websparklistsyleview__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./websparklistsyleview */ "./js/ckeditor5_plugins/websparkPlugin/src/liststyle/websparklistsyleview.js");\n/* harmony import */ var _icons_websparkListStyle_svg__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../icons/websparkListStyle.svg */ "./icons/websparkListStyle.svg");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils */ "./js/ckeditor5_plugins/websparkPlugin/src/liststyle/utils.js");\n\n\n\n\n\n\nclass WebsparkListStyleUI extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n  static get requires() {\n    return [ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.ContextualBalloon];\n  }\n\n  /**\n   * Initializes the WebsparkListStyleUI plugin.\n   * This function sets up the user interface elements and interactions.\n   */\n  init() {\n    const editor = this.editor;\n    const command = editor.commands.get("insertliststyle");\n\n    this.form = new _websparklistsyleview__WEBPACK_IMPORTED_MODULE_2__.WebsparkListStyleFormView(\n      getFormValidators(this.editor.t),\n      this.editor.locale,\n      command\n    );\n\n    const viewDocument = this.editor.editing.view.document;\n    this.listenTo(viewDocument, "click", () => {\n      (0,_utils__WEBPACK_IMPORTED_MODULE_4__._setUpClassSelect)(this.form, this.editor);\n    });\n\n    this.listenTo(viewDocument, "change", () => {\n      (0,_utils__WEBPACK_IMPORTED_MODULE_4__._setUpClassSelect)(this.form, this.editor);\n    });\n\n    editor.ui.componentFactory.add("websparkListStyle", () => {\n      const dropdown = (0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.createDropdown)(editor.locale);\n      this._setUpDropdown(dropdown, this.form);\n      this._setUpForm(this.form, dropdown, command);\n\n      const command1 = this.editor.commands.get("bulletedListOld");\n      const command2 = this.editor.commands.get("numberedListOld");\n      dropdown.bind( \'isEnabled\' ).toMany( [command1, command2], \'value\', value => {\n        return command1.value || command2.value;\n      } );\n\n      return dropdown;\n    });\n  }\n\n  /**\n   * Recursively find the parent \'ul\' element of the given element.\n   *\n   * @param {Element} element - The current element to start the search from.\n   * @returns {Element|null} The \'ul\' element found in the hierarchy, or null if not found.\n   * @private\n   */\n  _findUlParent(element) {\n    if (!element || !element.parent) {\n      return null;\n    }\n    if (element.name === "ul") {\n      return element;\n    }\n    return this._findUlParent(element.parent);\n  }\n\n  /**\n   * Set up the dropdown with the form, command, and balloon.\n   *\n   * @param {Dropdown} dropdown - The dropdown instance to set up.\n   * @param {WebsparkListStyleFormView} form - The form instance to include in the dropdown.\n   * @param {Command} command - The CKEditor command associated with list style insertion.\n   * @param {ContextualBalloon} balloon - The ContextualBalloon instance to interact with.\n   * @private\n   */\n  _setUpDropdown(dropdown, form) {\n    const editor = this.editor;\n    const t = editor.t;\n    const button = dropdown.buttonView;\n\n    dropdown.panelView.children.add(form);\n\n    button.set({\n      label: t("List Properties"),\n      icon: _icons_websparkListStyle_svg__WEBPACK_IMPORTED_MODULE_3__["default"],\n      tooltip: true,\n    });\n\n    button.on(\n      "open",\n      () => {\n        try {\n          if(form.classselect) {\n            form.classselect.children[1].select();\n          }\n        } catch (e) {}\n\n        form.focus();\n      },\n      {priority: "low"}\n    );\n\n    dropdown.on("submit", () => {\n      editor.execute("insertliststyle", {\n        styleClass: form.classselect,\n      });\n      closeUI();\n    });\n\n    dropdown.on("change:isOpen", () => form.element.reset());\n    dropdown.on("cancel", () => closeUI());\n\n    function closeUI() {\n      editor.editing.view.focus();\n      dropdown.isOpen = false;\n    }\n  }\n\n  /**\n   * Set up the form\'s interaction with the dropdown and command.\n   *\n   * @param {WebsparkListStyleFormView} form - The form instance to set up.\n   * @param {Dropdown} dropdown - The dropdown instance associated with the form.\n   * @param {Command} command - The CKEditor command associated with list style insertion.\n   * @private\n   */\n  _setUpForm(form, dropdown, command) {\n    form.delegate("submit", "cancel").to(dropdown);\n    form.saveButtonView.bind("isEnabled").to(command);\n  }\n}\n\nfunction getFormValidators(t) {\n  return [];\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./js/ckeditor5_plugins/websparkPlugin/src/liststyle/websparkliststyleui.js?')},"./js/ckeditor5_plugins/websparkPlugin/src/liststyle/websparklistsyleview.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WebsparkListStyleFormView: () => (/* binding */ WebsparkListStyleFormView)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/ui */ "ckeditor5/src/ui.js");\n/* harmony import */ var ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ckeditor5/src/utils */ "ckeditor5/src/utils.js");\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/utils */ "./js/ckeditor5_plugins/websparkPlugin/src/utils/utils.js");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils */ "./js/ckeditor5_plugins/websparkPlugin/src/liststyle/utils.js");\n\n\n\n\n\n\n\nclass WebsparkListStyleFormView extends ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.View {\n  constructor(validators, locale) {\n    super(locale);\n\n    const t = locale.t;\n\n    this.focusTracker = new ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_2__.FocusTracker();\n    this.keystrokes = new ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_2__.KeystrokeHandler();\n\n    this.classSelect = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createSelect)(\n      t("List properties"),\n      (0,_utils__WEBPACK_IMPORTED_MODULE_4__._getBulletedPropertiesOptions)(t),\n      locale\n    );\n\n    this.saveButtonView = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createButton)(\n      t("Save"),\n      ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.icons.check,\n      "ck-button-save",\n      locale\n    );\n    this.saveButtonView.type = "submit";\n\n    this.cancelButtonView = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createButton)(\n      t("Cancel"),\n      ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.icons.cancel,\n      "ck-button-cancel",\n      locale\n    );\n\n    this.cancelButtonView.delegate("execute").to(this, "cancel");\n\n    this._focusables = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.ViewCollection();\n\n    this._focusCycler = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.FocusCycler({\n      focusables: this._focusables,\n      focusTracker: this.focusTracker,\n      keystrokeHandler: this.keystrokes,\n      actions: {\n        focusPrevious: "shift + tab",\n        focusNext: "tab",\n      },\n    });\n\n    this.setTemplate({\n      tag: "form",\n      attributes: {\n        class: ["ck", "ck-webspark-form", "webspark-liststyle-dialog"],\n        tabindex: "-1",\n      },\n      children: [\n        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createRow)(this.classSelect),\n        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createContainer)(\n          [this.saveButtonView, this.cancelButtonView],\n          ["ck-webspark-form-buttons"]\n        ),\n      ],\n    });\n  }\n\n  render() {\n    super.render();\n\n    (0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.submitHandler)({\n      view: this,\n    });\n\n    // TODO: Check why focus isn\'t working for a custom view\n    const childViews = [\n      this.classSelect.children[1],\n\n      this.saveButtonView,\n      this.cancelButtonView,\n    ];\n\n    childViews.forEach((v) => {\n      // Register the view as focusable.\n      this._focusables.add(v);\n\n      // Register the view in the focus tracker.\n      this.focusTracker.add(v.element);\n    });\n\n    // Start listening for the keystrokes coming from #element.\n    this.keystrokes.listenTo(this.element);\n\n    const stopPropagation = (data) => data.stopPropagation();\n\n    // Since the form is in the dropdown panel which is a child of the toolbar, the toolbar\'s\n    // keystroke handler would take over the key management in the URL input. We need to prevent\n    // this ASAP. Otherwise, the basic caret movement using the arrow keys will be impossible.\n    this.keystrokes.set("arrowright", stopPropagation);\n    this.keystrokes.set("arrowleft", stopPropagation);\n    this.keystrokes.set("arrowup", stopPropagation);\n    this.keystrokes.set("arrowdown", stopPropagation);\n  }\n\n  destroy() {\n    super.destroy();\n\n    this.focusTracker.destroy();\n    this.keystrokes.destroy();\n  }\n\n  focus() {\n    this._focusCycler.focusFirst();\n  }\n\n  get classselect() {\n    return this.classSelect.children[1].value;\n  }\n\n  set classselect(classselect) {\n    this.classSelect.children[1].value = classselect;\n  }\n\n  setValues(values) {\n    this.classselect = values?.classselect;\n  }\n\n  isValid() {\n    return true;\n  }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./js/ckeditor5_plugins/websparkPlugin/src/liststyle/websparklistsyleview.js?')},"./js/ckeditor5_plugins/websparkPlugin/src/mediaalter/websparkmediaalter.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ WebsparkMediaAlter)\n/* harmony export */ });\n/* harmony import */ var _websparkmediaalterediting__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./websparkmediaalterediting */ "./js/ckeditor5_plugins/websparkPlugin/src/mediaalter/websparkmediaalterediting.js");\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/**\n * @file This is what CKEditor refers to as a master (glue) plugin. Its role is\n * just to load the “editing” and “UI” components of this Plugin. Those\n * components could be included in this file, but\n *\n * I.e, this file\'s purpose is to integrate all the separate parts of the plugin\n * before it\'s made discoverable via index.js.\n */\n\n\n\n\nclass WebsparkMediaAlter extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_1__.Plugin {\n  static get requires() {\n    return [_websparkmediaalterediting__WEBPACK_IMPORTED_MODULE_0__["default"]];\n  }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./js/ckeditor5_plugins/websparkPlugin/src/mediaalter/websparkmediaalter.js?')},"./js/ckeditor5_plugins/websparkPlugin/src/mediaalter/websparkmediaaltercommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ WebsparkMediaAlterCommand)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/**\n * @file This is what CKEditor refers to as a master (glue) plugin. Its role is\n * just to load the “editing” and “UI” components of this Plugin. Those\n * components could be included in this file, but\n *\n * I.e, this file\'s purpose is to integrate all the separate parts of the plugin\n * before it\'s made discoverable via index.js.\n */\n\n\nclass WebsparkMediaAlterCommand extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Command {\n  /**\n     * The command value: `false` if there is no `alt` attribute, otherwise the value of the `alt` attribute.\n     /**\n     * @inheritdoc\n     */\n  refresh() {\n    const selection = this.editor.model.document.selection;\n    const drupalMediaElement =\n      this._getClosestSelectedDrupalMediaElement(selection);\n\n    this.isEnabled =\n      !!drupalMediaElement &&\n      drupalMediaElement.getAttribute("drupalMediaEntityType") &&\n      drupalMediaElement.getAttribute("drupalMediaEntityType") === "media" &&\n      drupalMediaElement.getAttribute("drupalMediaEntityType") !==\n        "METADATA_ERROR" &&\n      drupalMediaElement.getAttribute("drupalMediaType") === "remote_video";\n    if (this.isEnabled) {\n      this.editor.execute("addInlineStyle", "w100");\n    }\n  }\n\n  /**\n   * Executes the command.\n   *\n   * @param {Object} options\n   *   An options object.\n   * @param {String} options The new value of the `dataInlineStyle` attribute to set.\n   */\n  execute(options) {\n    const { model } = this.editor;\n    const drupalMediaElement = this._getClosestSelectedDrupalMediaElement(\n      model.document.selection\n    );\n    model.change((writer) => {\n      writer.setAttribute("dataInlineStyle", options, drupalMediaElement);\n    });\n  }\n\n  /**\n   * Returns the closest selected Drupal media element.\n   *\n   * @param {Selection} selection - The selection object.\n   * @return {Element} The closest selected Drupal media element.\n   */\n  _getClosestSelectedDrupalMediaElement(selection) {\n    const selectedElement = selection.getSelectedElement();\n    return this._isDrupalMedia(selectedElement)\n      ? selectedElement\n      : selection.getFirstPosition().findAncestor("drupalMedia");\n  }\n\n  /**\n   * Checks if the given model element is a Drupal media element.\n   *\n   * @param {type} modelElement - The model element to check.\n   * @return {boolean} Returns true if the model element is a Drupal media element, otherwise returns false.\n   */\n  _isDrupalMedia(modelElement) {\n    return !!modelElement && modelElement.is("element", "drupalMedia");\n  }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./js/ckeditor5_plugins/websparkPlugin/src/mediaalter/websparkmediaaltercommand.js?')},"./js/ckeditor5_plugins/websparkPlugin/src/mediaalter/websparkmediaalterediting.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ WebsparkMediaAlterEditing)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var _websparkmediaaltercommand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./websparkmediaaltercommand */ \"./js/ckeditor5_plugins/websparkPlugin/src/mediaalter/websparkmediaaltercommand.js\");\n/**\n * @file This is what CKEditor refers to as a master (glue) plugin. Its role is\n * just to load the “editing” and “UI” components of this Plugin. Those\n * components could be included in this file, but\n *\n * I.e, this file's purpose is to integrate all the separate parts of the plugin\n * before it's made discoverable via index.js.\n */\n\n\n\n\nclass WebsparkMediaAlterEditing extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n\n    /**\n     * @inheritdoc\n     */\n    static get pluginName() {\n        return 'WebsparkMediaAlterEditing';\n    }\n\n    constructor(editor) {\n        super(editor);\n\n        this.attrs = {\n            dataInlineStyle: 'data-inline-style',\n        };\n        this.converterAttributes = [\n            'dataInlineStyle',\n        ];\n    }\n\n    init() {\n        const schema = this.editor.model.schema;\n        const conversion = this.editor.conversion;\n\n        if (schema.isRegistered('drupalMedia')) {\n            schema.extend('drupalMedia', {\n                allowAttributes: ['dataInlineStyle']\n            });\n        }\n\n        // Set attributeToAttribute conversion for all supported attributes.\n        Object.keys(this.attrs).forEach((modelKey) => {\n            const attributeMapping = {\n                model: {\n                    key: modelKey,\n                    name: 'drupalMedia',\n                },\n                view: {\n                    key: 'style',\n                    value: {\n                        width: '100%',\n                        'max-width': '100%'\n                    }\n                },\n            };\n            conversion.for('upcast').attributeToAttribute(attributeMapping);\n            conversion.for('downcast').attributeToAttribute(attributeMapping);\n        });\n        this.editor.commands.add(\n            'addInlineStyle', new _websparkmediaaltercommand__WEBPACK_IMPORTED_MODULE_1__[\"default\"]( this.editor )\n        );\n\n    }\n\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./js/ckeditor5_plugins/websparkPlugin/src/mediaalter/websparkmediaalterediting.js?")},"./js/ckeditor5_plugins/websparkPlugin/src/quote/insertwebsparkblockquotecommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ InsertWebsparkBlockquoteCommand)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/**\n * @file defines InsertWebsparkBlockquoteCommand, which is executed when the websparkBlockquote\n * form is submitted.\n */\n\n\nclass InsertWebsparkBlockquoteCommand extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Command {\n  execute({ text, citationName, citationDescription }) {\n    const { model } = this.editor;\n    model.change((writer) => {\n      const websparkBlockquote = writer.createElement("websparkBlockquote");\n      const websparkBlockQuoteSvg = writer.createElement(\n        "websparkBlockQuoteSvg"\n      );\n      const websparkBlockQuoteContainer = writer.createElement(\n        "websparkBlockQuoteContainer"\n      );\n      const websparkBlockquoteParagraph = writer.createElement(\n        "websparkBlockquoteParagraph"\n      );\n      const websparkBlockquoteCitation = writer.createElement(\n        "websparkBlockquoteCitation"\n      );\n      const websparkBlockquoteCitationName = writer.createElement(\n        "websparkBlockquoteCitationName"\n      );\n      const websparkBlockquoteCitationDescription = writer.createElement(\n        "websparkBlockquoteCitationDescription"\n      );\n\n      const textNode = writer.createText(text);\n      writer.append(textNode, websparkBlockquoteParagraph);\n\n      if (citationName.length > 0) {\n        const textNodeCitationName = writer.createText(citationName);\n        writer.append(textNodeCitationName, websparkBlockquoteCitationName);\n        writer.append(\n          websparkBlockquoteCitationName,\n          websparkBlockquoteCitation\n        );\n      }\n      if (citationDescription.length > 0) {\n        const textNodeDescription = writer.createText(citationDescription);\n        writer.append(\n          textNodeDescription,\n          websparkBlockquoteCitationDescription\n        );\n        writer.append(\n          websparkBlockquoteCitationDescription,\n          websparkBlockquoteCitation\n        );\n      }\n\n      writer.append(websparkBlockQuoteSvg, websparkBlockquote);\n      writer.append(websparkBlockquoteParagraph, websparkBlockQuoteContainer);\n      writer.append(websparkBlockquoteCitation, websparkBlockQuoteContainer);\n      writer.append(websparkBlockQuoteContainer, websparkBlockquote);\n      model.insertContent(websparkBlockquote);\n    });\n  }\n\n  refresh() {\n    const { model } = this.editor;\n    const { selection } = model.document;\n\n    // Determine if the cursor (selection) is in a position where adding a\n    // websparkBlockquote is permitted. This is based on the schema of the model(s)\n    // currently containing the cursor.\n    const allowedIn = model.schema.findAllowedParent(\n      selection.getFirstPosition(),\n      "websparkBlockquote"\n    );\n\n    // If the cursor is not in a location where a websparkBlockQuote can be added, return\n    // null so the addition doesn\'t happen.\n    this.isEnabled = allowedIn !== null;\n\n    const selectedElement = selection.getSelectedElement();\n\n    if (selectedElement?.name === "websparkBlockquote") {\n      const text = selectedElement?.getChild(0)?.getChild(0)?._data;\n\n      model.change((writer) => {\n        writer.setAttribute("text", text, selectedElement);\n      });\n\n      this.value = Object.fromEntries(selectedElement.getAttributes());\n    } else {\n      this.value = null;\n    }\n  }\n  _defaultSvgPath() {\n    return "M113.61,245.82H0V164.56q0-49.34,8.69-77.83T40.84,35.58Q64.29,12.95,100.67,0l22.24,46.9q-34,11.33-48.72,31.54T58.63,132.21h55Zm180,0H180V164.56q0-49.74,8.7-78T221,35.58Q244.65,12.95,280.63,0l22.24,46.9q-34,11.33-48.72,31.54t-15.57,53.77h55Z";\n  }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./js/ckeditor5_plugins/websparkPlugin/src/quote/insertwebsparkblockquotecommand.js?')},"./js/ckeditor5_plugins/websparkPlugin/src/quote/websparkblockquote.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ WebsparkBlockquote)\n/* harmony export */ });\n/* harmony import */ var _websparkblockquoteediting__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./websparkblockquoteediting */ "./js/ckeditor5_plugins/websparkPlugin/src/quote/websparkblockquoteediting.js");\n/* harmony import */ var _websparkblockquoteui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./websparkblockquoteui */ "./js/ckeditor5_plugins/websparkPlugin/src/quote/websparkblockquoteui.js");\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/**\n * @file This is what CKEditor refers to as a master (glue) plugin. Its role is\n * just to load the “editing” and “UI” components of this Plugin. Those\n * components could be included in this file, but\n *\n * I.e, this file\'s purpose is to integrate all the separate parts of the plugin\n * before it\'s made discoverable via index.js.\n */\n\n\n\n\n\nclass WebsparkBlockquote extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__.Plugin {\n  static get requires() {\n    return [_websparkblockquoteediting__WEBPACK_IMPORTED_MODULE_0__["default"], _websparkblockquoteui__WEBPACK_IMPORTED_MODULE_1__["default"]];\n  }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./js/ckeditor5_plugins/websparkPlugin/src/quote/websparkblockquote.js?')},"./js/ckeditor5_plugins/websparkPlugin/src/quote/websparkblockquoteediting.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ WebsparkBlockquoteEditing)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/* harmony import */ var ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/widget */ "ckeditor5/src/widget.js");\n/* harmony import */ var _insertwebsparkblockquotecommand__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./insertwebsparkblockquotecommand */ "./js/ckeditor5_plugins/websparkPlugin/src/quote/insertwebsparkblockquotecommand.js");\n\n\n\n\n/**\n * CKEditor 5 plugins do not work directly with the DOM. They are defined as\n * plugin-specific data models that are then converted to markup that\n * is inserted in the DOM.\n *\n * CKEditor 5 internally interacts with websparkBlockquote as this model:\n * <websparkBlockquote>\n *    <websparkBlockquoteText></websparkBlockquoteText>\n * </websparkBlockquote>\n *\n * Which is converted for the browser/user as this markup\n * <a class="btn">\n *   <path class="text"></path>\n * </a>\n *\n * This file has the logic for defining the websparkBlockquote model, and for how it is\n * converted to standard DOM markup.\n */\nclass WebsparkBlockquoteEditing extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n  static get requires() {\n    return [ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.Widget];\n  }\n\n  init() {\n    this._defineSchema();\n    this._defineConverters();\n    this.editor.commands.add(\n      "insertWebsparkBlockquote",\n      new _insertwebsparkblockquotecommand__WEBPACK_IMPORTED_MODULE_2__["default"](this.editor)\n    );\n  }\n\n  /*\n   * This registers the structure that will be seen by CKEditor 5 as\n   * <websparkBlockquote>\n   *    <websparkBlockquoteText></websparkBlockquoteText>\n   * </websparkBlockquote>\n   *\n   * The logic in _defineConverters() will determine how this is converted to\n   * markup.\n   */\n  _defineSchema() {\n    // Schemas are registered via the central `editor` object.\n    const schema = this.editor.model.schema;\n\n    schema.register("websparkBlockquote", {\n      isObject: true,\n      allowWhere: "$block",\n    });\n\n    schema.register("websparkBlockQuoteSvg", {\n      isObject: true,\n      allowIn: "websparkBlockquote",\n      allowContentOf: "$block",\n      allowAttributes: ["role", "title", "viewbox"],\n    });\n\n    schema.register("websparkBlockQuoteContainer", {\n      isLimit: true,\n      allowIn: "websparkBlockquote",\n      allowContentOf: "$block",\n    });\n\n    schema.register("websparkBlockquoteParagraph", {\n      isLimit: true,\n      allowIn: "websparkBlockQuoteContainer",\n      allowContentOf: "$block",\n    });\n\n    schema.register("websparkBlockquoteCitation", {\n      isLimit: true,\n      allowIn: "websparkBlockQuoteContainer",\n      allowContentOf: "$block",\n    });\n\n    schema.register("websparkBlockquoteCitationName", {\n      isLimit: true,\n      allowIn: "websparkBlockquoteCitation",\n      allowContentOf: "$block",\n    });\n\n    schema.register("websparkBlockquoteCitationDescription", {\n      isLimit: true,\n      allowIn: "websparkBlockquoteCitation",\n      allowContentOf: "$block",\n    });\n  }\n\n  /**\n   * Converters determine how CKEditor 5 models are converted into markup and\n   * vice-versa.\n   */\n  _defineConverters() {\n    // Converters are registered via the central editor object.\n    const { conversion } = this.editor;\n    conversion.for("upcast").elementToElement({\n      model: "websparkBlockquoteCitationName",\n      view: {\n        name: "cite",\n        classes: "name",\n      },\n    });\n\n    conversion.for("dataDowncast").elementToElement({\n      model: "websparkBlockquoteCitationName",\n      view: {\n        name: "cite",\n        classes: "name",\n      },\n    });\n\n    conversion.for("editingDowncast").elementToElement({\n      model: "websparkBlockquoteCitationName",\n      view: (_modelElement, { writer }) => {\n        const div = writer.createEditableElement("cite", {\n          class: "name",\n        });\n\n        return (0,ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.toWidgetEditable)(div, writer);\n      },\n    });\n\n    conversion.for("upcast").elementToElement({\n      model: "websparkBlockquoteCitationDescription",\n      view: {\n        name: "cite",\n        classes: "description",\n      },\n    });\n\n    conversion.for("dataDowncast").elementToElement({\n      model: "websparkBlockquoteCitationDescription",\n      view: {\n        name: "cite",\n        classes: "description",\n      },\n    });\n\n    conversion.for("editingDowncast").elementToElement({\n      model: "websparkBlockquoteCitationDescription",\n      view: (_modelElement, { writer }) => {\n        const div = writer.createEditableElement("cite", {\n          class: "description",\n        });\n\n        return (0,ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.toWidgetEditable)(div, writer);\n      },\n    });\n\n    conversion.for("upcast").elementToElement({\n      model: "websparkBlockquoteCitation",\n      view: {\n        name: "div",\n        classes: "citation",\n      },\n    });\n\n    conversion.for("dataDowncast").elementToElement({\n      model: "websparkBlockquoteCitation",\n      view: {\n        name: "div",\n        classes: "citation",\n      },\n    });\n\n    conversion.for("editingDowncast").elementToElement({\n      model: "websparkBlockquoteCitation",\n      view: (_modelElement, { writer }) => {\n        const div = writer.createEditableElement("div", {\n          class: "citation",\n        });\n\n        return (0,ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.toWidgetEditable)(div, writer);\n      },\n    });\n\n    conversion.for("upcast").elementToElement({\n      model: "websparkBlockquoteParagraph",\n      view: {\n        name: "p",\n      },\n    });\n\n    conversion.for("dataDowncast").elementToElement({\n      model: "websparkBlockquoteParagraph",\n      view: {\n        name: "p",\n      },\n    });\n\n    conversion.for("editingDowncast").elementToElement({\n      model: "websparkBlockquoteParagraph",\n      view: (_modelElement, { writer }) => {\n        const paragraphElement = writer.createEditableElement("p", {});\n\n        return (0,ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.toWidgetEditable)(paragraphElement, writer);\n      },\n    });\n\n    conversion.for("upcast").elementToElement({\n      model: "websparkBlockQuoteContainer",\n      view: {\n        name: "blockquote",\n      },\n    });\n\n    conversion.for("dataDowncast").elementToElement({\n      model: "websparkBlockQuoteContainer",\n      view: {\n        name: "blockquote",\n      },\n    });\n\n    conversion.for("editingDowncast").elementToElement({\n      model: "websparkBlockQuoteContainer",\n      view: (_modelElement, { writer }) => {\n        const blockquote = writer.createEditableElement("blockquote", {});\n\n        return (0,ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.toWidgetEditable)(blockquote, writer);\n      },\n    });\n\n    conversion.for("upcast").elementToElement({\n      view: {\n        name: "svg",\n        attributes: {\n          role: "presentation",\n          title: "Open quote",\n        },\n      },\n      model: (viewElement, { writer }) => {\n        return writer.createElement("websparkBlockQuoteSvg", {\n          role: "presentation",\n          title: "Open quote",\n          viewbox: "0 0 302.87 245.82",\n        });\n      },\n      converterPriority: "high",\n    });\n\n    conversion.for("downcast").elementToElement({\n      model: "websparkBlockQuoteSvg",\n      view: (modelElement, { writer: viewWriter }) => {\n        return viewWriter.createRawElement(\n          "svg",\n          {\n            role: "presentation",\n            title: "Open quote",\n            viewBox: "0 0 302.87 245.82",\n            xmlns: "http://www.w3.org/2000/svg",\n          },\n          function (domElement) {\n            domElement.innerHTML = `<path d="M113.61,245.82H0V164.56q0-49.34,8.69-77.83T40.84,35.58Q64.29,12.95,100.67,0l22.24,46.9q-34,11.33-48.72,31.54T58.63,132.21h55Zm180,0H180V164.56q0-49.74,8.7-78T221,35.58Q244.65,12.95,280.63,0l22.24,46.9q-34,11.33-48.72,31.54t-15.57,53.77h55Z"/>`;\n          }\n        );\n      },\n    });\n\n    conversion.for("upcast").elementToElement({\n      view: {\n        name: "div",\n        classes: ["uds-blockquote", "accent-maroon"],\n      },\n      model: (viewElement, { writer }) => {\n        return writer.createElement("websparkBlockquote", {});\n      },\n    });\n\n    conversion.for("dataDowncast").elementToElement({\n      model: "websparkBlockquote",\n      view: (modelElement, { writer }) => {\n        return writer.createContainerElement("div", {\n          class: `uds-blockquote accent-maroon`,\n        });\n      },\n    });\n\n    conversion.for("editingDowncast").elementToElement({\n      model: "websparkBlockquote",\n      view: (modelElement, { writer }) => {\n        const divBQ = writer.createContainerElement("div", {\n          class: `uds-blockquote accent-maroon`,\n        });\n        return (0,ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.toWidget)(divBQ, writer, { label: "BlockQuote" });\n      },\n    });\n  }\n}\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./js/ckeditor5_plugins/websparkPlugin/src/quote/websparkblockquoteediting.js?')},"./js/ckeditor5_plugins/websparkPlugin/src/quote/websparkblockquoteui.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ WebsparkBlockquoteUI)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/ui */ "ckeditor5/src/ui.js");\n/* harmony import */ var _icons_websparkblockquote_svg__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../icons/websparkblockquote.svg */ "./icons/websparkblockquote.svg");\n/* harmony import */ var _websparkblockquoteview__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./websparkblockquoteview */ "./js/ckeditor5_plugins/websparkPlugin/src/quote/websparkblockquoteview.js");\n/**\n * @file registers the websparkBlock toolbar button and binds functionality to it.\n */\n\n\n\n\n\n\nclass WebsparkBlockquoteUI extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n  static get requires() {\n    return [ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.ContextualBalloon];\n  }\n\n  init() {\n    const editor = this.editor;\n    const command = editor.commands.get("insertWebsparkBlockquote");\n\n    this.form = new _websparkblockquoteview__WEBPACK_IMPORTED_MODULE_3__.WebsparkBlockquoteFormView(\n      getFormValidators(editor.t),\n      editor.locale,\n      command\n    );\n\n    editor.ui.componentFactory.add("websparkBlockquote", (locale) => {\n      const dropdown = (0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.createDropdown)(locale);\n\n      this._setUpDropdown(dropdown, this.form, command);\n      this._setUpForm(this.form, dropdown, command);\n\n      return dropdown;\n    });\n  }\n\n  _setUpDropdown(dropdown, form, command) {\n    const editor = this.editor;\n    const t = editor.t;\n    const button = dropdown.buttonView;\n\n    dropdown.bind("isEnabled").to(command);\n    dropdown.panelView.children.add(form);\n\n    button.set({\n      label: t("Blockquote"),\n      icon: _icons_websparkblockquote_svg__WEBPACK_IMPORTED_MODULE_2__["default"],\n      tooltip: true,\n    });\n\n    // Note: Use the low priority to make sure the following listener starts working after the\n    // default action of the drop-down is executed (i.e. the panel showed up). Otherwise, the\n    // invisible form/input cannot be focused/selected.\n    button.on(\n      "open",\n      () => {\n        form.setValues(command.value);\n        form.textInputView.children[1].element.select();\n      },\n      { priority: "low" }\n    );\n\n    dropdown.on("submit", () => {\n      if (form.isValid()) {\n        editor.execute("insertWebsparkBlockquote", {\n          text: form.text,\n          citationName: form.citationName,\n          citationDescription: form.citationDescription,\n        });\n\n        closeUI();\n      }\n    });\n\n    dropdown.on("change:isOpen", () => form.element.reset());\n    dropdown.on("cancel", () => closeUI());\n\n    function closeUI() {\n      editor.editing.view.focus();\n      dropdown.isOpen = false;\n    }\n  }\n\n  _setUpForm(form, dropdown, command) {\n    form.delegate("submit", "cancel").to(dropdown);\n    form.saveButtonView.bind("isEnabled").to(command);\n  }\n}\n\nfunction getFormValidators(t) {\n  return [\n    (form) => {}/*{\n      if (!form.text.length) {\n        return t("The text must not be empty.");\n      }\n    },*/\n  ];\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./js/ckeditor5_plugins/websparkPlugin/src/quote/websparkblockquoteui.js?')},"./js/ckeditor5_plugins/websparkPlugin/src/quote/websparkblockquoteview.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WebsparkBlockquoteFormView: () => (/* binding */ WebsparkBlockquoteFormView)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/ui */ "ckeditor5/src/ui.js");\n/* harmony import */ var ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ckeditor5/src/utils */ "ckeditor5/src/utils.js");\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/utils */ "./js/ckeditor5_plugins/websparkPlugin/src/utils/utils.js");\n\n\n\n\n\n\nclass WebsparkBlockquoteFormView extends ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.View {\n  DEFAULT_TEXT = "";\n  DEFAULT_STYLE = "";\n  DEFAULT_HEADING = "";\n\n  constructor(validators, locale) {\n    super(locale);\n\n    const t = locale.t;\n\n    this.focusTracker = new ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_2__.FocusTracker();\n    this.keystrokes = new ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_2__.KeystrokeHandler();\n\n    this.textInputView = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createTextArea)(t("Content"), locale);\n    this.citationNameView = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createInput)(t("Citation Name"), locale);\n    this.citationDescriptionView = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createInput)(t("Citation Description"), locale);\n\n    this.saveButtonView = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createButton)(\n      t("Save"),\n      ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.icons.check,\n      "ck-button-save",\n      locale\n    );\n    this.saveButtonView.type = "submit";\n\n    this.cancelButtonView = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createButton)(\n      t("Cancel"),\n      ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.icons.cancel,\n      "ck-button-cancel",\n      locale\n    );\n\n    this.cancelButtonView.delegate("execute").to(this, "cancel");\n\n    this._focusables = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.ViewCollection();\n\n    this._focusCycler = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.FocusCycler({\n      focusables: this._focusables,\n      focusTracker: this.focusTracker,\n      keystrokeHandler: this.keystrokes,\n      actions: {\n        focusPrevious: "shift + tab",\n        focusNext: "tab",\n      },\n    });\n\n    this._validators = validators;\n\n    this.setTemplate({\n      tag: "form",\n      attributes: {\n        class: ["ck", "ck-webspark-form","webspark-blockquote-dialog"],\n        tabindex: "-1",\n      },\n      children: [\n        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createRow)(this.textInputView),\n        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createRow)(this.citationNameView),\n        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createRow)(this.citationDescriptionView),\n        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createContainer)(\n          [this.saveButtonView, this.cancelButtonView],\n          ["ck-webspark-form-buttons"]\n        ),\n      ],\n    });\n  }\n\n  render() {\n    super.render();\n\n    (0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.submitHandler)({\n      view: this,\n    });\n\n    // TODO: Check why focus isn\'t working for a custom view\n    const childViews = [\n      this.textInputView.children[1],\n      this.citationNameView.children[1],\n      this.citationDescriptionView.children[1],\n      this.saveButtonView,\n      this.cancelButtonView,\n    ];\n\n    childViews.forEach((v) => {\n      // Register the view as focusable.\n      this._focusables.add(v);\n\n      // Register the view in the focus tracker.\n      this.focusTracker.add(v.element);\n    });\n\n    // Start listening for the keystrokes coming from #element.\n    this.keystrokes.listenTo(this.element);\n\n    const stopPropagation = (data) => data.stopPropagation();\n\n    // Since the form is in the dropdown panel which is a child of the toolbar, the toolbar\'s\n    // keystroke handler would take over the key management in the URL input. We need to prevent\n    // this ASAP. Otherwise, the basic caret movement using the arrow keys will be impossible.\n    this.keystrokes.set("arrowright", stopPropagation);\n    this.keystrokes.set("arrowleft", stopPropagation);\n    this.keystrokes.set("arrowup", stopPropagation);\n    this.keystrokes.set("arrowdown", stopPropagation);\n  }\n\n  destroy() {\n    super.destroy();\n\n    this.focusTracker.destroy();\n    this.keystrokes.destroy();\n  }\n\n  focus() {\n    this._focusCycler.focusFirst();\n  }\n\n  get text() {\n    return this.textInputView.children[1].element.value.trim();\n  }\n\n  set text(text) {\n    this.textInputView.children[1].element.value = text.trim();\n  }\n\n  get citationName() {\n    return this.citationNameView.children[1].element.value.trim();\n  }\n\n  set citationName(text) {\n    this.citationNameView.children[1].element.value = text.trim();\n  }\n\n  get citationDescription() {\n    return this.citationDescriptionView.children[1].element.value.trim();\n  }\n\n  set citationDescription(text) {\n    this.citationDescriptionView.children[1].element.value = text.trim();\n  }\n\n  setValues(values) {\n    this.text = values?.text || this.DEFAULT_TEXT;\n    this.citationName = values?.citationName || this.DEFAULT_STYLE;\n    this.citationDescription = values?.citationDescription || this.DEFAULT_HEADING;\n  }\n\n  isValid() {\n    this.resetFormStatus();\n\n    for (const validator of this._validators) {\n      const errorText = validator(this);\n\n      if (errorText) {\n        if (errorText.includes("text")) {\n          this.textInputView.errorText = errorText;\n        }\n\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  resetFormStatus() {\n    this.textInputView.errorText = null;\n  }\n}\n\nfunction prepareListOptions(options) {\n  const itemDefinitions = new ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_2__.Collection();\n\n  // Create dropdown items.\n  for (const option of options) {\n    const def = {\n      type: "button",\n      model: new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.Model({\n        commandName: "websparkBlockquote",\n        commandParam: option.model,\n        label: option.title,\n        withText: true,\n        value: option.value,\n      }),\n    };\n\n    itemDefinitions.add(def);\n  }\n  return itemDefinitions;\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./js/ckeditor5_plugins/websparkPlugin/src/quote/websparkblockquoteview.js?')},"./js/ckeditor5_plugins/websparkPlugin/src/table/inserttablecommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ InsertWebsparkTableCommand)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n\n\nclass InsertWebsparkTableCommand extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Command {\n  execute({ rows, cols: columns, headers, tabletype, caption }) {\n    const { model } = this.editor;\n    const tableUtils = this.editor.plugins.get("TableUtils");\n\n    const headingRows = headers === "both" || headers === "row" ? 1 : 0;\n    const headingColumns = headers === "both" || headers === "column" ? 1 : 0;\n\n    model.change((writer) => {\n      const table = tableUtils.createTable(writer, {\n        rows,\n        columns,\n        headingRows,\n        headingColumns,\n      });\n\n      model.insertObject(table, null, null, { findOptimalPosition: "auto" });\n      // Set the cursor at the beginning of the table\n      writer.setSelection(writer.createPositionAt(table.getNodeByPath([0]), 0));\n\n      // Create a range around the table\n      const range = writer.createRange(\n        writer.createPositionBefore(table),\n        writer.createPositionAfter(table)\n      );\n      // Create a wrapper element for the table\n      const wrapper = writer.createElement("websparkTable", {\n        type: tabletype,\n      });\n\n      // Wrap the range with the wrapper element and append the table\n      writer.wrap(range, wrapper);\n      writer.append(table, wrapper);\n      model.insertContent(wrapper);\n\n      // Check if a caption is provided and insert it if it exists\n      if (caption?.length) {\n        const newCaptionElement = writer.createElement("caption");\n        writer.insertText(caption, newCaptionElement, "end");\n\n        const tableElement = getSelectionAffectedTable(\n          model.document.selection\n        );\n        model.insertContent(newCaptionElement, tableElement, "end");\n      }\n    });\n  }\n\n  refresh() {\n    const { model } = this.editor;\n    const { selection } = model.document;\n\n    const allowedIn = model.schema.findAllowedParent(\n      selection.getFirstPosition(),\n      "websparkTable"\n    );\n\n    this.isEnabled = allowedIn !== null;\n  }\n}\nfunction getSelectionAffectedTable(selection) {\n  const selectedElement = selection.getSelectedElement();\n\n  // Is the command triggered from the `tableToolbar`?\n  if (selectedElement && selectedElement.is("element", "table")) {\n    return selectedElement;\n  }\n\n  return selection.getFirstPosition().findAncestor("table");\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./js/ckeditor5_plugins/websparkPlugin/src/table/inserttablecommand.js?')},"./js/ckeditor5_plugins/websparkPlugin/src/table/websparktable.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ WebsparkTable)\n/* harmony export */ });\n/* harmony import */ var _websparktableediting__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./websparktableediting */ "./js/ckeditor5_plugins/websparkPlugin/src/table/websparktableediting.js");\n/* harmony import */ var _websparktableui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./websparktableui */ "./js/ckeditor5_plugins/websparkPlugin/src/table/websparktableui.js");\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/**\n * @file This is what CKEditor refers to as a master (glue) plugin. Its role is\n * just to load the “editing” and “UI” components of this Plugin. Those\n * components could be included in this file, but\n *\n * I.e, this file\'s purpose is to integrate all the separate parts of the plugin\n * before it\'s made discoverable via index.js.\n */\n\n\n\n\n\nclass WebsparkTable extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__.Plugin {\n  static get requires() {\n    return [_websparktableediting__WEBPACK_IMPORTED_MODULE_0__["default"], _websparktableui__WEBPACK_IMPORTED_MODULE_1__["default"]];\n  }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./js/ckeditor5_plugins/websparkPlugin/src/table/websparktable.js?')},"./js/ckeditor5_plugins/websparkPlugin/src/table/websparktableediting.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ WebsparkTableEditing)\n/* harmony export */ });\n/* harmony import */ var _ckeditor_ckeditor5_table__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ckeditor/ckeditor5-table */ "./node_modules/@ckeditor/ckeditor5-table/src/index.js");\n/* harmony import */ var _tablecellwsproperties_tablecellwsproperties__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tablecellwsproperties/tablecellwsproperties */ "./js/ckeditor5_plugins/websparkPlugin/src/tablecellwsproperties/tablecellwsproperties.js");\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/* harmony import */ var ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ckeditor5/src/widget */ "ckeditor5/src/widget.js");\n/* harmony import */ var _inserttablecommand__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./inserttablecommand */ "./js/ckeditor5_plugins/websparkPlugin/src/table/inserttablecommand.js");\n\n\n\n\n\n\nclass WebsparkTableEditing extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__.Plugin {\n  static get requires() {\n    return [\n      _ckeditor_ckeditor5_table__WEBPACK_IMPORTED_MODULE_0__.Table,\n      _ckeditor_ckeditor5_table__WEBPACK_IMPORTED_MODULE_0__.TableUtils,\n      _ckeditor_ckeditor5_table__WEBPACK_IMPORTED_MODULE_0__.TableToolbar,\n      _ckeditor_ckeditor5_table__WEBPACK_IMPORTED_MODULE_0__.PlainTableOutput,\n      _ckeditor_ckeditor5_table__WEBPACK_IMPORTED_MODULE_0__.TableCaption,\n      // TODO: Revisit the issue with the Color constructor not being a function after the CKEditor5 update for Drupal.\n      // TableProperties,\n      // TableCellProperties,\n      _ckeditor_ckeditor5_table__WEBPACK_IMPORTED_MODULE_0__.TableSelection,\n      _ckeditor_ckeditor5_table__WEBPACK_IMPORTED_MODULE_0__.TableClipboard,\n      _ckeditor_ckeditor5_table__WEBPACK_IMPORTED_MODULE_0__.TableMouse,\n      _ckeditor_ckeditor5_table__WEBPACK_IMPORTED_MODULE_0__.TableKeyboard,\n      ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_3__.Widget,\n      _tablecellwsproperties_tablecellwsproperties__WEBPACK_IMPORTED_MODULE_1__["default"],\n    ];\n  }\n\n  init() {\n    this._defineSchema();\n    this._defineConverters();\n    this.editor.commands.add(\n      "insertWebsparkTable",\n      new _inserttablecommand__WEBPACK_IMPORTED_MODULE_4__["default"](this.editor)\n    );\n  }\n\n  _defineSchema() {\n    const schema = this.editor.model.schema;\n\n    schema.register("websparkTable", {\n      isObject: true,\n      allowWhere: "$block",\n      allowChildren: ["table"],\n      allowAttributes: ["type"],\n    });\n  }\n\n  _defineConverters() {\n    const { conversion } = this.editor;\n\n    conversion.for("upcast").elementToElement({\n      view: {\n        name: "div",\n        classes: ["uds-table"],\n        attribute: { type: true },\n      },\n      model: (viewElement, { writer }) => {\n        const classes = viewElement.getAttribute("class");\n        const type = classes.includes("-fixed") ? "fixed" : "default";\n\n        return writer.createElement("websparkTable", {\n          type,\n        });\n      },\n    });\n\n    conversion.for("dataDowncast").elementToElement({\n      model: "websparkTable",\n      view: (modelElement, { writer }) => {\n        let _class = "uds-table";\n\n        if (modelElement.getAttribute("type") === "fixed") {\n          _class += ` uds-table-fixed`;\n        }\n\n        return writer.createContainerElement("div", {\n          class: _class,\n        });\n      },\n    });\n\n    conversion.for("editingDowncast").elementToElement({\n      model: "websparkTable",\n      view: (modelElement, { writer }) => {\n        const wrapper = writer.createContainerElement("div");\n\n        return (0,ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_3__.toWidget)(wrapper, writer, { label: "Webspark Table" });\n      },\n    });\n  }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./js/ckeditor5_plugins/websparkPlugin/src/table/websparktableediting.js?')},"./js/ckeditor5_plugins/websparkPlugin/src/table/websparktableui.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ WebsparkTableUI)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/ui */ "ckeditor5/src/ui.js");\n/* harmony import */ var _icons_websparktable_svg__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../icons/websparktable.svg */ "./icons/websparktable.svg");\n/* harmony import */ var _websparktableview__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./websparktableview */ "./js/ckeditor5_plugins/websparkPlugin/src/table/websparktableview.js");\n/**\n * @file registers the websparkTable toolbar button and binds functionality to it.\n */\n\n\n\n\n\n\nclass WebsparkTableUI extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n  static get requires() {\n    return [ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.ContextualBalloon];\n  }\n\n  init() {\n    const editor = this.editor;\n    const command = editor.commands.get("insertWebsparkTable");\n\n    this.form = new _websparktableview__WEBPACK_IMPORTED_MODULE_3__.WebsparkTableFormView(\n      getFormValidators(editor.t),\n      editor.locale,\n      command\n    );\n\n    editor.ui.componentFactory.add("websparkTable", (locale) => {\n      const dropdown = (0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.createDropdown)(locale);\n\n      this._setUpDropdown(dropdown, this.form, command);\n      this._setUpForm(this.form, dropdown, command);\n\n      return dropdown;\n    });\n  }\n\n  _setUpDropdown(dropdown, form, command) {\n    const editor = this.editor;\n    const t = editor.t;\n    const button = dropdown.buttonView;\n    const commando =  this.editor.commands.get(\'insertTable\');\n\n    dropdown.bind("isEnabled").to(command);\n    dropdown.panelView.children.add(form);\n\n    button.set({\n      label: t("Webspark table"),\n      icon: _icons_websparktable_svg__WEBPACK_IMPORTED_MODULE_2__["default"],\n      tooltip: true,\n    });\n\n    // Note: Use the low priority to make sure the following listener starts working after the\n    // default action of the drop-down is executed (i.e. the panel showed up). Otherwise, the\n    // invisible form/input cannot be focused/selected.\n    button.on(\n      "open",\n      () => {\n        form.setValues(command.value);\n        form.textInputRowsView.children[1].select();\n\n        form.focus();\n      },\n      { priority: "low" }\n    );\n\n    dropdown.on("submit", () => {\n      if (form.isValid()) {\n       editor.execute("insertWebsparkTable", {\n          rows: form.rows,\n          cols: form.cols,\n          headers: form.headers,\n          tabletype: form.tabletype,\n          caption: form.caption,\n        });\n\n        closeUI();\n      }\n    });\n\n    dropdown.on("change:isOpen", () => form.element.reset());\n    dropdown.on("cancel", () => closeUI());\n\n    function closeUI() {\n      editor.editing.view.focus();\n      dropdown.isOpen = false;\n    }\n  }\n\n  _setUpForm(form, dropdown, command) {\n    form.delegate("submit", "cancel").to(dropdown);\n    form.saveButtonView.bind("isEnabled").to(command);\n  }\n}\n\nfunction getFormValidators(t) {\n  return [\n    (form) => {\n      if (!form.rows.length) {\n        return t("The rows field must not be empty.");\n      }\n      if (!form.cols.length) {\n        return t("The cols field must not be empty.");\n      }\n    },\n  ];\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./js/ckeditor5_plugins/websparkPlugin/src/table/websparktableui.js?')},"./js/ckeditor5_plugins/websparkPlugin/src/table/websparktableview.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WebsparkTableFormView: () => (/* binding */ WebsparkTableFormView)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/ui */ "ckeditor5/src/ui.js");\n/* harmony import */ var ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ckeditor5/src/utils */ "ckeditor5/src/utils.js");\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/utils */ "./js/ckeditor5_plugins/websparkPlugin/src/utils/utils.js");\n\n\n\n\n\n\nclass WebsparkTableFormView extends ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.View {\n  DEFAULT_ROWS = "3";\n  DEFAULT_COLS = "2";\n  DEFAULT_HEADER = "none";\n  DEFAULT_TYPE = "default";\n\n  constructor(validators, locale) {\n    super(locale);\n\n    const t = locale.t;\n\n    this.focusTracker = new ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_2__.FocusTracker();\n    this.keystrokes = new ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_2__.KeystrokeHandler();\n\n    this.textInputRowsView = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createInput)(t("Rows"), locale);\n    this.textInputColsView = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createInput)(t("Columns"), locale);\n    this.headersSelect = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createSelect)(\n      t("Headers"),\n      this._getHeaderOptions(t),\n      locale\n    );\n    this.tabletypeSelect = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createSelect)(\n      t("Table Type"),\n      this._getTableTypeOptions(t),\n      locale\n    );\n    this.textCaption = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createInput)(t("Caption"), locale);\n\n    this.saveButtonView = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createButton)(\n      t("Save"),\n      ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.icons.check,\n      "ck-button-save",\n      locale\n    );\n    this.saveButtonView.type = "submit";\n\n    this.cancelButtonView = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createButton)(\n      t("Cancel"),\n      ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.icons.cancel,\n      "ck-button-cancel",\n      locale\n    );\n\n    this.cancelButtonView.delegate("execute").to(this, "cancel");\n\n    this._focusables = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.ViewCollection();\n\n    this._focusCycler = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.FocusCycler({\n      focusables: this._focusables,\n      focusTracker: this.focusTracker,\n      keystrokeHandler: this.keystrokes,\n      actions: {\n        focusPrevious: "shift + tab",\n        focusNext: "tab",\n      },\n    });\n\n    this._validators = validators;\n\n    this.setTemplate({\n      tag: "form",\n      attributes: {\n        class: ["ck", "ck-webspark-form"],\n        tabindex: "-1",\n      },\n      children: [\n        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createRow)(this.textInputRowsView),\n        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createRow)(this.textInputColsView),\n        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createRow)(this.headersSelect),\n        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createRow)(this.tabletypeSelect),\n        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createRow)(this.textCaption),\n        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.createContainer)(\n          [this.saveButtonView, this.cancelButtonView],\n          ["ck-webspark-form-buttons"]\n        ),\n      ],\n    });\n  }\n\n  render() {\n    super.render();\n\n    (0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.submitHandler)({\n      view: this,\n    });\n\n    // TODO: Check why focus isn\'t working for a custom view\n    const childViews = [\n      this.textInputRowsView.children[1],\n      this.textInputColsView.children[1],\n      this.headersSelect.children[1],\n      this.tabletypeSelect.children[1],\n      this.textCaption.children[1],\n      this.saveButtonView,\n      this.cancelButtonView,\n    ];\n\n    childViews.forEach((v) => {\n      // Register the view as focusable.\n      this._focusables.add(v);\n\n      // Register the view in the focus tracker.\n      this.focusTracker.add(v.element);\n    });\n\n    // Start listening for the keystrokes coming from #element.\n    this.keystrokes.listenTo(this.element);\n\n    const stopPropagation = (data) => data.stopPropagation();\n\n    // Since the form is in the dropdown panel which is a child of the toolbar, the toolbar\'s\n    // keystroke handler would take over the key management in the URL input. We need to prevent\n    // this ASAP. Otherwise, the basic caret movement using the arrow keys will be impossible.\n    this.keystrokes.set("arrowright", stopPropagation);\n    this.keystrokes.set("arrowleft", stopPropagation);\n    this.keystrokes.set("arrowup", stopPropagation);\n    this.keystrokes.set("arrowdown", stopPropagation);\n  }\n\n  destroy() {\n    super.destroy();\n\n    this.focusTracker.destroy();\n    this.keystrokes.destroy();\n  }\n\n  focus() {\n    this._focusCycler.focusFirst();\n  }\n\n  get rows() {\n    return this.textInputRowsView.children[1].element.value.trim();\n  }\n\n  set rows(rows) {\n    this.textInputRowsView.children[1].element.value = rows.trim();\n  }\n\n  get cols() {\n    return this.textInputColsView.children[1].element.value.trim();\n  }\n\n  set cols(cols) {\n    this.textInputColsView.children[1].element.value = cols.trim();\n  }\n\n  get headers() {\n    return this.headersSelect.children[1].value;\n  }\n\n  set headers(header) {\n    this.headersSelect.children[1].value = header;\n  }\n\n  get tabletype() {\n    return this.tabletypeSelect.children[1].value;\n  }\n\n  set tabletype(ttype) {\n    this.tabletypeSelect.children[1].value = ttype;\n  }\n\n  set caption(text) {\n    this.textCaption.children[1].element.value = text.trim();\n  }\n\n  get caption() {\n    return this.textCaption.children[1].element.value.trim();\n  }\n\n  setValues(values) {\n    this.rows = values?.rows || this.DEFAULT_ROWS;\n    this.cols = values?.cols || this.DEFAULT_COLS;\n    this.headers = values?.headers || this.DEFAULT_HEADER;\n    this.tabletype = values?.tabletype || this.DEFAULT_TYPE;\n    this.caption = values?.caption || "";\n  }\n\n  isValid() {\n    this.resetFormStatus();\n\n    for (const validator of this._validators) {\n      const errorText = validator(this);\n\n      if (errorText) {\n        if (errorText.includes("text")) {\n          this.textInputRowsView.errorText = errorText;\n        } else if (errorText.includes("URL")) {\n          this.textInputColsView.errorText = errorText;\n        }\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  resetFormStatus() {\n    this.textInputRowsView.errorText = null;\n    this.textInputColsView.errorText = null;\n  }\n\n  /**\n   * Generates an array of header options.\n   *\n   * @param {string} t - The translation function.\n   * @return {Array} An array of header options.\n   */\n  _getHeaderOptions(t) {\n    return [\n      {\n        value: "none",\n        title: t("None"),\n      },\n      {\n        value: "row",\n        title: t("First row"),\n      },\n      {\n        value: "column",\n        title: t("First column"),\n      },\n      {\n        value: "both",\n        title: t("Both"),\n      },\n    ];\n  }\n\n  /**\n   * Retrieves the table type options.\n   *\n   * @param {type} t - the translation function\n   * @return {Array} an array of table type options\n   */\n  _getTableTypeOptions(t) {\n    return [\n      {\n        value: "default",\n        title: t("Default"),\n      },\n      {\n        value: "fixed",\n        title: t("Fixed"),\n      },\n    ];\n  }\n}\n\nfunction prepareListOptions(options) {\n  const itemDefinitions = new ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_2__.Collection();\n\n  // Create dropdown items.\n  for (const option of options) {\n    const def = {\n      type: "button",\n      model: new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.Model({\n        commandName: "websparkTable",\n        commandParam: option.model,\n        label: option.title,\n        withText: true,\n        value: option.value,\n      }),\n    };\n\n    itemDefinitions.add(def);\n  }\n  return itemDefinitions;\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./js/ckeditor5_plugins/websparkPlugin/src/table/websparktableview.js?')},"./js/ckeditor5_plugins/websparkPlugin/src/tablecellwsproperties/tablecellwsclasscommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ TableCellWsClassCommand)\n/* harmony export */ });\n/* harmony import */ var _ckeditor_ckeditor5_table_src_tablecellproperties_commands_tablecellpropertycommand__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellpropertycommand */ "./node_modules/@ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellpropertycommand.js");\n/* harmony import */ var ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/utils */ "ckeditor5/src/utils.js");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n\n\n/**\n * The table cell border style command.\n *\n * The command is registered by the {@link module:table/tablecellproperties/tablecellpropertiesediting~TableCellPropertiesEditing} as\n * the `\'tableCellWsClass\'` editor command.\n *\n * To change the border style of selected cells, execute the command:\n *\n * ```ts\n * editor.execute( \'tableCellWsClass\', {\n *   value: \'dashed\'\n * } );\n * ```\n */\nclass TableCellWsClassCommand extends _ckeditor_ckeditor5_table_src_tablecellproperties_commands_tablecellpropertycommand__WEBPACK_IMPORTED_MODULE_0__["default"] {\n  /**\n   * Creates a new `TableCellWsClassCommand` instance.\n   *\n   * @param editor An editor in which this command will be used.\n   * @param defaultValue The default value of the attribute.\n   */\n  constructor(editor) {\n    super(editor);\n  }\n\n  /**\n   * Refreshes the editor.\n   *\n   * @param {type} None - This function does not accept any parameters.\n   * @return {type} None - This function does not return any value.\n   */\n  refresh() {\n    let cell = (0,ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_1__.first)(this.editor.model.document.selection.getSelectedBlocks());\n    this.isEnabled = cell;\n    if (cell && cell.parent) {\n      cell = cell.parent;\n      this.value = Object.fromEntries(cell.getAttributes());\n    }\n  }\n\n  /**\n   * Executes the function.\n   *\n   * @param {Object} value - The value used for execution.\n   */\n  execute({ value }) {\n    const { model } = this.editor;\n    model.change((writer) => {\n      let cell = (0,ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_1__.first)(\n        this.editor.model.document.selection.getSelectedBlocks()\n      );\n      if (cell && cell.parent) {\n        cell = cell.parent;\n        writer.setAttribute("cellType", value, cell);\n      }\n    });\n  }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./js/ckeditor5_plugins/websparkPlugin/src/tablecellwsproperties/tablecellwsclasscommand.js?')},"./js/ckeditor5_plugins/websparkPlugin/src/tablecellwsproperties/tablecellwsproperties.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ TableCellWsProperties)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/* harmony import */ var _tablecellwspropertiesui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tablecellwspropertiesui */ "./js/ckeditor5_plugins/websparkPlugin/src/tablecellwsproperties/tablecellwspropertiesui.js");\n/* harmony import */ var _tablecellwspropertiesediting__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tablecellwspropertiesediting */ "./js/ckeditor5_plugins/websparkPlugin/src/tablecellwsproperties/tablecellwspropertiesediting.js");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tablecellproperties\n */\n\n\n\n/**\n * The table cell properties feature. Enables support for setting properties of table cells (size, border, background, etc.).\n *\n * Read more in the {@glink features/tables/tables-styling Table and cell styling tools} section.\n * See also the {@link module:table/tableproperties~TableProperties} plugin.\n *\n * This is a "glue" plugin that loads the\n * {@link module:table/tablecellproperties/tablecellpropertiesediting~TableCellPropertiesEditing table cell properties editing feature} and\n * the {@link module:table/tablecellproperties/tablecellpropertiesui~TableCellPropertiesUI table cell properties UI feature}.\n */\nclass TableCellWsProperties extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return \'TableCellWsProperties\';\n    }\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [_tablecellwspropertiesediting__WEBPACK_IMPORTED_MODULE_2__["default"], _tablecellwspropertiesui__WEBPACK_IMPORTED_MODULE_1__["default"]];\n    }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./js/ckeditor5_plugins/websparkPlugin/src/tablecellwsproperties/tablecellwsproperties.js?')},"./js/ckeditor5_plugins/websparkPlugin/src/tablecellwsproperties/tablecellwspropertiesediting.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ TableCellWsPropertiesEditing)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/* harmony import */ var _ckeditor_ckeditor5_table_src_tableediting__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ckeditor/ckeditor5-table/src/tableediting */ "./node_modules/@ckeditor/ckeditor5-table/src/tableediting.js");\n/* harmony import */ var _tablecellwsclasscommand__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tablecellwsclasscommand */ "./js/ckeditor5_plugins/websparkPlugin/src/tablecellwsproperties/tablecellwsclasscommand.js");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tablecellwsproperties/tablecellwspropertiesediting\n */\n\n\n\n\nclass TableCellWsPropertiesEditing extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return "TableCellWsPropertiesEditing";\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static get requires() {\n    return [_ckeditor_ckeditor5_table_src_tableediting__WEBPACK_IMPORTED_MODULE_1__["default"]];\n  }\n\n  /**\n   * @inheritDoc\n   */\n  init() {\n    const editor = this.editor;\n    const conversion = editor.conversion;\n    editor.commands.add(\n      "tableCellWsClass",\n      new _tablecellwsclasscommand__WEBPACK_IMPORTED_MODULE_2__["default"](editor)\n    );\n    markerConversion(conversion);\n  }\n}\n\nfunction markerConversion(conversion) {\n  conversion.for("upcast").elementToElement({\n    view: {\n      name: /^(td|th)$/,\n    },\n    model: (viewElement, { writer }) => {\n      const classes = Array.from(viewElement._classes);\n      if (classes.includes("normal")) {\n        return writer.createElement("tableCell", {\n          cellType: "normal",\n        });\n      }\n      if (classes.includes("indent")) {\n        return writer.createElement("tableCell", {\n          cellType: "indent",\n        });\n      }\n      return writer.createElement("tableCell", {\n        cellType: viewElement.name,\n      });\n    },\n    converterPriority: "high",\n  });\n\n  conversion.for("downcast").elementToElement({\n    model: {\n      name: "tableCell",\n      attributes: ["cellType"],\n    },\n    view: (modelElement, { writer }) => {\n      switch (modelElement.getAttribute("cellType")) {\n        case "th":\n          return writer.createEditableElement(\n            "th",\n            {\n              contenteditable: "true",\n              class: "ck-editor__editable ck-editor__nested-editable",\n              role: "textbox",\n            },\n            []\n          );\n        case "td":\n          return writer.createEditableElement(\n            "td",\n            {\n              contenteditable: "true",\n              class: "ck-editor__editable ck-editor__nested-editable",\n              role: "textbox",\n            },\n            []\n          );\n        case "indent":\n        case "normal":\n          return writer.createEditableElement(\n            "th",\n            {\n              contenteditable: "true",\n              class:\n                "ck-editor__editable ck-editor__nested-editable " +\n                modelElement.getAttribute("cellType"),\n              role: "textbox",\n            },\n            []\n          );\n      }\n    },\n    converterPriority: "high",\n  });\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./js/ckeditor5_plugins/websparkPlugin/src/tablecellwsproperties/tablecellwspropertiesediting.js?')},"./js/ckeditor5_plugins/websparkPlugin/src/tablecellwsproperties/tablecellwspropertiesui.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ TableCellWsPropertiesUI)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/ui */ "ckeditor5/src/ui.js");\n/* harmony import */ var _ui_tablecellwspropertiesview__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ui/tablecellwspropertiesview */ "./js/ckeditor5_plugins/websparkPlugin/src/tablecellwsproperties/ui/tablecellwspropertiesview.js");\n/* harmony import */ var _ckeditor_ckeditor5_table_src_utils_ui_table_properties__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ckeditor/ckeditor5-table/src/utils/ui/table-properties */ "./node_modules/@ckeditor/ckeditor5-table/src/utils/ui/table-properties.js");\n/* harmony import */ var _ckeditor_ckeditor5_table_src_utils_ui_widget__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ckeditor/ckeditor5-table/src/utils/ui/widget */ "./node_modules/@ckeditor/ckeditor5-table/src/utils/ui/widget.js");\n/* harmony import */ var _ckeditor_ckeditor5_table_src_utils_ui_contextualballoon__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ckeditor/ckeditor5-table/src/utils/ui/contextualballoon */ "./node_modules/@ckeditor/ckeditor5-table/src/utils/ui/contextualballoon.js");\n/* harmony import */ var _icons_table_cell_properties_svg__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./icons/table-cell-properties.svg */ "./js/ckeditor5_plugins/websparkPlugin/src/tablecellwsproperties/icons/table-cell-properties.svg");\n/* harmony import */ var ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ckeditor5/src/utils */ "ckeditor5/src/utils.js");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tablecellwsproperties/tablecellwspropertiesui\n */\n\n\n\n\n\n\n\n\n\nconst propertyToCommandMap = {\n  tableCellWsClass: "tableCellWsClass",\n};\n\n/**\n * The table cell properties UI plugin. It introduces the `\'tableCellWsProperties\'` button\n * that opens a form allowing to specify the visual styling of a table cell.\n *\n * It uses the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon plugin}.\n */\nclass TableCellWsPropertiesUI extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get requires() {\n    return [ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.ContextualBalloon];\n  }\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return "TableCellWsPropertiesUI";\n  }\n  /**\n   * @inheritDoc\n   */\n  constructor(editor) {\n    super(editor);\n    editor.config.define("table.tableCellWsProperties", {\n      borderColors: _ckeditor_ckeditor5_table_src_utils_ui_table_properties__WEBPACK_IMPORTED_MODULE_3__.defaultColors,\n      backgroundColors: _ckeditor_ckeditor5_table_src_utils_ui_table_properties__WEBPACK_IMPORTED_MODULE_3__.defaultColors,\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n  init() {\n    const editor = this.editor;\n    const t = editor.t;\n    this._balloon = editor.plugins.get(ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.ContextualBalloon);\n    this.view = null;\n    this._isReady = false;\n    editor.ui.componentFactory.add("tableCellWsProperties", (locale) => {\n      const view = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.ButtonView(locale);\n      view.set({\n        label: t("Cell Ws properties"),\n        icon: _icons_table_cell_properties_svg__WEBPACK_IMPORTED_MODULE_6__["default"],\n        tooltip: true,\n      });\n      this.listenTo(view, "execute", () => this._showView());\n\n      const commands = Object.values(propertyToCommandMap).map((commandName) =>\n        editor.commands.get(commandName)\n      );\n\n      view\n        .bind("isEnabled")\n        .toMany(commands, "isEnabled", (...areEnabled) =>\n          areEnabled.some((isCommandEnabled) => isCommandEnabled)\n        );\n\n      return view;\n    });\n  }\n\n  /**\n   * Creates the {@link module:table/tablecellwsproperties/ui/tablecellwspropertiesview~TableCellWsPropertiesView} instance.\n   *\n   * @returns TableCellWsPropertiesView cell properties form view instance.\n   */\n  _createPropertiesView() {\n    const editor = this.editor;\n    const config = editor.config.get("table.tableCellWsProperties");\n    const view = new _ui_tablecellwspropertiesview__WEBPACK_IMPORTED_MODULE_2__["default"](editor.locale, {});\n    const t = editor.t;\n    // Render the view so its #element is available for the clickOutsideHandler.\n    //view.render();\n    this.listenTo(view, "submit", () => {\n      this.editor.execute("tableCellWsClass", {\n        value: view.classselect,\n        //batch: this._undoStepBatch\n      });\n      this._hideView();\n    });\n    this.listenTo(view, "cancel", () => {\n      if (this._undoStepBatch.operations.length) {\n        editor.execute("undo", this._undoStepBatch);\n      }\n      this._hideView();\n    });\n    // Close the balloon on Esc key press.\n    view.keystrokes.set("Esc", (data, cancel) => {\n      this._hideView();\n      cancel();\n    });\n    // Close on click outside of balloon panel element.\n    (0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.clickOutsideHandler)({\n      emitter: view,\n      activator: () => this._isViewInBalloon,\n      contextElements: [this._balloon.view.element],\n      callback: () => this._hideView(),\n    });\n    return view;\n  }\n\n  /**\n   * Shows the {@link #view} in the {@link #_balloon}.\n   *\n   * **Note**: Each time a view is shown, a new {@link #_undoStepBatch} is created. It contains\n   * all changes made to the document when the view is visible, allowing a single undo step\n   * for all of them.\n   */\n  _showView() {\n    const editor = this.editor;\n    if (!this.view) {\n      this.view = this._createPropertiesView();\n    }\n    this.listenTo(editor.ui, "update", () => {\n      this._updateView();\n    });\n    let cell = (0,ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_7__.first)(this.editor.model.document.selection.getSelectedBlocks());\n    if (cell && cell.parent) {\n      cell = cell.parent;\n      this.view.classselect = cell.getAttribute("cellType");\n    }\n\n    this._balloon.add({\n      view: this.view,\n      position: (0,_ckeditor_ckeditor5_table_src_utils_ui_contextualballoon__WEBPACK_IMPORTED_MODULE_5__.getBalloonCellPositionData)(editor),\n    });\n    // Create a new batch. Clicking "Cancel" will undo this batch.\n    this._undoStepBatch = editor.model.createBatch();\n    // Basic a11y.\n    this.view.focus();\n  }\n  /**\n   * Removes the {@link #view} from the {@link #_balloon}.\n   */\n  _hideView() {\n    const editor = this.editor;\n    this.stopListening(editor.ui, "update");\n    this._isReady = false;\n    // Blur any input element before removing it from DOM to prevent issues in some browsers.\n    // See https://github.com/ckeditor/ckeditor5/issues/1501.\n    this.view.saveButtonView.focus();\n    this._balloon.remove(this.view);\n    // Make sure the focus is not lost in the process by putting it directly\n    // into the editing view.\n    this.editor.editing.view.focus();\n  }\n  /**\n   * Repositions the {@link #_balloon} or hides the {@link #view} if a table cell is no longer selected.\n   */\n  _updateView() {\n    const editor = this.editor;\n    const viewDocument = editor.editing.view.document;\n    if (!(0,_ckeditor_ckeditor5_table_src_utils_ui_widget__WEBPACK_IMPORTED_MODULE_4__.getTableWidgetAncestor)(viewDocument.selection)) {\n      this._hideView();\n    } else if (this._isViewVisible) {\n      (0,_ckeditor_ckeditor5_table_src_utils_ui_contextualballoon__WEBPACK_IMPORTED_MODULE_5__.repositionContextualBalloon)(editor, "cell");\n    }\n  }\n  /**\n   * Returns `true` when the {@link #view} is visible in the {@link #_balloon}.\n   */\n  get _isViewVisible() {\n    return !!this.view && this._balloon.visibleView === this.view;\n  }\n  /**\n   * Returns `true` when the {@link #view} is in the {@link #_balloon}.\n   */\n  get _isViewInBalloon() {\n    return !!this.view && this._balloon.hasView(this.view);\n  }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./js/ckeditor5_plugins/websparkPlugin/src/tablecellwsproperties/tablecellwspropertiesui.js?')},"./js/ckeditor5_plugins/websparkPlugin/src/tablecellwsproperties/ui/tablecellwspropertiesview.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ TableCellWsPropertiesView)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/ui */ "ckeditor5/src/ui.js");\n/* harmony import */ var ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/utils */ "ckeditor5/src/utils.js");\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/* harmony import */ var _ckeditor_ckeditor5_table_theme_form_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ckeditor/ckeditor5-table/theme/form.css */ "./node_modules/@ckeditor/ckeditor5-table/theme/form.css");\n/* harmony import */ var _ckeditor_ckeditor5_table_theme_tableform_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ckeditor/ckeditor5-table/theme/tableform.css */ "./node_modules/@ckeditor/ckeditor5-table/theme/tableform.css");\n/* harmony import */ var _ckeditor_ckeditor5_table_theme_tablecellproperties_css__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ckeditor/ckeditor5-table/theme/tablecellproperties.css */ "./node_modules/@ckeditor/ckeditor5-table/theme/tablecellproperties.css");\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utils/utils */ "./js/ckeditor5_plugins/websparkPlugin/src/utils/utils.js");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tablecellwsproperties/ui/tablecellwspropertiesview\n */\n\n\n\n\n\n\n\n\n/**\n * The class representing a table cell properties form, allowing users to customize\n * certain style aspects of a table cell, for instance, border, padding, text alignment, etc..\n */\nclass TableCellWsPropertiesView extends ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.View {\n  constructor(locale, options) {\n    super(locale);\n\n    const t = locale.t;\n\n    this.focusTracker = new ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_1__.FocusTracker();\n    this.keystrokes = new ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_1__.KeystrokeHandler();\n\n    this.classSelect = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_6__.createSelect)(\n      t("Cell WS properties"),\n      this._getPropertiesOptions(t),\n      locale\n    );\n\n    this.saveButtonView = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_6__.createButton)(\n      t("Save"),\n      ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__.icons.check,\n      "ck-button-save",\n      locale\n    );\n    this.saveButtonView.type = "submit";\n\n    this.cancelButtonView = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_6__.createButton)(\n      t("Cancel"),\n      ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__.icons.cancel,\n      "ck-button-cancel",\n      locale\n    );\n\n    this.cancelButtonView.delegate("execute").to(this, "cancel");\n\n    this._focusables = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.ViewCollection();\n\n    this._focusCycler = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.FocusCycler({\n      focusables: this._focusables,\n      focusTracker: this.focusTracker,\n      keystrokeHandler: this.keystrokes,\n      actions: {\n        focusPrevious: "shift + tab",\n        focusNext: "tab",\n      },\n    });\n\n    this.setTemplate({\n      tag: "form",\n      attributes: {\n        class: ["ck", "ck-webspark-form"],\n        tabindex: "-1",\n      },\n      children: [\n        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_6__.createRow)(this.classSelect),\n        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_6__.createContainer)(\n          [this.saveButtonView, this.cancelButtonView],\n          ["ck-webspark-form-buttons"]\n        ),\n      ],\n    });\n  }\n\n  _getPropertiesOptions(t) {\n    return [\n      {\n        value: "td",\n        title: t("Data"),\n      },\n      {\n        value: `th`,\n        title: t("Header"),\n      },\n      {\n        value: `indent`,\n        title: t("Padded header"),\n      },\n      {\n        value: `normal`,\n        title: t("Normal text header"),\n      },\n    ];\n  }\n\n  render() {\n    super.render();\n\n    (0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.submitHandler)({\n      view: this,\n    });\n\n    // TODO: Check why focus isn\'t working for a custom view\n    const childViews = [\n      this.classSelect.children[1],\n\n      this.saveButtonView,\n      this.cancelButtonView,\n    ];\n\n    childViews.forEach((v) => {\n      // Register the view as focusable.\n      this._focusables.add(v);\n\n      // Register the view in the focus tracker.\n      this.focusTracker.add(v.element);\n    });\n\n    // Start listening for the keystrokes coming from #element.\n    this.keystrokes.listenTo(this.element);\n\n    const stopPropagation = (data) => data.stopPropagation();\n\n    // Since the form is in the dropdown panel which is a child of the toolbar, the toolbar\'s\n    // keystroke handler would take over the key management in the URL input. We need to prevent\n    // this ASAP. Otherwise, the basic caret movement using the arrow keys will be impossible.\n    this.keystrokes.set("arrowright", stopPropagation);\n    this.keystrokes.set("arrowleft", stopPropagation);\n    this.keystrokes.set("arrowup", stopPropagation);\n    this.keystrokes.set("arrowdown", stopPropagation);\n  }\n\n  destroy() {\n    super.destroy();\n\n    this.focusTracker.destroy();\n    this.keystrokes.destroy();\n  }\n\n  focus() {\n    this._focusCycler.focusFirst();\n  }\n\n  get classselect() {\n    return this.classSelect.children[1].value;\n  }\n\n  set classselect(classselect) {\n    this.classSelect.children[1].value = classselect;\n  }\n\n  setValues(values) {\n    this.classselect = values?.classselect;\n  }\n\n  isValid() {\n    return true;\n  }\n}\nfunction isBorderStyleSet(value) {\n  return value !== "none";\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./js/ckeditor5_plugins/websparkPlugin/src/tablecellwsproperties/ui/tablecellwspropertiesview.js?')},"./js/ckeditor5_plugins/websparkPlugin/src/utils/selectview.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SelectView: () => (/* binding */ SelectView)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/ui */ "ckeditor5/src/ui.js");\n\n\nclass SelectView extends ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.View {\n  constructor(locale, options, defaultValue) {\n    super(locale);\n\n    const bind = this.bindTemplate;\n\n    this.set("value", options[0]?.value || defaultValue);\n\n    const children = options.map((option) => ({\n      tag: "option",\n      attributes: {\n        value: option.value,\n        selected: bind.if("value", "", (value) => value === option.value),\n      },\n      children: [option.title],\n    }));\n\n    this.on("select", (_, e) => {\n      this.set("value", e.target.value);\n    });\n\n    this.setTemplate({\n      tag: "select",\n      attributes: {\n        class: ["ck-webspark-form-select"],\n      },\n      children,\n      on: {\n        change: bind.to("select"),\n      },\n    });\n  }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./js/ckeditor5_plugins/websparkPlugin/src/utils/selectview.js?')},"./js/ckeditor5_plugins/websparkPlugin/src/utils/textareaview.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TextAreaView: () => (/* binding */ TextAreaView)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/ui */ "ckeditor5/src/ui.js");\n\n\nclass TextAreaView extends ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.View {\n  constructor(locale, defaultValue) {\n    super(locale);\n\n    const bind = this.bindTemplate;\n\n    this.set("value", defaultValue || "");\n\n    this.setTemplate({\n      tag: "textarea",\n      attributes: {\n        class: ["ck-webspark-form-textarea"],\n      },\n      on: {\n        input: bind.to("value"),\n      },\n    });\n  }\n}\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./js/ckeditor5_plugins/websparkPlugin/src/utils/textareaview.js?')},"./js/ckeditor5_plugins/websparkPlugin/src/utils/utils.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createButton: () => (/* binding */ createButton),\n/* harmony export */   createContainer: () => (/* binding */ createContainer),\n/* harmony export */   createDropdown: () => (/* binding */ createDropdown),\n/* harmony export */   createInput: () => (/* binding */ createInput),\n/* harmony export */   createRow: () => (/* binding */ createRow),\n/* harmony export */   createSelect: () => (/* binding */ createSelect),\n/* harmony export */   createTextArea: () => (/* binding */ createTextArea),\n/* harmony export */   extractDataFromClasses: () => (/* binding */ extractDataFromClasses)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/ui */ "ckeditor5/src/ui.js");\n/* harmony import */ var _selectview__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./selectview */ "./js/ckeditor5_plugins/websparkPlugin/src/utils/selectview.js");\n/* harmony import */ var _textareaview__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./textareaview */ "./js/ckeditor5_plugins/websparkPlugin/src/utils/textareaview.js");\n\n\n\n\n// Creates a container element with specified children and CSS classes.\nfunction createContainer(children, classes = []) {\n  return {\n    tag: "div",\n    attributes: { class: ["ck-webspark-form-container", ...classes] },\n    children,\n  };\n}\n\n// Creates a row element with specified children.\nfunction createRow(...children) {\n  return {\n    tag: "div",\n    attributes: { class: ["ck-webspark-form-row"] },\n    children,\n  };\n}\n\n// Creates a select input element with a label and options.\nfunction createSelect(label, options, locale) {\n  const labelView = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.LabelView(locale);\n  const selectView = new _selectview__WEBPACK_IMPORTED_MODULE_1__.SelectView(locale, options, options[0].value);\n\n  labelView.text = label;\n\n  // Wraps the label and select input in a container.\n  return createContainer([labelView, selectView]);\n}\n\n// Creates an input element with a label.\nfunction createInput(label, locale) {\n  const labelView = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.LabelView(locale);\n  const inputTextView = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.InputTextView(locale);\n\n  labelView.text = label;\n\n  // Wraps the label and input in a container.\n  return createContainer([labelView, inputTextView]);\n}\n\n// Creates a button element with label, icon, and CSS class.\nfunction createButton(label, icon, className, locale) {\n  const button = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.ButtonView(locale);\n\n  button.set({\n    label,\n    icon,\n    tooltip: true,\n  });\n\n  // Adds CSS class to the button element.\n  button.extendTemplate({\n    attributes: {\n      class: className,\n    },\n  });\n\n  return button;\n}\n\n// Creates a dropdown element with label, options, and callback for item selection.\nfunction createDropdown(label, options, locale, onExecute) {\n  const dropdown = (0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.createDropdown)(locale);\n\n  // Adds options to the dropdown.\n  (0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.addListToDropdown)(dropdown, prepareListOptions(options));\n\n  // Sets the label for the dropdown button.\n  dropdown.buttonView.set({\n    label: locale.t(label),\n    withText: true,\n  });\n\n  // Listens for item selection and executes the callback.\n  this.listenTo(dropdown, "execute", (item) => {\n    onExecute(item);\n    dropdown.buttonView.set("label", item.source.label);\n  });\n\n  return dropdown;\n}\n\n// Extracts data from classes and returns a default value if no matching class is found.\nfunction extractDataFromClasses(classes, data, defaultValue = "default") {\n  if (!isObjectEmpty(data)) {\n    for (const className in data) {\n      if (classes.includes(className)) {\n        return data[className];\n      }\n    }\n  }\n  return defaultValue;\n}\n\nfunction createTextArea(label, locale) {\n  const labelView = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.LabelView(locale);\n  const textAreaView = new _textareaview__WEBPACK_IMPORTED_MODULE_2__.TextAreaView(locale);\n\n  labelView.text = label;\n\n  return createContainer([labelView, textAreaView]);\n}\nconst isObjectEmpty = (objectName) => {\n  return Object.keys(objectName).length === 0\n}\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./js/ckeditor5_plugins/websparkPlugin/src/utils/utils.js?')},"./node_modules/@ckeditor/ckeditor5-table/src/augmentation.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/augmentation.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/commands/insertcolumncommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ InsertColumnCommand)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/commands/insertcolumncommand\n */\n\n/**\n * The insert column command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'insertTableColumnLeft'` and\n * `'insertTableColumnRight'` editor commands.\n *\n * To insert a column to the left of the selected cell, execute the following command:\n *\n * ```ts\n * editor.execute( 'insertTableColumnLeft' );\n * ```\n *\n * To insert a column to the right of the selected cell, execute the following command:\n *\n * ```ts\n * editor.execute( 'insertTableColumnRight' );\n * ```\n */\nclass InsertColumnCommand extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Command {\n    /**\n     * Creates a new `InsertColumnCommand` instance.\n     *\n     * @param editor An editor on which this command will be used.\n     * @param options.order The order of insertion relative to the column in which the caret is located.\n     * Possible values: `\"left\"` and `\"right\"`. Default value is \"right\".\n     */\n    constructor(editor, options = {}) {\n        super(editor);\n        this.order = options.order || 'right';\n    }\n    /**\n     * @inheritDoc\n     */\n    refresh() {\n        const selection = this.editor.model.document.selection;\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const isAnyCellSelected = !!tableUtils.getSelectionAffectedTableCells(selection).length;\n        this.isEnabled = isAnyCellSelected;\n    }\n    /**\n     * Executes the command.\n     *\n     * Depending on the command's {@link #order} value, it inserts a column to the `'left'` or `'right'` of the column\n     * in which the selection is set.\n     *\n     * @fires execute\n     */\n    execute() {\n        const editor = this.editor;\n        const selection = editor.model.document.selection;\n        const tableUtils = editor.plugins.get('TableUtils');\n        const insertBefore = this.order === 'left';\n        const affectedTableCells = tableUtils.getSelectionAffectedTableCells(selection);\n        const columnIndexes = tableUtils.getColumnIndexes(affectedTableCells);\n        const column = insertBefore ? columnIndexes.first : columnIndexes.last;\n        const table = affectedTableCells[0].findAncestor('table');\n        tableUtils.insertColumns(table, { columns: 1, at: insertBefore ? column : column + 1 });\n    }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/commands/insertcolumncommand.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/commands/insertrowcommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ InsertRowCommand)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/commands/insertrowcommand\n */\n\n/**\n * The insert row command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'insertTableRowBelow'` and\n * `'insertTableRowAbove'` editor commands.\n *\n * To insert a row below the selected cell, execute the following command:\n *\n * ```ts\n * editor.execute( 'insertTableRowBelow' );\n * ```\n *\n * To insert a row above the selected cell, execute the following command:\n *\n * ```ts\n * editor.execute( 'insertTableRowAbove' );\n * ```\n */\nclass InsertRowCommand extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Command {\n    /**\n     * Creates a new `InsertRowCommand` instance.\n     *\n     * @param editor The editor on which this command will be used.\n     * @param options.order The order of insertion relative to the row in which the caret is located.\n     * Possible values: `\"above\"` and `\"below\"`. Default value is \"below\"\n     */\n    constructor(editor, options = {}) {\n        super(editor);\n        this.order = options.order || 'below';\n    }\n    /**\n     * @inheritDoc\n     */\n    refresh() {\n        const selection = this.editor.model.document.selection;\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const isAnyCellSelected = !!tableUtils.getSelectionAffectedTableCells(selection).length;\n        this.isEnabled = isAnyCellSelected;\n    }\n    /**\n     * Executes the command.\n     *\n     * Depending on the command's {@link #order} value, it inserts a row `'below'` or `'above'` the row in which selection is set.\n     *\n     * @fires execute\n     */\n    execute() {\n        const editor = this.editor;\n        const selection = editor.model.document.selection;\n        const tableUtils = editor.plugins.get('TableUtils');\n        const insertAbove = this.order === 'above';\n        const affectedTableCells = tableUtils.getSelectionAffectedTableCells(selection);\n        const rowIndexes = tableUtils.getRowIndexes(affectedTableCells);\n        const row = insertAbove ? rowIndexes.first : rowIndexes.last;\n        const table = affectedTableCells[0].findAncestor('table');\n        tableUtils.insertRows(table, { at: insertAbove ? row : row + 1, copyStructureFromAbove: !insertAbove });\n    }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/commands/insertrowcommand.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/commands/inserttablecommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ InsertTableCommand)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/commands/inserttablecommand\n */\n\n/**\n * The insert table command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'insertTable'` editor command.\n *\n * To insert a table at the current selection, execute the command and specify the dimensions:\n *\n * ```ts\n * editor.execute( 'insertTable', { rows: 20, columns: 5 } );\n * ```\n */\nclass InsertTableCommand extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Command {\n    /**\n     * @inheritDoc\n     */\n    refresh() {\n        const model = this.editor.model;\n        const selection = model.document.selection;\n        const schema = model.schema;\n        this.isEnabled = isAllowedInParent(selection, schema);\n    }\n    /**\n     * Executes the command.\n     *\n     * Inserts a table with the given number of rows and columns into the editor.\n     *\n     * @param options.rows The number of rows to create in the inserted table. Default value is 2.\n     * @param options.columns The number of columns to create in the inserted table. Default value is 2.\n     * @param options.headingRows The number of heading rows. If not provided it will default to\n     * {@link module:table/tableconfig~TableConfig#defaultHeadings `config.table.defaultHeadings.rows`} table config.\n     * @param options.headingColumns The number of heading columns. If not provided it will default to\n     * {@link module:table/tableconfig~TableConfig#defaultHeadings `config.table.defaultHeadings.columns`} table config.\n     * @fires execute\n     */\n    execute(options = {}) {\n        const editor = this.editor;\n        const model = editor.model;\n        const tableUtils = editor.plugins.get('TableUtils');\n        const defaultRows = editor.config.get('table.defaultHeadings.rows');\n        const defaultColumns = editor.config.get('table.defaultHeadings.columns');\n        if (options.headingRows === undefined && defaultRows) {\n            options.headingRows = defaultRows;\n        }\n        if (options.headingColumns === undefined && defaultColumns) {\n            options.headingColumns = defaultColumns;\n        }\n        model.change(writer => {\n            const table = tableUtils.createTable(writer, options);\n            model.insertObject(table, null, null, { findOptimalPosition: 'auto' });\n            writer.setSelection(writer.createPositionAt(table.getNodeByPath([0, 0, 0]), 0));\n        });\n    }\n}\n/**\n * Checks if the table is allowed in the parent.\n */\nfunction isAllowedInParent(selection, schema) {\n    const positionParent = selection.getFirstPosition().parent;\n    const validParent = positionParent === positionParent.root ? positionParent : positionParent.parent;\n    return schema.checkChild(validParent, 'table');\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/commands/inserttablecommand.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/commands/mergecellcommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ MergeCellCommand)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var _tablewalker__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tablewalker */ \"./node_modules/@ckeditor/ckeditor5-table/src/tablewalker.js\");\n/* harmony import */ var _utils_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/common */ \"./node_modules/@ckeditor/ckeditor5-table/src/utils/common.js\");\n/* harmony import */ var _utils_structure__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/structure */ \"./node_modules/@ckeditor/ckeditor5-table/src/utils/structure.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n\n\n\n/**\n * The merge cell command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'mergeTableCellRight'`, `'mergeTableCellLeft'`,\n * `'mergeTableCellUp'` and `'mergeTableCellDown'` editor commands.\n *\n * To merge a table cell at the current selection with another cell, execute the command corresponding with the preferred direction.\n *\n * For example, to merge with a cell to the right:\n *\n * ```ts\n * editor.execute( 'mergeTableCellRight' );\n * ```\n *\n * **Note**: If a table cell has a different [`rowspan`](https://www.w3.org/TR/html50/tabular-data.html#attr-tdth-rowspan)\n * (for `'mergeTableCellRight'` and `'mergeTableCellLeft'`) or [`colspan`](https://www.w3.org/TR/html50/tabular-data.html#attr-tdth-colspan)\n * (for `'mergeTableCellUp'` and `'mergeTableCellDown'`), the command will be disabled.\n */\nclass MergeCellCommand extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Command {\n    /**\n     * Creates a new `MergeCellCommand` instance.\n     *\n     * @param editor The editor on which this command will be used.\n     * @param options.direction Indicates which cell to merge with the currently selected one.\n     * Possible values are: `'left'`, `'right'`, `'up'` and `'down'`.\n     */\n    constructor(editor, options) {\n        super(editor);\n        this.direction = options.direction;\n        this.isHorizontal = this.direction == 'right' || this.direction == 'left';\n    }\n    /**\n     * @inheritDoc\n     */\n    refresh() {\n        const cellToMerge = this._getMergeableCell();\n        this.value = cellToMerge;\n        this.isEnabled = !!cellToMerge;\n    }\n    /**\n     * Executes the command.\n     *\n     * Depending on the command's {@link #direction} value, it will merge the cell that is to the `'left'`, `'right'`, `'up'` or `'down'`.\n     *\n     * @fires execute\n     */\n    execute() {\n        const model = this.editor.model;\n        const doc = model.document;\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const tableCell = tableUtils.getTableCellsContainingSelection(doc.selection)[0];\n        const cellToMerge = this.value;\n        const direction = this.direction;\n        model.change(writer => {\n            const isMergeNext = direction == 'right' || direction == 'down';\n            // The merge mechanism is always the same so sort cells to be merged.\n            const cellToExpand = (isMergeNext ? tableCell : cellToMerge);\n            const cellToRemove = (isMergeNext ? cellToMerge : tableCell);\n            // Cache the parent of cell to remove for later check.\n            const removedTableCellRow = cellToRemove.parent;\n            mergeTableCells(cellToRemove, cellToExpand, writer);\n            const spanAttribute = this.isHorizontal ? 'colspan' : 'rowspan';\n            const cellSpan = parseInt(tableCell.getAttribute(spanAttribute) || '1');\n            const cellToMergeSpan = parseInt(cellToMerge.getAttribute(spanAttribute) || '1');\n            // Update table cell span attribute and merge set selection on merged contents.\n            writer.setAttribute(spanAttribute, cellSpan + cellToMergeSpan, cellToExpand);\n            writer.setSelection(writer.createRangeIn(cellToExpand));\n            const tableUtils = this.editor.plugins.get('TableUtils');\n            const table = removedTableCellRow.findAncestor('table');\n            // Remove empty rows and columns after merging.\n            (0,_utils_structure__WEBPACK_IMPORTED_MODULE_3__.removeEmptyRowsColumns)(table, tableUtils);\n        });\n    }\n    /**\n     * Returns a cell that can be merged with the current cell depending on the command's direction.\n     */\n    _getMergeableCell() {\n        const model = this.editor.model;\n        const doc = model.document;\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const tableCell = tableUtils.getTableCellsContainingSelection(doc.selection)[0];\n        if (!tableCell) {\n            return;\n        }\n        // First get the cell on proper direction.\n        const cellToMerge = this.isHorizontal ?\n            getHorizontalCell(tableCell, this.direction, tableUtils) :\n            getVerticalCell(tableCell, this.direction, tableUtils);\n        if (!cellToMerge) {\n            return;\n        }\n        // If found check if the span perpendicular to merge direction is equal on both cells.\n        const spanAttribute = this.isHorizontal ? 'rowspan' : 'colspan';\n        const span = parseInt(tableCell.getAttribute(spanAttribute) || '1');\n        const cellToMergeSpan = parseInt(cellToMerge.getAttribute(spanAttribute) || '1');\n        if (cellToMergeSpan === span) {\n            return cellToMerge;\n        }\n    }\n}\n/**\n * Returns the cell that can be merged horizontally.\n */\nfunction getHorizontalCell(tableCell, direction, tableUtils) {\n    const tableRow = tableCell.parent;\n    const table = tableRow.parent;\n    const horizontalCell = direction == 'right' ? tableCell.nextSibling : tableCell.previousSibling;\n    const hasHeadingColumns = (table.getAttribute('headingColumns') || 0) > 0;\n    if (!horizontalCell) {\n        return;\n    }\n    // Sort cells:\n    const cellOnLeft = (direction == 'right' ? tableCell : horizontalCell);\n    const cellOnRight = (direction == 'right' ? horizontalCell : tableCell);\n    // Get their column indexes:\n    const { column: leftCellColumn } = tableUtils.getCellLocation(cellOnLeft);\n    const { column: rightCellColumn } = tableUtils.getCellLocation(cellOnRight);\n    const leftCellSpan = parseInt(cellOnLeft.getAttribute('colspan') || '1');\n    const isCellOnLeftInHeadingColumn = (0,_utils_common__WEBPACK_IMPORTED_MODULE_2__.isHeadingColumnCell)(tableUtils, cellOnLeft);\n    const isCellOnRightInHeadingColumn = (0,_utils_common__WEBPACK_IMPORTED_MODULE_2__.isHeadingColumnCell)(tableUtils, cellOnRight);\n    // We cannot merge heading columns cells with regular cells.\n    if (hasHeadingColumns && isCellOnLeftInHeadingColumn != isCellOnRightInHeadingColumn) {\n        return;\n    }\n    // The cell on the right must have index that is distant to the cell on the left by the left cell's width (colspan).\n    const cellsAreTouching = leftCellColumn + leftCellSpan === rightCellColumn;\n    // If the right cell's column index is different it means that there are rowspanned cells between them.\n    return cellsAreTouching ? horizontalCell : undefined;\n}\n/**\n * Returns the cell that can be merged vertically.\n */\nfunction getVerticalCell(tableCell, direction, tableUtils) {\n    const tableRow = tableCell.parent;\n    const table = tableRow.parent;\n    const rowIndex = table.getChildIndex(tableRow);\n    // Don't search for mergeable cell if direction points out of the table.\n    if ((direction == 'down' && rowIndex === tableUtils.getRows(table) - 1) || (direction == 'up' && rowIndex === 0)) {\n        return null;\n    }\n    const rowspan = parseInt(tableCell.getAttribute('rowspan') || '1');\n    const headingRows = table.getAttribute('headingRows') || 0;\n    const isMergeWithBodyCell = direction == 'down' && (rowIndex + rowspan) === headingRows;\n    const isMergeWithHeadCell = direction == 'up' && rowIndex === headingRows;\n    // Don't search for mergeable cell if direction points out of the current table section.\n    if (headingRows && (isMergeWithBodyCell || isMergeWithHeadCell)) {\n        return null;\n    }\n    const currentCellRowSpan = parseInt(tableCell.getAttribute('rowspan') || '1');\n    const rowOfCellToMerge = direction == 'down' ? rowIndex + currentCellRowSpan : rowIndex;\n    const tableMap = [...new _tablewalker__WEBPACK_IMPORTED_MODULE_1__[\"default\"](table, { endRow: rowOfCellToMerge })];\n    const currentCellData = tableMap.find(value => value.cell === tableCell);\n    const mergeColumn = currentCellData.column;\n    const cellToMergeData = tableMap.find(({ row, cellHeight, column }) => {\n        if (column !== mergeColumn) {\n            return false;\n        }\n        if (direction == 'down') {\n            // If merging a cell below the mergeRow is already calculated.\n            return row === rowOfCellToMerge;\n        }\n        else {\n            // If merging a cell above calculate if it spans to mergeRow.\n            return rowOfCellToMerge === row + cellHeight;\n        }\n    });\n    return cellToMergeData && cellToMergeData.cell ? cellToMergeData.cell : null;\n}\n/**\n * Merges two table cells. It will ensure that after merging cells with an empty paragraph, the resulting table cell will only have one\n * paragraph. If one of the merged table cells is empty, the merged table cell will have the contents of the non-empty table cell.\n * If both are empty, the merged table cell will have only one empty paragraph.\n */\nfunction mergeTableCells(cellToRemove, cellToExpand, writer) {\n    if (!isEmpty(cellToRemove)) {\n        if (isEmpty(cellToExpand)) {\n            writer.remove(writer.createRangeIn(cellToExpand));\n        }\n        writer.move(writer.createRangeIn(cellToRemove), writer.createPositionAt(cellToExpand, 'end'));\n    }\n    // Remove merged table cell.\n    writer.remove(cellToRemove);\n}\n/**\n * Checks if the passed table cell contains an empty paragraph.\n */\nfunction isEmpty(tableCell) {\n    const firstTableChild = tableCell.getChild(0);\n    return tableCell.childCount == 1 && firstTableChild.is('element', 'paragraph') && firstTableChild.isEmpty;\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/commands/mergecellcommand.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/commands/mergecellscommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ MergeCellsCommand)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var _tableutils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tableutils */ \"./node_modules/@ckeditor/ckeditor5-table/src/tableutils.js\");\n/* harmony import */ var _utils_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/common */ \"./node_modules/@ckeditor/ckeditor5-table/src/utils/common.js\");\n/* harmony import */ var _utils_structure__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/structure */ \"./node_modules/@ckeditor/ckeditor5-table/src/utils/structure.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n\n\n\n/**\n * The merge cells command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'mergeTableCells'` editor command.\n *\n * For example, to merge selected table cells:\n *\n * ```ts\n * editor.execute( 'mergeTableCells' );\n * ```\n */\nclass MergeCellsCommand extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Command {\n    /**\n     * @inheritDoc\n     */\n    refresh() {\n        const tableUtils = this.editor.plugins.get(_tableutils__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n        const selectedTableCells = tableUtils.getSelectedTableCells(this.editor.model.document.selection);\n        this.isEnabled = tableUtils.isSelectionRectangular(selectedTableCells);\n    }\n    /**\n     * Executes the command.\n     *\n     * @fires execute\n     */\n    execute() {\n        const model = this.editor.model;\n        const tableUtils = this.editor.plugins.get(_tableutils__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n        model.change(writer => {\n            const selectedTableCells = tableUtils.getSelectedTableCells(model.document.selection);\n            // All cells will be merged into the first one.\n            const firstTableCell = selectedTableCells.shift();\n            // Update target cell dimensions.\n            const { mergeWidth, mergeHeight } = getMergeDimensions(firstTableCell, selectedTableCells, tableUtils);\n            (0,_utils_common__WEBPACK_IMPORTED_MODULE_2__.updateNumericAttribute)('colspan', mergeWidth, firstTableCell, writer);\n            (0,_utils_common__WEBPACK_IMPORTED_MODULE_2__.updateNumericAttribute)('rowspan', mergeHeight, firstTableCell, writer);\n            for (const tableCell of selectedTableCells) {\n                mergeTableCells(tableCell, firstTableCell, writer);\n            }\n            const table = firstTableCell.findAncestor('table');\n            // Remove rows and columns that become empty (have no anchored cells).\n            (0,_utils_structure__WEBPACK_IMPORTED_MODULE_3__.removeEmptyRowsColumns)(table, tableUtils);\n            writer.setSelection(firstTableCell, 'in');\n        });\n    }\n}\n/**\n *  Merges two table cells. It will ensure that after merging cells with empty paragraphs the resulting table cell will only have one\n * paragraph. If one of the merged table cells is empty, the merged table cell will have contents of the non-empty table cell.\n * If both are empty, the merged table cell will have only one empty paragraph.\n */\nfunction mergeTableCells(cellBeingMerged, targetCell, writer) {\n    if (!isEmpty(cellBeingMerged)) {\n        if (isEmpty(targetCell)) {\n            writer.remove(writer.createRangeIn(targetCell));\n        }\n        writer.move(writer.createRangeIn(cellBeingMerged), writer.createPositionAt(targetCell, 'end'));\n    }\n    // Remove merged table cell.\n    writer.remove(cellBeingMerged);\n}\n/**\n * Checks if the passed table cell contains an empty paragraph.\n */\nfunction isEmpty(tableCell) {\n    const firstTableChild = tableCell.getChild(0);\n    return tableCell.childCount == 1 && firstTableChild.is('element', 'paragraph') && firstTableChild.isEmpty;\n}\nfunction getMergeDimensions(firstTableCell, selectedTableCells, tableUtils) {\n    let maxWidthOffset = 0;\n    let maxHeightOffset = 0;\n    for (const tableCell of selectedTableCells) {\n        const { row, column } = tableUtils.getCellLocation(tableCell);\n        maxWidthOffset = getMaxOffset(tableCell, column, maxWidthOffset, 'colspan');\n        maxHeightOffset = getMaxOffset(tableCell, row, maxHeightOffset, 'rowspan');\n    }\n    // Update table cell span attribute and merge set selection on a merged contents.\n    const { row: firstCellRow, column: firstCellColumn } = tableUtils.getCellLocation(firstTableCell);\n    const mergeWidth = maxWidthOffset - firstCellColumn;\n    const mergeHeight = maxHeightOffset - firstCellRow;\n    return { mergeWidth, mergeHeight };\n}\nfunction getMaxOffset(tableCell, start, currentMaxOffset, which) {\n    const dimensionValue = parseInt(tableCell.getAttribute(which) || '1');\n    return Math.max(currentMaxOffset, start + dimensionValue);\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/commands/mergecellscommand.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/commands/removecolumncommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ RemoveColumnCommand)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var _tablewalker__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tablewalker */ \"./node_modules/@ckeditor/ckeditor5-table/src/tablewalker.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/commands/removecolumncommand\n */\n\n\n/**\n * The remove column command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'removeTableColumn'` editor command.\n *\n * To remove the column containing the selected cell, execute the command:\n *\n * ```ts\n * editor.execute( 'removeTableColumn' );\n * ```\n */\nclass RemoveColumnCommand extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Command {\n    /**\n     * @inheritDoc\n     */\n    refresh() {\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const selectedCells = tableUtils.getSelectionAffectedTableCells(this.editor.model.document.selection);\n        const firstCell = selectedCells[0];\n        if (firstCell) {\n            const table = firstCell.findAncestor('table');\n            const tableColumnCount = tableUtils.getColumns(table);\n            const { first, last } = tableUtils.getColumnIndexes(selectedCells);\n            this.isEnabled = last - first < (tableColumnCount - 1);\n        }\n        else {\n            this.isEnabled = false;\n        }\n    }\n    /**\n     * @inheritDoc\n     */\n    execute() {\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const [firstCell, lastCell] = getBoundaryCells(this.editor.model.document.selection, tableUtils);\n        const table = firstCell.parent.parent;\n        // Cache the table before removing or updating colspans.\n        const tableMap = [...new _tablewalker__WEBPACK_IMPORTED_MODULE_1__[\"default\"](table)];\n        // Store column indexes of removed columns.\n        const removedColumnIndexes = {\n            first: tableMap.find(value => value.cell === firstCell).column,\n            last: tableMap.find(value => value.cell === lastCell).column\n        };\n        const cellToFocus = getCellToFocus(tableMap, firstCell, lastCell, removedColumnIndexes);\n        this.editor.model.change(writer => {\n            const columnsToRemove = removedColumnIndexes.last - removedColumnIndexes.first + 1;\n            tableUtils.removeColumns(table, {\n                at: removedColumnIndexes.first,\n                columns: columnsToRemove\n            });\n            writer.setSelection(writer.createPositionAt(cellToFocus, 0));\n        });\n    }\n}\n/**\n * Returns a proper table cell to focus after removing a column.\n * - selection is on last table cell it will return previous cell.\n */\nfunction getCellToFocus(tableMap, firstCell, lastCell, removedColumnIndexes) {\n    const colspan = parseInt(lastCell.getAttribute('colspan') || '1');\n    // If the table cell is spanned over 2+ columns - it will be truncated so the selection should\n    // stay in that cell.\n    if (colspan > 1) {\n        return lastCell;\n    }\n    // Normally, look for the cell in the same row that precedes the first cell to put selection there (\"column on the left\").\n    // If the deleted column is the first column of the table, there will be no predecessor: use the cell\n    // from the column that follows then (also in the same row).\n    else if (firstCell.previousSibling || lastCell.nextSibling) {\n        return lastCell.nextSibling || firstCell.previousSibling;\n    }\n    // It can happen that table cells have no siblings in a row, for instance, when there are row spans\n    // in the table (in the previous row). Then just look for the closest cell that is in a column\n    // that will not be removed to put the selection there.\n    else {\n        // Look for any cell in a column that precedes the first removed column.\n        if (removedColumnIndexes.first) {\n            return tableMap.reverse().find(({ column }) => {\n                return column < removedColumnIndexes.first;\n            }).cell;\n        }\n        // If the first removed column is the first column of the table, then\n        // look for any cell that is in a column that follows the last removed column.\n        else {\n            return tableMap.reverse().find(({ column }) => {\n                return column > removedColumnIndexes.last;\n            }).cell;\n        }\n    }\n}\n/**\n * Returns helper object returning the first and the last cell contained in given selection, based on DOM order.\n */\nfunction getBoundaryCells(selection, tableUtils) {\n    const referenceCells = tableUtils.getSelectionAffectedTableCells(selection);\n    const firstCell = referenceCells[0];\n    const lastCell = referenceCells.pop();\n    const returnValue = [firstCell, lastCell];\n    return firstCell.isBefore(lastCell) ? returnValue : returnValue.reverse();\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/commands/removecolumncommand.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/commands/removerowcommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ RemoveRowCommand)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/commands/removerowcommand\n */\n\n/**\n * The remove row command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'removeTableRow'` editor command.\n *\n * To remove the row containing the selected cell, execute the command:\n *\n * ```ts\n * editor.execute( 'removeTableRow' );\n * ```\n */\nclass RemoveRowCommand extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Command {\n    /**\n     * @inheritDoc\n     */\n    refresh() {\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const selectedCells = tableUtils.getSelectionAffectedTableCells(this.editor.model.document.selection);\n        const firstCell = selectedCells[0];\n        if (firstCell) {\n            const table = firstCell.findAncestor('table');\n            const tableRowCount = tableUtils.getRows(table);\n            const lastRowIndex = tableRowCount - 1;\n            const selectedRowIndexes = tableUtils.getRowIndexes(selectedCells);\n            const areAllRowsSelected = selectedRowIndexes.first === 0 && selectedRowIndexes.last === lastRowIndex;\n            // Disallow selecting whole table -> delete whole table should be used instead.\n            this.isEnabled = !areAllRowsSelected;\n        }\n        else {\n            this.isEnabled = false;\n        }\n    }\n    /**\n     * @inheritDoc\n     */\n    execute() {\n        const model = this.editor.model;\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const referenceCells = tableUtils.getSelectionAffectedTableCells(model.document.selection);\n        const removedRowIndexes = tableUtils.getRowIndexes(referenceCells);\n        const firstCell = referenceCells[0];\n        const table = firstCell.findAncestor('table');\n        const columnIndexToFocus = tableUtils.getCellLocation(firstCell).column;\n        model.change(writer => {\n            const rowsToRemove = removedRowIndexes.last - removedRowIndexes.first + 1;\n            tableUtils.removeRows(table, {\n                at: removedRowIndexes.first,\n                rows: rowsToRemove\n            });\n            const cellToFocus = getCellToFocus(table, removedRowIndexes.first, columnIndexToFocus, tableUtils.getRows(table));\n            writer.setSelection(writer.createPositionAt(cellToFocus, 0));\n        });\n    }\n}\n/**\n * Returns a cell that should be focused before removing the row, belonging to the same column as the currently focused cell.\n * - If the row was not the last one, the cell to focus will be in the row that followed it (before removal).\n * - If the row was the last one, the cell to focus will be in the row that preceded it (before removal).\n */\nfunction getCellToFocus(table, removedRowIndex, columnToFocus, tableRowCount) {\n    // Don't go beyond last row's index.\n    const row = table.getChild(Math.min(removedRowIndex, tableRowCount - 1));\n    // Default to first table cell.\n    let cellToFocus = row.getChild(0);\n    let column = 0;\n    for (const tableCell of row.getChildren()) {\n        if (column > columnToFocus) {\n            return cellToFocus;\n        }\n        cellToFocus = tableCell;\n        column += parseInt(tableCell.getAttribute('colspan') || '1');\n    }\n    return cellToFocus;\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/commands/removerowcommand.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/commands/selectcolumncommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ SelectColumnCommand)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var _tablewalker__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tablewalker */ \"./node_modules/@ckeditor/ckeditor5-table/src/tablewalker.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/commands/selectcolumncommand\n */\n\n\n/**\n * The select column command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'selectTableColumn'` editor command.\n *\n * To select the columns containing the selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'selectTableColumn' );\n * ```\n */\nclass SelectColumnCommand extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Command {\n    /**\n     * @inheritDoc\n     */\n    constructor(editor) {\n        super(editor);\n        // It does not affect data so should be enabled in read-only mode.\n        this.affectsData = false;\n    }\n    /**\n     * @inheritDoc\n     */\n    refresh() {\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const selectedCells = tableUtils.getSelectionAffectedTableCells(this.editor.model.document.selection);\n        this.isEnabled = selectedCells.length > 0;\n    }\n    /**\n     * @inheritDoc\n     */\n    execute() {\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const model = this.editor.model;\n        const referenceCells = tableUtils.getSelectionAffectedTableCells(model.document.selection);\n        const firstCell = referenceCells[0];\n        const lastCell = referenceCells.pop();\n        const table = firstCell.findAncestor('table');\n        const startLocation = tableUtils.getCellLocation(firstCell);\n        const endLocation = tableUtils.getCellLocation(lastCell);\n        const startColumn = Math.min(startLocation.column, endLocation.column);\n        const endColumn = Math.max(startLocation.column, endLocation.column);\n        const rangesToSelect = [];\n        for (const cellInfo of new _tablewalker__WEBPACK_IMPORTED_MODULE_1__[\"default\"](table, { startColumn, endColumn })) {\n            rangesToSelect.push(model.createRangeOn(cellInfo.cell));\n        }\n        model.change(writer => {\n            writer.setSelection(rangesToSelect);\n        });\n    }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/commands/selectcolumncommand.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/commands/selectrowcommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ SelectRowCommand)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/commands/selectrowcommand\n */\n\n/**\n * The select row command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'selectTableRow'` editor command.\n *\n * To select the rows containing the selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'selectTableRow' );\n * ```\n */\nclass SelectRowCommand extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Command {\n    /**\n     * @inheritDoc\n     */\n    constructor(editor) {\n        super(editor);\n        // It does not affect data so should be enabled in read-only mode.\n        this.affectsData = false;\n    }\n    /**\n     * @inheritDoc\n     */\n    refresh() {\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const selectedCells = tableUtils.getSelectionAffectedTableCells(this.editor.model.document.selection);\n        this.isEnabled = selectedCells.length > 0;\n    }\n    /**\n     * @inheritDoc\n     */\n    execute() {\n        const model = this.editor.model;\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const referenceCells = tableUtils.getSelectionAffectedTableCells(model.document.selection);\n        const rowIndexes = tableUtils.getRowIndexes(referenceCells);\n        const table = referenceCells[0].findAncestor('table');\n        const rangesToSelect = [];\n        for (let rowIndex = rowIndexes.first; rowIndex <= rowIndexes.last; rowIndex++) {\n            for (const cell of table.getChild(rowIndex).getChildren()) {\n                rangesToSelect.push(model.createRangeOn(cell));\n            }\n        }\n        model.change(writer => {\n            writer.setSelection(rangesToSelect);\n        });\n    }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/commands/selectrowcommand.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/commands/setheadercolumncommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ SetHeaderColumnCommand)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var _utils_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/common */ \"./node_modules/@ckeditor/ckeditor5-table/src/utils/common.js\");\n/* harmony import */ var _utils_structure__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/structure */ \"./node_modules/@ckeditor/ckeditor5-table/src/utils/structure.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/commands/setheadercolumncommand\n */\n\n\n\n/**\n * The header column command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'setTableColumnHeader'` editor command.\n *\n * You can make the column containing the selected cell a [header](https://www.w3.org/TR/html50/tabular-data.html#the-th-element)\n * by executing:\n *\n * ```ts\n * editor.execute( 'setTableColumnHeader' );\n * ```\n *\n * **Note:** All preceding columns will also become headers. If the current column is already a header, executing this command\n * will make it a regular column back again (including the following columns).\n */\nclass SetHeaderColumnCommand extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Command {\n    /**\n     * @inheritDoc\n     */\n    refresh() {\n        const model = this.editor.model;\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const selectedCells = tableUtils.getSelectionAffectedTableCells(model.document.selection);\n        const isInTable = selectedCells.length > 0;\n        this.isEnabled = isInTable;\n        this.value = isInTable && selectedCells.every(cell => (0,_utils_common__WEBPACK_IMPORTED_MODULE_1__.isHeadingColumnCell)(tableUtils, cell));\n    }\n    /**\n     * Executes the command.\n     *\n     * When the selection is in a non-header column, the command will set the `headingColumns` table attribute to cover that column.\n     *\n     * When the selection is already in a header column, it will set `headingColumns` so the heading section will end before that column.\n     *\n     * @fires execute\n     * @param options.forceValue If set, the command will set (`true`) or unset (`false`) the header columns according to\n     * the `forceValue` parameter instead of the current model state.\n     */\n    execute(options = {}) {\n        if (options.forceValue === this.value) {\n            return;\n        }\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const model = this.editor.model;\n        const selectedCells = tableUtils.getSelectionAffectedTableCells(model.document.selection);\n        const table = selectedCells[0].findAncestor('table');\n        const { first, last } = tableUtils.getColumnIndexes(selectedCells);\n        const headingColumnsToSet = this.value ? first : last + 1;\n        model.change(writer => {\n            if (headingColumnsToSet) {\n                // Changing heading columns requires to check if any of a heading cell is overlapping horizontally the table head.\n                // Any table cell that has a colspan attribute > 1 will not exceed the table head so we need to fix it in columns before.\n                const overlappingCells = (0,_utils_structure__WEBPACK_IMPORTED_MODULE_2__.getHorizontallyOverlappingCells)(table, headingColumnsToSet);\n                for (const { cell, column } of overlappingCells) {\n                    (0,_utils_structure__WEBPACK_IMPORTED_MODULE_2__.splitVertically)(cell, column, headingColumnsToSet, writer);\n                }\n            }\n            (0,_utils_common__WEBPACK_IMPORTED_MODULE_1__.updateNumericAttribute)('headingColumns', headingColumnsToSet, table, writer, 0);\n        });\n    }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/commands/setheadercolumncommand.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/commands/setheaderrowcommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ SetHeaderRowCommand)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var _utils_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/common */ \"./node_modules/@ckeditor/ckeditor5-table/src/utils/common.js\");\n/* harmony import */ var _utils_structure__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/structure */ \"./node_modules/@ckeditor/ckeditor5-table/src/utils/structure.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/commands/setheaderrowcommand\n */\n\n\n\n/**\n * The header row command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'setTableColumnHeader'` editor command.\n *\n * You can make the row containing the selected cell a [header](https://www.w3.org/TR/html50/tabular-data.html#the-th-element) by executing:\n *\n * ```ts\n * editor.execute( 'setTableRowHeader' );\n * ```\n *\n * **Note:** All preceding rows will also become headers. If the current row is already a header, executing this command\n * will make it a regular row back again (including the following rows).\n */\nclass SetHeaderRowCommand extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Command {\n    /**\n     * @inheritDoc\n     */\n    refresh() {\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const model = this.editor.model;\n        const selectedCells = tableUtils.getSelectionAffectedTableCells(model.document.selection);\n        const isInTable = selectedCells.length > 0;\n        this.isEnabled = isInTable;\n        this.value = isInTable && selectedCells.every(cell => this._isInHeading(cell, cell.parent.parent));\n    }\n    /**\n     * Executes the command.\n     *\n     * When the selection is in a non-header row, the command will set the `headingRows` table attribute to cover that row.\n     *\n     * When the selection is already in a header row, it will set `headingRows` so the heading section will end before that row.\n     *\n     * @fires execute\n     * @param options.forceValue If set, the command will set (`true`) or unset (`false`) the header rows according to\n     * the `forceValue` parameter instead of the current model state.\n     */\n    execute(options = {}) {\n        if (options.forceValue === this.value) {\n            return;\n        }\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const model = this.editor.model;\n        const selectedCells = tableUtils.getSelectionAffectedTableCells(model.document.selection);\n        const table = selectedCells[0].findAncestor('table');\n        const { first, last } = tableUtils.getRowIndexes(selectedCells);\n        const headingRowsToSet = this.value ? first : last + 1;\n        const currentHeadingRows = table.getAttribute('headingRows') || 0;\n        model.change(writer => {\n            if (headingRowsToSet) {\n                // Changing heading rows requires to check if any of a heading cell is overlapping vertically the table head.\n                // Any table cell that has a rowspan attribute > 1 will not exceed the table head so we need to fix it in rows below.\n                const startRow = headingRowsToSet > currentHeadingRows ? currentHeadingRows : 0;\n                const overlappingCells = (0,_utils_structure__WEBPACK_IMPORTED_MODULE_2__.getVerticallyOverlappingCells)(table, headingRowsToSet, startRow);\n                for (const { cell } of overlappingCells) {\n                    (0,_utils_structure__WEBPACK_IMPORTED_MODULE_2__.splitHorizontally)(cell, headingRowsToSet, writer);\n                }\n            }\n            (0,_utils_common__WEBPACK_IMPORTED_MODULE_1__.updateNumericAttribute)('headingRows', headingRowsToSet, table, writer, 0);\n        });\n    }\n    /**\n     * Checks if a table cell is in the heading section.\n     */\n    _isInHeading(tableCell, table) {\n        const headingRows = parseInt(table.getAttribute('headingRows') || '0');\n        return !!headingRows && tableCell.parent.index < headingRows;\n    }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/commands/setheaderrowcommand.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/commands/splitcellcommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ SplitCellCommand)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/commands/splitcellcommand\n */\n\n/**\n * The split cell command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'splitTableCellVertically'`\n * and `'splitTableCellHorizontally'`  editor commands.\n *\n * You can split any cell vertically or horizontally by executing this command. For example, to split the selected table cell vertically:\n *\n * ```ts\n * editor.execute( 'splitTableCellVertically' );\n * ```\n */\nclass SplitCellCommand extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Command {\n    /**\n     * Creates a new `SplitCellCommand` instance.\n     *\n     * @param editor The editor on which this command will be used.\n     * @param options.direction Indicates whether the command should split cells `'horizontally'` or `'vertically'`.\n     */\n    constructor(editor, options = {}) {\n        super(editor);\n        this.direction = options.direction || 'horizontally';\n    }\n    /**\n     * @inheritDoc\n     */\n    refresh() {\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const selectedCells = tableUtils.getSelectionAffectedTableCells(this.editor.model.document.selection);\n        this.isEnabled = selectedCells.length === 1;\n    }\n    /**\n     * @inheritDoc\n     */\n    execute() {\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const tableCell = tableUtils.getSelectionAffectedTableCells(this.editor.model.document.selection)[0];\n        const isHorizontal = this.direction === 'horizontally';\n        if (isHorizontal) {\n            tableUtils.splitCellHorizontally(tableCell, 2);\n        }\n        else {\n            tableUtils.splitCellVertically(tableCell, 2);\n        }\n    }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/commands/splitcellcommand.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/converters/downcast.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertParagraphInTableCell: () => (/* binding */ convertParagraphInTableCell),\n/* harmony export */   downcastCell: () => (/* binding */ downcastCell),\n/* harmony export */   downcastRow: () => (/* binding */ downcastRow),\n/* harmony export */   downcastTable: () => (/* binding */ downcastTable),\n/* harmony export */   isSingleParagraphWithoutAttributes: () => (/* binding */ isSingleParagraphWithoutAttributes)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/widget */ \"ckeditor5/src/widget.js\");\n/* harmony import */ var _tablewalker__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../tablewalker */ \"./node_modules/@ckeditor/ckeditor5-table/src/tablewalker.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/converters/downcast\n */\n\n\n/**\n * Model table element to view table element conversion helper.\n */\nfunction downcastTable(tableUtils, options) {\n    return (table, { writer }) => {\n        const headingRows = table.getAttribute('headingRows') || 0;\n        const tableElement = writer.createContainerElement('table', null, []);\n        const figureElement = writer.createContainerElement('figure', { class: 'table' }, tableElement);\n        // Table head slot.\n        if (headingRows > 0) {\n            writer.insert(writer.createPositionAt(tableElement, 'end'), writer.createContainerElement('thead', null, writer.createSlot(element => element.is('element', 'tableRow') && element.index < headingRows)));\n        }\n        // Table body slot.\n        if (headingRows < tableUtils.getRows(table)) {\n            writer.insert(writer.createPositionAt(tableElement, 'end'), writer.createContainerElement('tbody', null, writer.createSlot(element => element.is('element', 'tableRow') && element.index >= headingRows)));\n        }\n        // Dynamic slots.\n        for (const { positionOffset, filter } of options.additionalSlots) {\n            writer.insert(writer.createPositionAt(tableElement, positionOffset), writer.createSlot(filter));\n        }\n        // Create a slot with items that don't fit into the table.\n        writer.insert(writer.createPositionAt(tableElement, 'after'), writer.createSlot(element => {\n            if (element.is('element', 'tableRow')) {\n                return false;\n            }\n            return !options.additionalSlots.some(({ filter }) => filter(element));\n        }));\n        return options.asWidget ? toTableWidget(figureElement, writer) : figureElement;\n    };\n}\n/**\n * Model table row element to view `<tr>` element conversion helper.\n *\n * @returns Element creator.\n */\nfunction downcastRow() {\n    return (tableRow, { writer }) => {\n        return tableRow.isEmpty ?\n            writer.createEmptyElement('tr') :\n            writer.createContainerElement('tr');\n    };\n}\n/**\n * Model table cell element to view `<td>` or `<th>` element conversion helper.\n *\n * This conversion helper will create proper `<th>` elements for table cells that are in the heading section (heading row or column)\n * and `<td>` otherwise.\n *\n * @param options.asWidget If set to `true`, the downcast conversion will produce a widget.\n * @returns Element creator.\n */\nfunction downcastCell(options = {}) {\n    return (tableCell, { writer }) => {\n        const tableRow = tableCell.parent;\n        const table = tableRow.parent;\n        const rowIndex = table.getChildIndex(tableRow);\n        const tableWalker = new _tablewalker__WEBPACK_IMPORTED_MODULE_1__[\"default\"](table, { row: rowIndex });\n        const headingRows = table.getAttribute('headingRows') || 0;\n        const headingColumns = table.getAttribute('headingColumns') || 0;\n        let result = null;\n        // We need to iterate over a table in order to get proper row & column values from a walker.\n        for (const tableSlot of tableWalker) {\n            if (tableSlot.cell == tableCell) {\n                const isHeading = tableSlot.row < headingRows || tableSlot.column < headingColumns;\n                const cellElementName = isHeading ? 'th' : 'td';\n                result = options.asWidget ?\n                    (0,ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_0__.toWidgetEditable)(writer.createEditableElement(cellElementName), writer) :\n                    writer.createContainerElement(cellElementName);\n                break;\n            }\n        }\n        return result;\n    };\n}\n/**\n * Overrides paragraph inside table cell conversion.\n *\n * This converter:\n * * should be used to override default paragraph conversion.\n * * It will only convert `<paragraph>` placed directly inside `<tableCell>`.\n * * For a single paragraph without attributes it returns `<span>` to simulate data table.\n * * For all other cases it returns `<p>` element.\n *\n * @param options.asWidget If set to `true`, the downcast conversion will produce a widget.\n * @returns Element creator.\n */\nfunction convertParagraphInTableCell(options = {}) {\n    return (modelElement, { writer }) => {\n        if (!modelElement.parent.is('element', 'tableCell')) {\n            return null;\n        }\n        if (!isSingleParagraphWithoutAttributes(modelElement)) {\n            return null;\n        }\n        if (options.asWidget) {\n            return writer.createContainerElement('span', { class: 'ck-table-bogus-paragraph' });\n        }\n        else {\n            // Using `<p>` in case there are some markers on it and transparentRendering will render it anyway.\n            const viewElement = writer.createContainerElement('p');\n            writer.setCustomProperty('dataPipeline:transparentRendering', true, viewElement);\n            return viewElement;\n        }\n    };\n}\n/**\n * Checks if given model `<paragraph>` is an only child of a parent (`<tableCell>`) and if it has any attribute set.\n *\n * The paragraph should be converted in the editing view to:\n *\n * * If returned `true` - to a `<span class=\"ck-table-bogus-paragraph\">`\n * * If returned `false` - to a `<p>`\n */\nfunction isSingleParagraphWithoutAttributes(modelElement) {\n    const tableCell = modelElement.parent;\n    const isSingleParagraph = tableCell.childCount == 1;\n    return isSingleParagraph && !hasAnyAttribute(modelElement);\n}\n/**\n * Converts a given {@link module:engine/view/element~Element} to a table widget:\n * * Adds a {@link module:engine/view/element~Element#_setCustomProperty custom property} allowing to recognize the table widget element.\n * * Calls the {@link module:widget/utils~toWidget} function with the proper element's label creator.\n *\n * @param writer An instance of the view writer.\n * @param label The element's label. It will be concatenated with the table `alt` attribute if one is present.\n */\nfunction toTableWidget(viewElement, writer) {\n    writer.setCustomProperty('table', true, viewElement);\n    return (0,ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_0__.toWidget)(viewElement, writer, { hasSelectionHandle: true });\n}\n/**\n * Checks if an element has any attributes set.\n */\nfunction hasAnyAttribute(element) {\n    const iteratorItem = element.getAttributeKeys().next();\n    return !iteratorItem.done;\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/converters/downcast.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/converters/table-caption-post-fixer.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ injectTableCaptionPostFixer)\n/* harmony export */ });\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * Injects a table caption post-fixer into the model.\n *\n * The role of the table caption post-fixer is to ensure that the table with caption have the correct structure\n * after a {@link module:engine/model/model~Model#change `change()`} block was executed.\n *\n * The correct structure means that:\n *\n * * If there are many caption model element, they are merged into one model.\n * * A final, merged caption model is placed at the end of the table.\n */\nfunction injectTableCaptionPostFixer(model) {\n    model.document.registerPostFixer(writer => tableCaptionPostFixer(writer, model));\n}\n/**\n * The table caption post-fixer.\n */\nfunction tableCaptionPostFixer(writer, model) {\n    const changes = model.document.differ.getChanges();\n    let wasFixed = false;\n    for (const entry of changes) {\n        if (entry.type != 'insert') {\n            continue;\n        }\n        const positionParent = entry.position.parent;\n        if (positionParent.is('element', 'table') || entry.name == 'table') {\n            const table = (entry.name == 'table' ? entry.position.nodeAfter : positionParent);\n            const captionsToMerge = Array.from(table.getChildren())\n                .filter((child) => child.is('element', 'caption'));\n            const firstCaption = captionsToMerge.shift();\n            if (!firstCaption) {\n                continue;\n            }\n            // Move all the contents of the captions to the first one.\n            for (const caption of captionsToMerge) {\n                writer.move(writer.createRangeIn(caption), firstCaption, 'end');\n                writer.remove(caption);\n            }\n            // Make sure the final caption is at the end of the table.\n            if (firstCaption.nextSibling) {\n                writer.move(writer.createRangeOn(firstCaption), table, 'end');\n                wasFixed = true;\n            }\n            // Do we merged captions and/or moved the single caption to the end of the table?\n            wasFixed = !!captionsToMerge.length || wasFixed;\n        }\n    }\n    return wasFixed;\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/converters/table-caption-post-fixer.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/converters/table-cell-paragraph-post-fixer.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ injectTableCellParagraphPostFixer)\n/* harmony export */ });\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * Injects a table cell post-fixer into the model which inserts a `paragraph` element into empty table cells.\n *\n * A table cell must contain at least one block element as a child. An empty table cell will have an empty `paragraph` as a child.\n *\n * ```xml\n * <table>\n *   <tableRow>\n *      <tableCell></tableCell>\n *   </tableRow>\n * </table>\n * ```\n *\n * Will be fixed to:\n *\n * ```xml\n * <table>\n *   <tableRow>\n *      <tableCell><paragraph></paragraph></tableCell>\n *   </tableRow>\n * </table>\n * ```\n */\nfunction injectTableCellParagraphPostFixer(model) {\n    model.document.registerPostFixer(writer => tableCellContentsPostFixer(writer, model));\n}\n/**\n * The table cell contents post-fixer.\n */\nfunction tableCellContentsPostFixer(writer, model) {\n    const changes = model.document.differ.getChanges();\n    let wasFixed = false;\n    for (const entry of changes) {\n        if (entry.type == 'insert' && entry.name == 'table') {\n            wasFixed = fixTable(entry.position.nodeAfter, writer) || wasFixed;\n        }\n        if (entry.type == 'insert' && entry.name == 'tableRow') {\n            wasFixed = fixTableRow(entry.position.nodeAfter, writer) || wasFixed;\n        }\n        if (entry.type == 'insert' && entry.name == 'tableCell') {\n            wasFixed = fixTableCellContent(entry.position.nodeAfter, writer) || wasFixed;\n        }\n        if ((entry.type == 'remove' || entry.type == 'insert') && checkTableCellChange(entry)) {\n            wasFixed = fixTableCellContent(entry.position.parent, writer) || wasFixed;\n        }\n    }\n    return wasFixed;\n}\n/**\n * Fixes all table cells in a table.\n */\nfunction fixTable(table, writer) {\n    let wasFixed = false;\n    for (const row of table.getChildren()) {\n        if (row.is('element', 'tableRow')) {\n            wasFixed = fixTableRow(row, writer) || wasFixed;\n        }\n    }\n    return wasFixed;\n}\n/**\n * Fixes all table cells in a table row.\n */\nfunction fixTableRow(tableRow, writer) {\n    let wasFixed = false;\n    for (const tableCell of tableRow.getChildren()) {\n        wasFixed = fixTableCellContent(tableCell, writer) || wasFixed;\n    }\n    return wasFixed;\n}\n/**\n * Fixes all table cell content by:\n * - Adding a paragraph to a table cell without any child.\n * - Wrapping direct $text in a `<paragraph>`.\n */\nfunction fixTableCellContent(tableCell, writer) {\n    // Insert paragraph to an empty table cell.\n    if (tableCell.childCount == 0) {\n        // @if CK_DEBUG_TABLE // console.log( 'Post-fixing table: insert paragraph in empty cell.' );\n        writer.insertElement('paragraph', tableCell);\n        return true;\n    }\n    // Check table cell children for directly placed text nodes.\n    // Temporary solution. See https://github.com/ckeditor/ckeditor5/issues/1464.\n    const textNodes = Array.from(tableCell.getChildren()).filter(child => child.is('$text'));\n    // @if CK_DEBUG_TABLE // textNodes.length && console.log( 'Post-fixing table: wrap cell content with paragraph.' );\n    for (const child of textNodes) {\n        writer.wrap(writer.createRangeOn(child), 'paragraph');\n    }\n    // Return true when there were text nodes to fix.\n    return !!textNodes.length;\n}\n/**\n * Checks if a differ change should fix the table cell. This happens on:\n * - Removing content from the table cell (i.e. `tableCell` can be left empty).\n * - Adding a text node directly into a table cell.\n */\nfunction checkTableCellChange(entry) {\n    if (!entry.position.parent.is('element', 'tableCell')) {\n        return false;\n    }\n    return entry.type == 'insert' && entry.name == '$text' || entry.type == 'remove';\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/converters/table-cell-paragraph-post-fixer.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/converters/table-cell-refresh-handler.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ tableCellRefreshHandler)\n/* harmony export */ });\n/* harmony import */ var _downcast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./downcast */ \"./node_modules/@ckeditor/ckeditor5-table/src/converters/downcast.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * A table cell refresh handler which marks the table cell in the differ to have it re-rendered.\n *\n * Model `paragraph` inside a table cell can be rendered as `<span>` or `<p>`. It is rendered as `<span>` if this is the only block\n * element in that table cell and it does not have any attributes. It is rendered as `<p>` otherwise.\n *\n * When table cell content changes, for example a second `paragraph` element is added, we need to ensure that the first `paragraph` is\n * re-rendered so it changes from `<span>` to `<p>`. The easiest way to do it is to re-render the entire table cell.\n */\nfunction tableCellRefreshHandler(model, editing) {\n    const differ = model.document.differ;\n    // Stores cells to be refreshed, so the table cell will be refreshed once for multiple changes.\n    const cellsToCheck = new Set();\n    for (const change of differ.getChanges()) {\n        const parent = change.type == 'attribute' ? change.range.start.parent : change.position.parent;\n        if (parent.is('element', 'tableCell')) {\n            cellsToCheck.add(parent);\n        }\n    }\n    for (const tableCell of cellsToCheck.values()) {\n        const paragraphsToRefresh = Array.from(tableCell.getChildren())\n            .filter(child => shouldRefresh(child, editing.mapper));\n        for (const paragraph of paragraphsToRefresh) {\n            editing.reconvertItem(paragraph);\n        }\n    }\n}\n/**\n * Check if given model element needs refreshing.\n */\nfunction shouldRefresh(child, mapper) {\n    if (!child.is('element', 'paragraph')) {\n        return false;\n    }\n    const viewElement = mapper.toViewElement(child);\n    if (!viewElement) {\n        return false;\n    }\n    return (0,_downcast__WEBPACK_IMPORTED_MODULE_0__.isSingleParagraphWithoutAttributes)(child) !== viewElement.is('element', 'span');\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/converters/table-cell-refresh-handler.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/converters/table-headings-refresh-handler.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ tableHeadingsRefreshHandler)\n/* harmony export */ });\n/* harmony import */ var _tablewalker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tablewalker */ \"./node_modules/@ckeditor/ckeditor5-table/src/tablewalker.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * A table headings refresh handler which marks the table cells or rows in the differ to have it re-rendered\n * if the headings attribute changed.\n *\n * Table heading rows and heading columns are represented in the model by a `headingRows` and `headingColumns` attributes.\n *\n * When table headings attribute changes, all the cells/rows are marked to re-render to change between `<td>` and `<th>`.\n */\nfunction tableHeadingsRefreshHandler(model, editing) {\n    const differ = model.document.differ;\n    for (const change of differ.getChanges()) {\n        let table;\n        let isRowChange = false;\n        if (change.type == 'attribute') {\n            const element = change.range.start.nodeAfter;\n            if (!element || !element.is('element', 'table')) {\n                continue;\n            }\n            if (change.attributeKey != 'headingRows' && change.attributeKey != 'headingColumns') {\n                continue;\n            }\n            table = element;\n            isRowChange = change.attributeKey == 'headingRows';\n        }\n        else if (change.name == 'tableRow' || change.name == 'tableCell') {\n            table = change.position.findAncestor('table');\n            isRowChange = change.name == 'tableRow';\n        }\n        if (!table) {\n            continue;\n        }\n        const headingRows = table.getAttribute('headingRows') || 0;\n        const headingColumns = table.getAttribute('headingColumns') || 0;\n        const tableWalker = new _tablewalker__WEBPACK_IMPORTED_MODULE_0__[\"default\"](table);\n        for (const tableSlot of tableWalker) {\n            const isHeading = tableSlot.row < headingRows || tableSlot.column < headingColumns;\n            const expectedElementName = isHeading ? 'th' : 'td';\n            const viewElement = editing.mapper.toViewElement(tableSlot.cell);\n            if (viewElement && viewElement.is('element') && viewElement.name != expectedElementName) {\n                editing.reconvertItem((isRowChange ? tableSlot.cell.parent : tableSlot.cell));\n            }\n        }\n    }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/converters/table-headings-refresh-handler.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/converters/table-layout-post-fixer.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ injectTableLayoutPostFixer)\n/* harmony export */ });\n/* harmony import */ var _tablewalker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../tablewalker */ \"./node_modules/@ckeditor/ckeditor5-table/src/tablewalker.js\");\n/* harmony import */ var _utils_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/common */ \"./node_modules/@ckeditor/ckeditor5-table/src/utils/common.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n\n/**\n * Injects a table layout post-fixer into the model.\n *\n * The role of the table layout post-fixer is to ensure that the table rows have the correct structure\n * after a {@link module:engine/model/model~Model#change `change()`} block was executed.\n *\n * The correct structure means that:\n *\n * * All table rows have the same size.\n * * None of the table cells extend vertically beyond their section (either header or body).\n * * A table cell has always at least one element as a child.\n *\n * If the table structure is not correct, the post-fixer will automatically correct it in two steps:\n *\n * 1. It will clip table cells that extend beyond their section.\n * 2. It will add empty table cells to the rows that are narrower than the widest table row.\n *\n * ## Clipping overlapping table cells\n *\n * Such situation may occur when pasting a table (or a part of a table) to the editor from external sources.\n *\n * For example, see the following table which has a cell (FOO) with the rowspan attribute (2):\n *\n * ```xml\n * <table headingRows=\"1\">\n *   <tableRow>\n *     <tableCell rowspan=\"2\"><paragraph>FOO</paragraph></tableCell>\n *     <tableCell colspan=\"2\"><paragraph>BAR</paragraph></tableCell>\n *   </tableRow>\n *   <tableRow>\n *     <tableCell><paragraph>BAZ</paragraph></tableCell>\n *     <tableCell><paragraph>XYZ</paragraph></tableCell>\n *   </tableRow>\n * </table>\n * ```\n *\n * It will be rendered in the view as:\n *\n * ```xml\n * <table>\n *   <thead>\n *     <tr>\n *       <td rowspan=\"2\">FOO</td>\n *       <td colspan=\"2\">BAR</td>\n *     </tr>\n *   </thead>\n *   <tbody>\n *     <tr>\n *       <td>BAZ</td>\n *       <td>XYZ</td>\n *     </tr>\n *   </tbody>\n * </table>\n * ```\n *\n * In the above example the table will be rendered as a table with two rows: one in the header and second one in the body.\n * The table cell (FOO) cannot span over multiple rows as it would extend from the header to the body section.\n * The `rowspan` attribute must be changed to (1). The value (1) is the default value of the `rowspan` attribute\n * so the `rowspan` attribute will be removed from the model.\n *\n * The table cell with BAZ in the content will be in the first column of the table.\n *\n * ## Adding missing table cells\n *\n * The table post-fixer will insert empty table cells to equalize table row sizes (the number of columns).\n * The size of a table row is calculated by counting column spans of table cells, both horizontal (from the same row) and\n * vertical (from the rows above).\n *\n * In the above example, the table row in the body section of the table is narrower then the row from the header: it has two cells\n * with the default colspan (1). The header row has one cell with colspan (1) and the second with colspan (2).\n * The table cell (FOO) does not extend beyond the head section (and as such will be fixed in the first step of this post-fixer).\n * The post-fixer will add a missing table cell to the row in the body section of the table.\n *\n * The table from the above example will be fixed and rendered to the view as below:\n *\n * ```xml\n * <table>\n *   <thead>\n *     <tr>\n *       <td rowspan=\"2\">FOO</td>\n *       <td colspan=\"2\">BAR</td>\n *     </tr>\n *   </thead>\n *   <tbody>\n *     <tr>\n *       <td>BAZ</td>\n *       <td>XYZ</td>\n *     </tr>\n *   </tbody>\n * </table>\n * ```\n *\n * ## Collaboration and undo - Expectations vs post-fixer results\n *\n * The table post-fixer only ensures proper structure without a deeper analysis of the nature of the change. As such, it might lead\n * to a structure which was not intended by the user. In particular, it will also fix undo steps (in conjunction with collaboration)\n * in which the editor content might not return to the original state.\n *\n * This will usually happen when one or more users change the size of the table.\n *\n * As an example see the table below:\n *\n * ```xml\n * <table>\n *   <tbody>\n *     <tr>\n *       <td>11</td>\n *       <td>12</td>\n *     </tr>\n *     <tr>\n *       <td>21</td>\n *       <td>22</td>\n *     </tr>\n *   </tbody>\n * </table>\n * ```\n *\n * and the user actions:\n *\n * 1. Both users have a table with two rows and two columns.\n * 2. User A adds a column at the end of the table. This will insert empty table cells to two rows.\n * 3. User B adds a row at the end of the table. This will insert a row with two empty table cells.\n * 4. Both users will have a table as below:\n *\n * ```xml\n * <table>\n *   <tbody>\n *     <tr>\n *       <td>11</td>\n *       <td>12</td>\n *       <td>(empty, inserted by A)</td>\n *     </tr>\n *     <tr>\n *       <td>21</td>\n *       <td>22</td>\n *       <td>(empty, inserted by A)</td>\n *     </tr>\n *     <tr>\n *       <td>(empty, inserted by B)</td>\n *       <td>(empty, inserted by B)</td>\n *     </tr>\n *   </tbody>\n * </table>\n * ```\n *\n * The last row is shorter then others so the table post-fixer will add an empty row to the last row:\n *\n * ```xml\n * <table>\n *   <tbody>\n *     <tr>\n *       <td>11</td>\n *       <td>12</td>\n *       <td>(empty, inserted by A)</td>\n *     </tr>\n *     <tr>\n *       <td>21</td>\n *       <td>22</td>\n *       <td>(empty, inserted by A)</td>\n *     </tr>\n *     <tr>\n *       <td>(empty, inserted by B)</td>\n *       <td>(empty, inserted by B)</td>\n *       <td>(empty, inserted by the post-fixer)</td>\n *     </tr>\n *   </tbody>\n * </table>\n * ```\n *\n * Unfortunately undo does not know the nature of the changes and depending on which user applies the post-fixer changes, undoing them\n * might lead to a broken table. If User B undoes inserting the column to the table, the undo engine will undo only the operations of\n * inserting empty cells to rows from the initial table state (row 1 and 2) but the cell in the post-fixed row will remain:\n *\n * ```xml\n * <table>\n *   <tbody>\n *     <tr>\n *       <td>11</td>\n *       <td>12</td>\n *     </tr>\n *     <tr>\n *       <td>21</td>\n *       <td>22</td>\n *     </tr>\n *     <tr>\n *       <td>(empty, inserted by B)</td>\n *       <td>(empty, inserted by B)</td>\n *       <td>(empty, inserted by a post-fixer)</td>\n *     </tr>\n *   </tbody>\n * </table>\n * ```\n *\n * After undo, the table post-fixer will detect that two rows are shorter than others and will fix the table to:\n *\n * ```xml\n * <table>\n *   <tbody>\n *     <tr>\n *       <td>11</td>\n *       <td>12</td>\n *       <td>(empty, inserted by a post-fixer after undo)</td>\n *     </tr>\n *     <tr>\n *       <td>21</td>\n *       <td>22</td>\n *       <td>(empty, inserted by a post-fixer after undo)</td>\n *     </tr>\n *     <tr>\n *       <td>(empty, inserted by B)</td>\n *       <td>(empty, inserted by B)</td>\n *       <td>(empty, inserted by a post-fixer)</td>\n *     </tr>\n *   </tbody>\n * </table>\n * ```\n */\nfunction injectTableLayoutPostFixer(model) {\n    model.document.registerPostFixer(writer => tableLayoutPostFixer(writer, model));\n}\n/**\n * The table layout post-fixer.\n */\nfunction tableLayoutPostFixer(writer, model) {\n    const changes = model.document.differ.getChanges();\n    let wasFixed = false;\n    // Do not analyze the same table more then once - may happen for multiple changes in the same table.\n    const analyzedTables = new Set();\n    for (const entry of changes) {\n        let table = null;\n        if (entry.type == 'insert' && entry.name == 'table') {\n            table = entry.position.nodeAfter;\n        }\n        // Fix table on adding/removing table cells and rows.\n        if ((entry.type == 'insert' || entry.type == 'remove') && (entry.name == 'tableRow' || entry.name == 'tableCell')) {\n            table = entry.position.findAncestor('table');\n        }\n        // Fix table on any table's attribute change - including attributes of table cells.\n        if (isTableAttributeEntry(entry)) {\n            table = entry.range.start.findAncestor('table');\n        }\n        if (table && !analyzedTables.has(table)) {\n            // Step 1: correct rowspans of table cells if necessary.\n            // The wasFixed flag should be true if any of tables in batch was fixed - might be more then one.\n            wasFixed = fixTableCellsRowspan(table, writer) || wasFixed;\n            // Step 2: fix table rows sizes.\n            wasFixed = fixTableRowsSizes(table, writer) || wasFixed;\n            analyzedTables.add(table);\n        }\n    }\n    return wasFixed;\n}\n/**\n * Fixes the invalid value of the `rowspan` attribute because a table cell cannot vertically extend beyond the table section it belongs to.\n *\n * @returns Returns `true` if the table was fixed.\n */\nfunction fixTableCellsRowspan(table, writer) {\n    let wasFixed = false;\n    const cellsToTrim = findCellsToTrim(table);\n    if (cellsToTrim.length) {\n        // @if CK_DEBUG_TABLE // console.log( `Post-fixing table: trimming cells row-spans (${ cellsToTrim.length }).` );\n        wasFixed = true;\n        for (const data of cellsToTrim) {\n            (0,_utils_common__WEBPACK_IMPORTED_MODULE_1__.updateNumericAttribute)('rowspan', data.rowspan, data.cell, writer, 1);\n        }\n    }\n    return wasFixed;\n}\n/**\n * Makes all table rows in a table the same size.\n *\n * @returns Returns `true` if the table was fixed.\n */\nfunction fixTableRowsSizes(table, writer) {\n    let wasFixed = false;\n    const childrenLengths = getChildrenLengths(table);\n    const rowsToRemove = [];\n    // Find empty rows.\n    for (const [rowIndex, size] of childrenLengths.entries()) {\n        // Ignore all non-row models.\n        if (!size && table.getChild(rowIndex).is('element', 'tableRow')) {\n            rowsToRemove.push(rowIndex);\n        }\n    }\n    // Remove empty rows.\n    if (rowsToRemove.length) {\n        // @if CK_DEBUG_TABLE // console.log( `Post-fixing table: remove empty rows (${ rowsToRemove.length }).` );\n        wasFixed = true;\n        for (const rowIndex of rowsToRemove.reverse()) {\n            writer.remove(table.getChild(rowIndex));\n            childrenLengths.splice(rowIndex, 1);\n        }\n    }\n    // Filter out everything that's not a table row.\n    const rowsLengths = childrenLengths.filter((row, rowIndex) => table.getChild(rowIndex).is('element', 'tableRow'));\n    // Verify if all the rows have the same number of columns.\n    const tableSize = rowsLengths[0];\n    const isValid = rowsLengths.every(length => length === tableSize);\n    if (!isValid) {\n        // @if CK_DEBUG_TABLE // console.log( 'Post-fixing table: adding missing cells.' );\n        // Find the maximum number of columns.\n        const maxColumns = rowsLengths.reduce((prev, current) => current > prev ? current : prev, 0);\n        for (const [rowIndex, size] of rowsLengths.entries()) {\n            const columnsToInsert = maxColumns - size;\n            if (columnsToInsert) {\n                for (let i = 0; i < columnsToInsert; i++) {\n                    (0,_utils_common__WEBPACK_IMPORTED_MODULE_1__.createEmptyTableCell)(writer, writer.createPositionAt(table.getChild(rowIndex), 'end'));\n                }\n                wasFixed = true;\n            }\n        }\n    }\n    return wasFixed;\n}\n/**\n * Searches for table cells that extend beyond the table section to which they belong to. It will return an array of objects\n * that stores table cells to be trimmed and the correct value of the `rowspan` attribute to set.\n */\nfunction findCellsToTrim(table) {\n    const headingRows = parseInt(table.getAttribute('headingRows') || '0');\n    const maxRows = Array.from(table.getChildren())\n        .reduce((count, row) => row.is('element', 'tableRow') ? count + 1 : count, 0);\n    const cellsToTrim = [];\n    for (const { row, cell, cellHeight } of new _tablewalker__WEBPACK_IMPORTED_MODULE_0__[\"default\"](table)) {\n        // Skip cells that do not expand over its row.\n        if (cellHeight < 2) {\n            continue;\n        }\n        const isInHeader = row < headingRows;\n        // Row limit is either end of header section or whole table as table body is after the header.\n        const rowLimit = isInHeader ? headingRows : maxRows;\n        // If table cell expands over its limit reduce it height to proper value.\n        if (row + cellHeight > rowLimit) {\n            const newRowspan = rowLimit - row;\n            cellsToTrim.push({ cell, rowspan: newRowspan });\n        }\n    }\n    return cellsToTrim;\n}\n/**\n * Returns an array with lengths of rows assigned to the corresponding row index.\n */\nfunction getChildrenLengths(table) {\n    // TableWalker will not provide items for the empty rows, we need to pre-fill this array.\n    const lengths = new Array(table.childCount).fill(0);\n    for (const { rowIndex } of new _tablewalker__WEBPACK_IMPORTED_MODULE_0__[\"default\"](table, { includeAllSlots: true })) {\n        lengths[rowIndex]++;\n    }\n    return lengths;\n}\n/**\n * Checks if the differ entry for an attribute change is one of the table's attributes.\n */\nfunction isTableAttributeEntry(entry) {\n    if (entry.type !== 'attribute') {\n        return false;\n    }\n    const key = entry.attributeKey;\n    return key === 'headingRows' || key === 'colspan' || key === 'rowspan';\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/converters/table-layout-post-fixer.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/converters/tableproperties.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   downcastAttributeToStyle: () => (/* binding */ downcastAttributeToStyle),\n/* harmony export */   downcastTableAttribute: () => (/* binding */ downcastTableAttribute),\n/* harmony export */   upcastBorderStyles: () => (/* binding */ upcastBorderStyles),\n/* harmony export */   upcastStyleToAttribute: () => (/* binding */ upcastStyleToAttribute)\n/* harmony export */ });\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * Conversion helper for upcasting attributes using normalized styles.\n *\n * @param options.modelAttribute The attribute to set.\n * @param options.styleName The style name to convert.\n * @param options.viewElement The view element name that should be converted.\n * @param options.defaultValue The default value for the specified `modelAttribute`.\n * @param options.shouldUpcast The function which returns `true` if style should be upcasted from this element.\n */\nfunction upcastStyleToAttribute(conversion, options) {\n    const { modelAttribute, styleName, viewElement, defaultValue, reduceBoxSides = false, shouldUpcast = () => true } = options;\n    conversion.for('upcast').attributeToAttribute({\n        view: {\n            name: viewElement,\n            styles: {\n                [styleName]: /[\\s\\S]+/\n            }\n        },\n        model: {\n            key: modelAttribute,\n            value: (viewElement) => {\n                if (!shouldUpcast(viewElement)) {\n                    return;\n                }\n                const normalized = viewElement.getNormalizedStyle(styleName);\n                const value = reduceBoxSides ? reduceBoxSidesValue(normalized) : normalized;\n                if (defaultValue !== value) {\n                    return value;\n                }\n            }\n        }\n    });\n}\n/**\n * Conversion helper for upcasting border styles for view elements.\n *\n * @param defaultBorder The default border values.\n * @param defaultBorder.color The default `borderColor` value.\n * @param defaultBorder.style The default `borderStyle` value.\n * @param defaultBorder.width The default `borderWidth` value.\n */\nfunction upcastBorderStyles(conversion, viewElementName, modelAttributes, defaultBorder) {\n    conversion.for('upcast').add(dispatcher => dispatcher.on('element:' + viewElementName, (evt, data, conversionApi) => {\n        // If the element was not converted by element-to-element converter,\n        // we should not try to convert the style. See #8393.\n        if (!data.modelRange) {\n            return;\n        }\n        // Check the most detailed properties. These will be always set directly or\n        // when using the \"group\" properties like: `border-(top|right|bottom|left)` or `border`.\n        const stylesToConsume = [\n            'border-top-width',\n            'border-top-color',\n            'border-top-style',\n            'border-bottom-width',\n            'border-bottom-color',\n            'border-bottom-style',\n            'border-right-width',\n            'border-right-color',\n            'border-right-style',\n            'border-left-width',\n            'border-left-color',\n            'border-left-style'\n        ].filter(styleName => data.viewItem.hasStyle(styleName));\n        if (!stylesToConsume.length) {\n            return;\n        }\n        const matcherPattern = {\n            styles: stylesToConsume\n        };\n        // Try to consume appropriate values from consumable values list.\n        if (!conversionApi.consumable.test(data.viewItem, matcherPattern)) {\n            return;\n        }\n        const modelElement = [...data.modelRange.getItems({ shallow: true })].pop();\n        conversionApi.consumable.consume(data.viewItem, matcherPattern);\n        const normalizedBorder = {\n            style: data.viewItem.getNormalizedStyle('border-style'),\n            color: data.viewItem.getNormalizedStyle('border-color'),\n            width: data.viewItem.getNormalizedStyle('border-width')\n        };\n        const reducedBorder = {\n            style: reduceBoxSidesValue(normalizedBorder.style),\n            color: reduceBoxSidesValue(normalizedBorder.color),\n            width: reduceBoxSidesValue(normalizedBorder.width)\n        };\n        if (reducedBorder.style !== defaultBorder.style) {\n            conversionApi.writer.setAttribute(modelAttributes.style, reducedBorder.style, modelElement);\n        }\n        if (reducedBorder.color !== defaultBorder.color) {\n            conversionApi.writer.setAttribute(modelAttributes.color, reducedBorder.color, modelElement);\n        }\n        if (reducedBorder.width !== defaultBorder.width) {\n            conversionApi.writer.setAttribute(modelAttributes.width, reducedBorder.width, modelElement);\n        }\n    }));\n}\n/**\n * Conversion helper for downcasting an attribute to a style.\n */\nfunction downcastAttributeToStyle(conversion, options) {\n    const { modelElement, modelAttribute, styleName } = options;\n    conversion.for('downcast').attributeToAttribute({\n        model: {\n            name: modelElement,\n            key: modelAttribute\n        },\n        view: modelAttributeValue => ({\n            key: 'style',\n            value: {\n                [styleName]: modelAttributeValue\n            }\n        })\n    });\n}\n/**\n * Conversion helper for downcasting attributes from the model table to a view table (not to `<figure>`).\n */\nfunction downcastTableAttribute(conversion, options) {\n    const { modelAttribute, styleName } = options;\n    conversion.for('downcast').add(dispatcher => dispatcher.on(`attribute:${modelAttribute}:table`, (evt, data, conversionApi) => {\n        const { item, attributeNewValue } = data;\n        const { mapper, writer } = conversionApi;\n        if (!conversionApi.consumable.consume(data.item, evt.name)) {\n            return;\n        }\n        const table = [...mapper.toViewElement(item).getChildren()].find(child => child.is('element', 'table'));\n        if (attributeNewValue) {\n            writer.setStyle(styleName, attributeNewValue, table);\n        }\n        else {\n            writer.removeStyle(styleName, table);\n        }\n    }));\n}\n/**\n * Reduces the full top, right, bottom, left object to a single string if all sides are equal.\n * Returns original style otherwise.\n */\nfunction reduceBoxSidesValue(style) {\n    if (!style) {\n        return;\n    }\n    const sides = ['top', 'right', 'bottom', 'left'];\n    const allSidesDefined = sides.every(side => style[side]);\n    if (!allSidesDefined) {\n        return style;\n    }\n    const topSideStyle = style.top;\n    const allSidesEqual = sides.every(side => style[side] === topSideStyle);\n    if (!allSidesEqual) {\n        return style;\n    }\n    return topSideStyle;\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/converters/tableproperties.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/converters/upcasttable.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ upcastTable),\n/* harmony export */   ensureParagraphInTableCell: () => (/* binding */ ensureParagraphInTableCell),\n/* harmony export */   skipEmptyTableRow: () => (/* binding */ skipEmptyTableRow),\n/* harmony export */   upcastTableFigure: () => (/* binding */ upcastTableFigure)\n/* harmony export */ });\n/* harmony import */ var _utils_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/common */ \"./node_modules/@ckeditor/ckeditor5-table/src/utils/common.js\");\n/* harmony import */ var ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/utils */ \"ckeditor5/src/utils.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n\n/**\n * Returns a function that converts the table view representation:\n *\n * ```xml\n * <figure class=\"table\"><table>...</table></figure>\n * ```\n *\n * to the model representation:\n *\n * ```xml\n * <table></table>\n * ```\n */\nfunction upcastTableFigure() {\n    return (dispatcher) => {\n        dispatcher.on('element:figure', (evt, data, conversionApi) => {\n            // Do not convert if this is not a \"table figure\".\n            if (!conversionApi.consumable.test(data.viewItem, { name: true, classes: 'table' })) {\n                return;\n            }\n            // Find a table element inside the figure element.\n            const viewTable = getViewTableFromFigure(data.viewItem);\n            // Do not convert if table element is absent or was already converted.\n            if (!viewTable || !conversionApi.consumable.test(viewTable, { name: true })) {\n                return;\n            }\n            // Consume the figure to prevent other converters from processing it again.\n            conversionApi.consumable.consume(data.viewItem, { name: true, classes: 'table' });\n            // Convert view table to model table.\n            const conversionResult = conversionApi.convertItem(viewTable, data.modelCursor);\n            // Get table element from conversion result.\n            const modelTable = (0,ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_1__.first)(conversionResult.modelRange.getItems());\n            // When table wasn't successfully converted then finish conversion.\n            if (!modelTable) {\n                // Revert consumed figure so other features can convert it.\n                conversionApi.consumable.revert(data.viewItem, { name: true, classes: 'table' });\n                return;\n            }\n            conversionApi.convertChildren(data.viewItem, conversionApi.writer.createPositionAt(modelTable, 'end'));\n            conversionApi.updateConversionResult(modelTable, data);\n        });\n    };\n}\n/**\n * View table element to model table element conversion helper.\n *\n * This conversion helper converts the table element as well as table rows.\n *\n * @returns Conversion helper.\n */\nfunction upcastTable() {\n    return (dispatcher) => {\n        dispatcher.on('element:table', (evt, data, conversionApi) => {\n            const viewTable = data.viewItem;\n            // When element was already consumed then skip it.\n            if (!conversionApi.consumable.test(viewTable, { name: true })) {\n                return;\n            }\n            const { rows, headingRows, headingColumns } = scanTable(viewTable);\n            // Only set attributes if values is greater then 0.\n            const attributes = {};\n            if (headingColumns) {\n                attributes.headingColumns = headingColumns;\n            }\n            if (headingRows) {\n                attributes.headingRows = headingRows;\n            }\n            const table = conversionApi.writer.createElement('table', attributes);\n            if (!conversionApi.safeInsert(table, data.modelCursor)) {\n                return;\n            }\n            conversionApi.consumable.consume(viewTable, { name: true });\n            // Upcast table rows in proper order (heading rows first).\n            rows.forEach(row => conversionApi.convertItem(row, conversionApi.writer.createPositionAt(table, 'end')));\n            // Convert everything else.\n            conversionApi.convertChildren(viewTable, conversionApi.writer.createPositionAt(table, 'end'));\n            // Create one row and one table cell for empty table.\n            if (table.isEmpty) {\n                const row = conversionApi.writer.createElement('tableRow');\n                conversionApi.writer.insert(row, conversionApi.writer.createPositionAt(table, 'end'));\n                (0,_utils_common__WEBPACK_IMPORTED_MODULE_0__.createEmptyTableCell)(conversionApi.writer, conversionApi.writer.createPositionAt(row, 'end'));\n            }\n            conversionApi.updateConversionResult(table, data);\n        });\n    };\n}\n/**\n * A conversion helper that skips empty <tr> elements from upcasting at the beginning of the table.\n *\n * An empty row is considered a table model error but when handling clipboard data there could be rows that contain only row-spanned cells\n * and empty TR-s are used to maintain the table structure (also {@link module:table/tablewalker~TableWalker} assumes that there are only\n * rows that have related `tableRow` elements).\n *\n * *Note:* Only the first empty rows are removed because they have no meaning and it solves the issue\n * of an improper table with all empty rows.\n *\n * @returns Conversion helper.\n */\nfunction skipEmptyTableRow() {\n    return (dispatcher) => {\n        dispatcher.on('element:tr', (evt, data) => {\n            if (data.viewItem.isEmpty && data.modelCursor.index == 0) {\n                evt.stop();\n            }\n        }, { priority: 'high' });\n    };\n}\n/**\n * A converter that ensures an empty paragraph is inserted in a table cell if no other content was converted.\n *\n * @returns Conversion helper.\n */\nfunction ensureParagraphInTableCell(elementName) {\n    return (dispatcher) => {\n        dispatcher.on(`element:${elementName}`, (evt, data, { writer }) => {\n            // The default converter will create a model range on converted table cell.\n            if (!data.modelRange) {\n                return;\n            }\n            const tableCell = data.modelRange.start.nodeAfter;\n            const modelCursor = writer.createPositionAt(tableCell, 0);\n            // Ensure a paragraph in the model for empty table cells for converted table cells.\n            if (data.viewItem.isEmpty) {\n                writer.insertElement('paragraph', modelCursor);\n                return;\n            }\n            const childNodes = Array.from(tableCell.getChildren());\n            // In case there are only markers inside the table cell then move them to the paragraph.\n            if (childNodes.every(node => node.is('element', '$marker'))) {\n                const paragraph = writer.createElement('paragraph');\n                writer.insert(paragraph, writer.createPositionAt(tableCell, 0));\n                for (const node of childNodes) {\n                    writer.move(writer.createRangeOn(node), writer.createPositionAt(paragraph, 'end'));\n                }\n            }\n        }, { priority: 'low' });\n    };\n}\n/**\n * Get view `<table>` element from the view widget (`<figure>`).\n */\nfunction getViewTableFromFigure(figureView) {\n    for (const figureChild of figureView.getChildren()) {\n        if (figureChild.is('element', 'table')) {\n            return figureChild;\n        }\n    }\n}\n/**\n * Scans table rows and extracts required metadata from the table:\n *\n * headingRows    - The number of rows that go as table headers.\n * headingColumns - The maximum number of row headings.\n * rows           - Sorted `<tr>` elements as they should go into the model - ie. if `<thead>` is inserted after `<tbody>` in the view.\n */\nfunction scanTable(viewTable) {\n    let headingRows = 0;\n    let headingColumns = undefined;\n    // The `<tbody>` and `<thead>` sections in the DOM do not have to be in order `<thead>` -> `<tbody>` and there might be more than one\n    // of them.\n    // As the model does not have these sections, rows from different sections must be sorted.\n    // For example, below is a valid HTML table:\n    //\n    // <table>\n    //   <tbody><tr><td>2</td></tr></tbody>\n    //   <thead><tr><td>1</td></tr></thead>\n    //   <tbody><tr><td>3</td></tr></tbody>\n    // </table>\n    //\n    // But browsers will render rows in order as: 1 as the heading and 2 and 3 as the body.\n    const headRows = [];\n    const bodyRows = [];\n    // Currently the editor does not support more then one <thead> section.\n    // Only the first <thead> from the view will be used as a heading row and the others will be converted to body rows.\n    let firstTheadElement;\n    for (const tableChild of Array.from(viewTable.getChildren())) {\n        // Only `<thead>`, `<tbody>` & `<tfoot>` from allowed table children can have `<tr>`s.\n        // The else is for future purposes (mainly `<caption>`).\n        if (tableChild.name !== 'tbody' && tableChild.name !== 'thead' && tableChild.name !== 'tfoot') {\n            continue;\n        }\n        // Save the first `<thead>` in the table as table header - all other ones will be converted to table body rows.\n        if (tableChild.name === 'thead' && !firstTheadElement) {\n            firstTheadElement = tableChild;\n        }\n        // There might be some extra empty text nodes between the `<tr>`s.\n        // Make sure further code operates on `tr`s only. (#145)\n        const trs = Array.from(tableChild.getChildren()).filter((el) => el.is('element', 'tr'));\n        for (const tr of trs) {\n            // This <tr> is a child of a first <thead> element.\n            if ((firstTheadElement && tableChild === firstTheadElement) ||\n                (tableChild.name === 'tbody' &&\n                    Array.from(tr.getChildren()).length &&\n                    Array.from(tr.getChildren()).every(e => e.is('element', 'th')))) {\n                headingRows++;\n                headRows.push(tr);\n            }\n            else {\n                bodyRows.push(tr);\n                // For other rows check how many column headings this row has.\n                const headingCols = scanRowForHeadingColumns(tr);\n                if (!headingColumns || headingCols < headingColumns) {\n                    headingColumns = headingCols;\n                }\n            }\n        }\n    }\n    return {\n        headingRows,\n        headingColumns: headingColumns || 0,\n        rows: [...headRows, ...bodyRows]\n    };\n}\n/**\n * Scans a `<tr>` element and its children for metadata:\n * - For heading row:\n *     - Adds this row to either the heading or the body rows.\n *     - Updates the number of heading rows.\n * - For body rows:\n *     - Calculates the number of column headings.\n */\nfunction scanRowForHeadingColumns(tr) {\n    let headingColumns = 0;\n    let index = 0;\n    // Filter out empty text nodes from tr children.\n    const children = Array.from(tr.getChildren())\n        .filter(child => child.name === 'th' || child.name === 'td');\n    // Count starting adjacent <th> elements of a <tr>.\n    while (index < children.length && children[index].name === 'th') {\n        const th = children[index];\n        // Adjust columns calculation by the number of spanned columns.\n        const colspan = parseInt(th.getAttribute('colspan') || '1');\n        headingColumns = headingColumns + colspan;\n        index++;\n    }\n    return headingColumns;\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/converters/upcasttable.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PlainTableOutput: () => (/* reexport safe */ _plaintableoutput__WEBPACK_IMPORTED_MODULE_0__["default"]),\n/* harmony export */   Table: () => (/* reexport safe */ _table__WEBPACK_IMPORTED_MODULE_1__["default"]),\n/* harmony export */   TableCaption: () => (/* reexport safe */ _tablecaption__WEBPACK_IMPORTED_MODULE_12__["default"]),\n/* harmony export */   TableCaptionEditing: () => (/* reexport safe */ _tablecaption_tablecaptionediting__WEBPACK_IMPORTED_MODULE_13__["default"]),\n/* harmony export */   TableCaptionUI: () => (/* reexport safe */ _tablecaption_tablecaptionui__WEBPACK_IMPORTED_MODULE_14__["default"]),\n/* harmony export */   TableCellProperties: () => (/* reexport safe */ _tablecellproperties__WEBPACK_IMPORTED_MODULE_5__["default"]),\n/* harmony export */   TableCellPropertiesEditing: () => (/* reexport safe */ _tablecellproperties_tablecellpropertiesediting__WEBPACK_IMPORTED_MODULE_6__["default"]),\n/* harmony export */   TableCellPropertiesUI: () => (/* reexport safe */ _tablecellproperties_tablecellpropertiesui__WEBPACK_IMPORTED_MODULE_7__["default"]),\n/* harmony export */   TableCellWidthEditing: () => (/* reexport safe */ _tablecellwidth_tablecellwidthediting__WEBPACK_IMPORTED_MODULE_8__["default"]),\n/* harmony export */   TableClipboard: () => (/* reexport safe */ _tableclipboard__WEBPACK_IMPORTED_MODULE_15__["default"]),\n/* harmony export */   TableColumnResize: () => (/* reexport safe */ _tablecolumnresize__WEBPACK_IMPORTED_MODULE_20__["default"]),\n/* harmony export */   TableColumnResizeEditing: () => (/* reexport safe */ _tablecolumnresize_tablecolumnresizeediting__WEBPACK_IMPORTED_MODULE_21__["default"]),\n/* harmony export */   TableEditing: () => (/* reexport safe */ _tableediting__WEBPACK_IMPORTED_MODULE_2__["default"]),\n/* harmony export */   TableKeyboard: () => (/* reexport safe */ _tablekeyboard__WEBPACK_IMPORTED_MODULE_17__["default"]),\n/* harmony export */   TableMouse: () => (/* reexport safe */ _tablemouse__WEBPACK_IMPORTED_MODULE_16__["default"]),\n/* harmony export */   TableProperties: () => (/* reexport safe */ _tableproperties__WEBPACK_IMPORTED_MODULE_9__["default"]),\n/* harmony export */   TablePropertiesEditing: () => (/* reexport safe */ _tableproperties_tablepropertiesediting__WEBPACK_IMPORTED_MODULE_10__["default"]),\n/* harmony export */   TablePropertiesUI: () => (/* reexport safe */ _tableproperties_tablepropertiesui__WEBPACK_IMPORTED_MODULE_11__["default"]),\n/* harmony export */   TableSelection: () => (/* reexport safe */ _tableselection__WEBPACK_IMPORTED_MODULE_18__["default"]),\n/* harmony export */   TableToolbar: () => (/* reexport safe */ _tabletoolbar__WEBPACK_IMPORTED_MODULE_4__["default"]),\n/* harmony export */   TableUI: () => (/* reexport safe */ _tableui__WEBPACK_IMPORTED_MODULE_3__["default"]),\n/* harmony export */   TableUtils: () => (/* reexport safe */ _tableutils__WEBPACK_IMPORTED_MODULE_19__["default"])\n/* harmony export */ });\n/* harmony import */ var _plaintableoutput__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./plaintableoutput */ "./node_modules/@ckeditor/ckeditor5-table/src/plaintableoutput.js");\n/* harmony import */ var _table__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./table */ "./node_modules/@ckeditor/ckeditor5-table/src/table.js");\n/* harmony import */ var _tableediting__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tableediting */ "./node_modules/@ckeditor/ckeditor5-table/src/tableediting.js");\n/* harmony import */ var _tableui__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tableui */ "./node_modules/@ckeditor/ckeditor5-table/src/tableui.js");\n/* harmony import */ var _tabletoolbar__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./tabletoolbar */ "./node_modules/@ckeditor/ckeditor5-table/src/tabletoolbar.js");\n/* harmony import */ var _tablecellproperties__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./tablecellproperties */ "./node_modules/@ckeditor/ckeditor5-table/src/tablecellproperties.js");\n/* harmony import */ var _tablecellproperties_tablecellpropertiesediting__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./tablecellproperties/tablecellpropertiesediting */ "./node_modules/@ckeditor/ckeditor5-table/src/tablecellproperties/tablecellpropertiesediting.js");\n/* harmony import */ var _tablecellproperties_tablecellpropertiesui__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./tablecellproperties/tablecellpropertiesui */ "./node_modules/@ckeditor/ckeditor5-table/src/tablecellproperties/tablecellpropertiesui.js");\n/* harmony import */ var _tablecellwidth_tablecellwidthediting__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./tablecellwidth/tablecellwidthediting */ "./node_modules/@ckeditor/ckeditor5-table/src/tablecellwidth/tablecellwidthediting.js");\n/* harmony import */ var _tableproperties__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./tableproperties */ "./node_modules/@ckeditor/ckeditor5-table/src/tableproperties.js");\n/* harmony import */ var _tableproperties_tablepropertiesediting__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./tableproperties/tablepropertiesediting */ "./node_modules/@ckeditor/ckeditor5-table/src/tableproperties/tablepropertiesediting.js");\n/* harmony import */ var _tableproperties_tablepropertiesui__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./tableproperties/tablepropertiesui */ "./node_modules/@ckeditor/ckeditor5-table/src/tableproperties/tablepropertiesui.js");\n/* harmony import */ var _tablecaption__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./tablecaption */ "./node_modules/@ckeditor/ckeditor5-table/src/tablecaption.js");\n/* harmony import */ var _tablecaption_tablecaptionediting__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./tablecaption/tablecaptionediting */ "./node_modules/@ckeditor/ckeditor5-table/src/tablecaption/tablecaptionediting.js");\n/* harmony import */ var _tablecaption_tablecaptionui__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./tablecaption/tablecaptionui */ "./node_modules/@ckeditor/ckeditor5-table/src/tablecaption/tablecaptionui.js");\n/* harmony import */ var _tableclipboard__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./tableclipboard */ "./node_modules/@ckeditor/ckeditor5-table/src/tableclipboard.js");\n/* harmony import */ var _tablemouse__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./tablemouse */ "./node_modules/@ckeditor/ckeditor5-table/src/tablemouse.js");\n/* harmony import */ var _tablekeyboard__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./tablekeyboard */ "./node_modules/@ckeditor/ckeditor5-table/src/tablekeyboard.js");\n/* harmony import */ var _tableselection__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./tableselection */ "./node_modules/@ckeditor/ckeditor5-table/src/tableselection.js");\n/* harmony import */ var _tableutils__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./tableutils */ "./node_modules/@ckeditor/ckeditor5-table/src/tableutils.js");\n/* harmony import */ var _tablecolumnresize__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./tablecolumnresize */ "./node_modules/@ckeditor/ckeditor5-table/src/tablecolumnresize.js");\n/* harmony import */ var _tablecolumnresize_tablecolumnresizeediting__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./tablecolumnresize/tablecolumnresizeediting */ "./node_modules/@ckeditor/ckeditor5-table/src/tablecolumnresize/tablecolumnresizeediting.js");\n/* harmony import */ var _augmentation__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./augmentation */ "./node_modules/@ckeditor/ckeditor5-table/src/augmentation.js");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/index.js?')},"./node_modules/@ckeditor/ckeditor5-table/src/plaintableoutput.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ PlainTableOutput)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var _table__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./table */ \"./node_modules/@ckeditor/ckeditor5-table/src/table.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/plaintableoutput\n */\n\n\n/**\n * The plain table output feature.\n */\nclass PlainTableOutput extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'PlainTableOutput';\n    }\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [_table__WEBPACK_IMPORTED_MODULE_1__[\"default\"]];\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        // Override default table data downcast converter.\n        editor.conversion.for('dataDowncast').elementToStructure({\n            model: 'table',\n            view: downcastTableElement,\n            converterPriority: 'high'\n        });\n        // Make sure table <caption> is downcasted into <caption> in the data pipeline when necessary.\n        if (editor.plugins.has('TableCaption')) {\n            editor.conversion.for('dataDowncast').elementToElement({\n                model: 'caption',\n                view: (modelElement, { writer }) => {\n                    if (modelElement.parent.name === 'table') {\n                        return writer.createContainerElement('caption');\n                    }\n                },\n                converterPriority: 'high'\n            });\n        }\n        // Handle border-style, border-color, border-width and background-color table attributes.\n        if (editor.plugins.has('TableProperties')) {\n            downcastTableBorderAndBackgroundAttributes(editor);\n        }\n    }\n}\n/**\n * The plain table downcast converter callback.\n *\n * @param table Table model element.\n * @param conversionApi The conversion API object.\n * @returns Created element.\n */\nfunction downcastTableElement(table, { writer }) {\n    const headingRows = table.getAttribute('headingRows') || 0;\n    // Table head rows slot.\n    const headRowsSlot = writer.createSlot((element) => element.is('element', 'tableRow') && element.index < headingRows);\n    // Table body rows slot.\n    const bodyRowsSlot = writer.createSlot((element) => element.is('element', 'tableRow') && element.index >= headingRows);\n    // Table children slot.\n    const childrenSlot = writer.createSlot((element) => !element.is('element', 'tableRow'));\n    // Table <thead> element with all the heading rows.\n    const theadElement = writer.createContainerElement('thead', null, headRowsSlot);\n    // Table <tbody> element with all the body rows.\n    const tbodyElement = writer.createContainerElement('tbody', null, bodyRowsSlot);\n    // Table contents element containing <thead> and <tbody> when necessary.\n    const tableContentElements = [];\n    if (headingRows) {\n        tableContentElements.push(theadElement);\n    }\n    if (headingRows < table.childCount) {\n        tableContentElements.push(tbodyElement);\n    }\n    // Create table structure.\n    //\n    // <table>\n    //    {children-slot-like-caption}\n    //    <thead>\n    //        {table-head-rows-slot}\n    //    </thead>\n    //    <tbody>\n    //        {table-body-rows-slot}\n    //    </tbody>\n    // </table>\n    return writer.createContainerElement('table', null, [childrenSlot, ...tableContentElements]);\n}\n/**\n * Register table border and background attributes converters.\n */\nfunction downcastTableBorderAndBackgroundAttributes(editor) {\n    const modelAttributes = {\n        'border-width': 'tableBorderWidth',\n        'border-color': 'tableBorderColor',\n        'border-style': 'tableBorderStyle',\n        'background-color': 'tableBackgroundColor'\n    };\n    for (const [styleName, modelAttribute] of Object.entries(modelAttributes)) {\n        editor.conversion.for('dataDowncast').add(dispatcher => {\n            return dispatcher.on(`attribute:${modelAttribute}:table`, (evt, data, conversionApi) => {\n                const { item, attributeNewValue } = data;\n                const { mapper, writer } = conversionApi;\n                if (!conversionApi.consumable.consume(item, evt.name)) {\n                    return;\n                }\n                const table = mapper.toViewElement(item);\n                if (attributeNewValue) {\n                    writer.setStyle(styleName, attributeNewValue, table);\n                }\n                else {\n                    writer.removeStyle(styleName, table);\n                }\n            }, { priority: 'high' });\n        });\n    }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/plaintableoutput.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/table.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ Table)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/* harmony import */ var ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/widget */ "ckeditor5/src/widget.js");\n/* harmony import */ var _tableediting__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tableediting */ "./node_modules/@ckeditor/ckeditor5-table/src/tableediting.js");\n/* harmony import */ var _tableui__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tableui */ "./node_modules/@ckeditor/ckeditor5-table/src/tableui.js");\n/* harmony import */ var _tableselection__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./tableselection */ "./node_modules/@ckeditor/ckeditor5-table/src/tableselection.js");\n/* harmony import */ var _tableclipboard__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./tableclipboard */ "./node_modules/@ckeditor/ckeditor5-table/src/tableclipboard.js");\n/* harmony import */ var _tablekeyboard__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./tablekeyboard */ "./node_modules/@ckeditor/ckeditor5-table/src/tablekeyboard.js");\n/* harmony import */ var _tablemouse__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./tablemouse */ "./node_modules/@ckeditor/ckeditor5-table/src/tablemouse.js");\n/* harmony import */ var _theme_table_css__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../theme/table.css */ "./node_modules/@ckeditor/ckeditor5-table/theme/table.css");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/table\n */\n\n\n\n\n\n\n\n\n\n/**\n * The table plugin.\n *\n * For a detailed overview, check the {@glink features/tables/tables Table feature documentation}.\n *\n * This is a "glue" plugin that loads the following table features:\n *\n * * {@link module:table/tableediting~TableEditing editing feature},\n * * {@link module:table/tableselection~TableSelection selection feature},\n * * {@link module:table/tablekeyboard~TableKeyboard keyboard navigation feature},\n * * {@link module:table/tablemouse~TableMouse mouse selection feature},\n * * {@link module:table/tableclipboard~TableClipboard clipboard feature},\n * * {@link module:table/tableui~TableUI UI feature}.\n */\nclass Table extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [_tableediting__WEBPACK_IMPORTED_MODULE_2__["default"], _tableui__WEBPACK_IMPORTED_MODULE_3__["default"], _tableselection__WEBPACK_IMPORTED_MODULE_4__["default"], _tablemouse__WEBPACK_IMPORTED_MODULE_7__["default"], _tablekeyboard__WEBPACK_IMPORTED_MODULE_6__["default"], _tableclipboard__WEBPACK_IMPORTED_MODULE_5__["default"], ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.Widget];\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return \'Table\';\n    }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/table.js?')},"./node_modules/@ckeditor/ckeditor5-table/src/tablecaption.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ TableCaption)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/* harmony import */ var _tablecaption_tablecaptionediting__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tablecaption/tablecaptionediting */ "./node_modules/@ckeditor/ckeditor5-table/src/tablecaption/tablecaptionediting.js");\n/* harmony import */ var _tablecaption_tablecaptionui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tablecaption/tablecaptionui */ "./node_modules/@ckeditor/ckeditor5-table/src/tablecaption/tablecaptionui.js");\n/* harmony import */ var _theme_tablecaption_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../theme/tablecaption.css */ "./node_modules/@ckeditor/ckeditor5-table/theme/tablecaption.css");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tablecaption\n */\n\n\n\n\n/**\n * The table caption plugin.\n */\nclass TableCaption extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return \'TableCaption\';\n    }\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [_tablecaption_tablecaptionediting__WEBPACK_IMPORTED_MODULE_1__["default"], _tablecaption_tablecaptionui__WEBPACK_IMPORTED_MODULE_2__["default"]];\n    }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/tablecaption.js?')},"./node_modules/@ckeditor/ckeditor5-table/src/tablecaption/tablecaptionediting.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TableCaptionEditing)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var ckeditor5_src_engine__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/engine */ \"ckeditor5/src/engine.js\");\n/* harmony import */ var ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ckeditor5/src/widget */ \"ckeditor5/src/widget.js\");\n/* harmony import */ var _converters_table_caption_post_fixer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../converters/table-caption-post-fixer */ \"./node_modules/@ckeditor/ckeditor5-table/src/converters/table-caption-post-fixer.js\");\n/* harmony import */ var _toggletablecaptioncommand__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./toggletablecaptioncommand */ \"./node_modules/@ckeditor/ckeditor5-table/src/tablecaption/toggletablecaptioncommand.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils */ \"./node_modules/@ckeditor/ckeditor5-table/src/tablecaption/utils.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tablecaption/tablecaptionediting\n */\n\n\n\n\n\n\n/**\n * The table caption editing plugin.\n */\nclass TableCaptionEditing extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'TableCaptionEditing';\n    }\n    /**\n     * @inheritDoc\n     */\n    constructor(editor) {\n        super(editor);\n        this._savedCaptionsMap = new WeakMap();\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const schema = editor.model.schema;\n        const view = editor.editing.view;\n        const t = editor.t;\n        if (!schema.isRegistered('caption')) {\n            schema.register('caption', {\n                allowIn: 'table',\n                allowContentOf: '$block',\n                isLimit: true\n            });\n        }\n        else {\n            schema.extend('caption', {\n                allowIn: 'table'\n            });\n        }\n        editor.commands.add('toggleTableCaption', new _toggletablecaptioncommand__WEBPACK_IMPORTED_MODULE_4__[\"default\"](this.editor));\n        // View -> model converter for the data pipeline.\n        editor.conversion.for('upcast').elementToElement({\n            view: _utils__WEBPACK_IMPORTED_MODULE_5__.matchTableCaptionViewElement,\n            model: 'caption'\n        });\n        // Model -> view converter for the data pipeline.\n        editor.conversion.for('dataDowncast').elementToElement({\n            model: 'caption',\n            view: (modelElement, { writer }) => {\n                if (!(0,_utils__WEBPACK_IMPORTED_MODULE_5__.isTable)(modelElement.parent)) {\n                    return null;\n                }\n                return writer.createContainerElement('figcaption');\n            }\n        });\n        // Model -> view converter for the editing pipeline.\n        editor.conversion.for('editingDowncast').elementToElement({\n            model: 'caption',\n            view: (modelElement, { writer }) => {\n                if (!(0,_utils__WEBPACK_IMPORTED_MODULE_5__.isTable)(modelElement.parent)) {\n                    return null;\n                }\n                const figcaptionElement = writer.createEditableElement('figcaption');\n                writer.setCustomProperty('tableCaption', true, figcaptionElement);\n                figcaptionElement.placeholder = t('Enter table caption');\n                (0,ckeditor5_src_engine__WEBPACK_IMPORTED_MODULE_1__.enablePlaceholder)({\n                    view,\n                    element: figcaptionElement,\n                    keepOnFocus: true\n                });\n                return (0,ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_2__.toWidgetEditable)(figcaptionElement, writer);\n            }\n        });\n        (0,_converters_table_caption_post_fixer__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(editor.model);\n    }\n    /**\n     * Returns the saved {@link module:engine/model/element~Element#toJSON JSONified} caption\n     * of a table model element.\n     *\n     * See {@link #_saveCaption}.\n     *\n     * @internal\n     * @param tableModelElement The model element the caption should be returned for.\n     * @returns The model caption element or `null` if there is none.\n     */\n    _getSavedCaption(tableModelElement) {\n        const jsonObject = this._savedCaptionsMap.get(tableModelElement);\n        return jsonObject ? ckeditor5_src_engine__WEBPACK_IMPORTED_MODULE_1__.Element.fromJSON(jsonObject) : null;\n    }\n    /**\n     * Saves a {@link module:engine/model/element~Element#toJSON JSONified} caption for\n     * a table element to allow restoring it in the future.\n     *\n     * A caption is saved every time it gets hidden. The\n     * user should be able to restore it on demand.\n     *\n     * **Note**: The caption cannot be stored in the table model element attribute because,\n     * for instance, when the model state propagates to collaborators, the attribute would get\n     * lost (mainly because it does not convert to anything when the caption is hidden) and\n     * the states of collaborators' models would de-synchronize causing numerous issues.\n     *\n     * See {@link #_getSavedCaption}.\n     *\n     * @internal\n     * @param tableModelElement The model element the caption is saved for.\n     * @param caption The caption model element to be saved.\n     */\n    _saveCaption(tableModelElement, caption) {\n        this._savedCaptionsMap.set(tableModelElement, caption.toJSON());\n    }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/tablecaption/tablecaptionediting.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/tablecaption/tablecaptionui.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TableCaptionUI)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/ui */ \"ckeditor5/src/ui.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ \"./node_modules/@ckeditor/ckeditor5-table/src/tablecaption/utils.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n* @module table/tablecaption/tablecaptionui\n*/\n\n\n\n/**\n  * The table caption UI plugin. It introduces the `'toggleTableCaption'` UI button.\n  */\nclass TableCaptionUI extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'TableCaptionUI';\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const editingView = editor.editing.view;\n        const t = editor.t;\n        editor.ui.componentFactory.add('toggleTableCaption', locale => {\n            const command = editor.commands.get('toggleTableCaption');\n            const view = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.ButtonView(locale);\n            view.set({\n                icon: ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.icons.caption,\n                tooltip: true,\n                isToggleable: true\n            });\n            view.bind('isOn', 'isEnabled').to(command, 'value', 'isEnabled');\n            view.bind('label').to(command, 'value', value => value ? t('Toggle caption off') : t('Toggle caption on'));\n            this.listenTo(view, 'execute', () => {\n                editor.execute('toggleTableCaption', { focusCaptionOnShow: true });\n                // Scroll to the selection and highlight the caption if the caption showed up.\n                if (command.value) {\n                    const modelCaptionElement = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getCaptionFromModelSelection)(editor.model.document.selection);\n                    const figcaptionElement = editor.editing.mapper.toViewElement(modelCaptionElement);\n                    if (!figcaptionElement) {\n                        return;\n                    }\n                    editingView.scrollToTheSelection();\n                    editingView.change(writer => {\n                        writer.addClass('table__caption_highlighted', figcaptionElement);\n                    });\n                }\n                editor.editing.view.focus();\n            });\n            return view;\n        });\n    }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/tablecaption/tablecaptionui.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/tablecaption/toggletablecaptioncommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ToggleTableCaptionCommand)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ \"./node_modules/@ckeditor/ckeditor5-table/src/tablecaption/utils.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n* @module table/tablecaption/toggletablecaptioncommand\n*/\n\n\n/**\n * The toggle table caption command.\n *\n * This command is registered by {@link module:table/tablecaption/tablecaptionediting~TableCaptionEditing} as the\n * `'toggleTableCaption'` editor command.\n *\n * Executing this command:\n *\n * * either adds or removes the table caption of a selected table (depending on whether the caption is present or not),\n * * removes the table caption if the selection is anchored in one.\n *\n * ```ts\n * // Toggle the presence of the caption.\n * editor.execute( 'toggleTableCaption' );\n * ```\n *\n * **Note**: You can move the selection to the caption right away as it shows up upon executing this command by using\n * the `focusCaptionOnShow` option:\n *\n * ```ts\n * editor.execute( 'toggleTableCaption', { focusCaptionOnShow: true } );\n * ```\n */\nclass ToggleTableCaptionCommand extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Command {\n    /**\n     * @inheritDoc\n     */\n    refresh() {\n        const editor = this.editor;\n        const tableElement = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getSelectionAffectedTable)(editor.model.document.selection);\n        this.isEnabled = !!tableElement;\n        if (!this.isEnabled) {\n            this.value = false;\n        }\n        else {\n            this.value = !!(0,_utils__WEBPACK_IMPORTED_MODULE_1__.getCaptionFromTableModelElement)(tableElement);\n        }\n    }\n    /**\n     * Executes the command.\n     *\n     * ```ts\n     * editor.execute( 'toggleTableCaption' );\n     * ```\n     *\n     * @param options Options for the executed command.\n     * @param options.focusCaptionOnShow When true and the caption shows up, the selection will be moved into it straight away.\n     * @fires execute\n     */\n    execute({ focusCaptionOnShow = false } = {}) {\n        this.editor.model.change(writer => {\n            if (this.value) {\n                this._hideTableCaption(writer);\n            }\n            else {\n                this._showTableCaption(writer, focusCaptionOnShow);\n            }\n        });\n    }\n    /**\n     * Shows the table caption. Also:\n     *\n     * * it attempts to restore the caption content from the `TableCaptionEditing` caption registry,\n     * * it moves the selection to the caption right away, it the `focusCaptionOnShow` option was set.\n     *\n     * @param focusCaptionOnShow Default focus behavior when showing the caption.\n     */\n    _showTableCaption(writer, focusCaptionOnShow) {\n        const model = this.editor.model;\n        const tableElement = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getSelectionAffectedTable)(model.document.selection);\n        const tableCaptionEditing = this.editor.plugins.get('TableCaptionEditing');\n        const savedCaptionElement = tableCaptionEditing._getSavedCaption(tableElement);\n        // Try restoring the caption from the TableCaptionEditing plugin storage.\n        const newCaptionElement = savedCaptionElement || writer.createElement('caption');\n        model.insertContent(newCaptionElement, tableElement, 'end');\n        if (focusCaptionOnShow) {\n            writer.setSelection(newCaptionElement, 'in');\n        }\n    }\n    /**\n     * Hides the caption of a selected table (or an table caption the selection is anchored to).\n     *\n     * The content of the caption is stored in the `TableCaptionEditing` caption registry to make this\n     * a reversible action.\n     */\n    _hideTableCaption(writer) {\n        const model = this.editor.model;\n        const tableElement = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getSelectionAffectedTable)(model.document.selection);\n        const tableCaptionEditing = this.editor.plugins.get('TableCaptionEditing');\n        const captionElement = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getCaptionFromTableModelElement)(tableElement);\n        // Store the caption content so it can be restored quickly if the user changes their mind.\n        tableCaptionEditing._saveCaption(tableElement, captionElement);\n        model.deleteContent(writer.createSelection(captionElement, 'on'));\n    }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/tablecaption/toggletablecaptioncommand.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/tablecaption/utils.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCaptionFromModelSelection: () => (/* binding */ getCaptionFromModelSelection),\n/* harmony export */   getCaptionFromTableModelElement: () => (/* binding */ getCaptionFromTableModelElement),\n/* harmony export */   getSelectionAffectedTable: () => (/* binding */ getSelectionAffectedTable),\n/* harmony export */   isTable: () => (/* binding */ isTable),\n/* harmony export */   matchTableCaptionViewElement: () => (/* binding */ matchTableCaptionViewElement)\n/* harmony export */ });\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * Checks if the provided model element is a `table`.\n *\n * @param modelElement Element to check if it is a table.\n */\nfunction isTable(modelElement) {\n    return !!modelElement && modelElement.is('element', 'table');\n}\n/**\n * Returns the caption model element from a given table element. Returns `null` if no caption is found.\n *\n * @param tableModelElement Table element in which we will try to find a caption element.\n */\nfunction getCaptionFromTableModelElement(tableModelElement) {\n    for (const node of tableModelElement.getChildren()) {\n        if (node.is('element', 'caption')) {\n            return node;\n        }\n    }\n    return null;\n}\n/**\n * Returns the caption model element for a model selection. Returns `null` if the selection has no caption element ancestor.\n *\n * @param selection The selection checked for caption presence.\n */\nfunction getCaptionFromModelSelection(selection) {\n    const tableElement = getSelectionAffectedTable(selection);\n    if (!tableElement) {\n        return null;\n    }\n    return getCaptionFromTableModelElement(tableElement);\n}\n/**\n * {@link module:engine/view/matcher~Matcher} pattern. Checks if a given element is a caption.\n *\n * There are two possible forms of the valid caption:\n *  - A `<figcaption>` element inside a `<figure class=\"table\">` element.\n *  - A `<caption>` inside a <table>.\n *\n * @returns Returns the object accepted by {@link module:engine/view/matcher~Matcher} or `null` if the element cannot be matched.\n */\nfunction matchTableCaptionViewElement(element) {\n    const parent = element.parent;\n    if (element.name == 'figcaption' && parent && parent.is('element', 'figure') && parent.hasClass('table')) {\n        return { name: true };\n    }\n    if (element.name == 'caption' && parent && parent.is('element', 'table')) {\n        return { name: true };\n    }\n    return null;\n}\n/**\n * Depending on the position of the selection we either return the table under cursor or look for the table higher in the hierarchy.\n */\nfunction getSelectionAffectedTable(selection) {\n    const selectedElement = selection.getSelectedElement();\n    // Is the command triggered from the `tableToolbar`?\n    if (selectedElement && selectedElement.is('element', 'table')) {\n        return selectedElement;\n    }\n    return selection.getFirstPosition().findAncestor('table');\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/tablecaption/utils.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/tablecellproperties.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ TableCellProperties)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/* harmony import */ var _tablecellproperties_tablecellpropertiesui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tablecellproperties/tablecellpropertiesui */ "./node_modules/@ckeditor/ckeditor5-table/src/tablecellproperties/tablecellpropertiesui.js");\n/* harmony import */ var _tablecellproperties_tablecellpropertiesediting__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tablecellproperties/tablecellpropertiesediting */ "./node_modules/@ckeditor/ckeditor5-table/src/tablecellproperties/tablecellpropertiesediting.js");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tablecellproperties\n */\n\n\n\n/**\n * The table cell properties feature. Enables support for setting properties of table cells (size, border, background, etc.).\n *\n * Read more in the {@glink features/tables/tables-styling Table and cell styling tools} section.\n * See also the {@link module:table/tableproperties~TableProperties} plugin.\n *\n * This is a "glue" plugin that loads the\n * {@link module:table/tablecellproperties/tablecellpropertiesediting~TableCellPropertiesEditing table cell properties editing feature} and\n * the {@link module:table/tablecellproperties/tablecellpropertiesui~TableCellPropertiesUI table cell properties UI feature}.\n */\nclass TableCellProperties extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return \'TableCellProperties\';\n    }\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [_tablecellproperties_tablecellpropertiesediting__WEBPACK_IMPORTED_MODULE_2__["default"], _tablecellproperties_tablecellpropertiesui__WEBPACK_IMPORTED_MODULE_1__["default"]];\n    }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/tablecellproperties.js?')},"./node_modules/@ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellbackgroundcolorcommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TableCellBackgroundColorCommand)\n/* harmony export */ });\n/* harmony import */ var _tablecellpropertycommand__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tablecellpropertycommand */ \"./node_modules/@ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellpropertycommand.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * The table cell background color command.\n *\n * The command is registered by the {@link module:table/tablecellproperties/tablecellpropertiesediting~TableCellPropertiesEditing} as\n * the `'tableCellBackgroundColor'` editor command.\n *\n * To change the background color of selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'tableCellBackgroundColor', {\n *   value: '#f00'\n * } );\n * ```\n */\nclass TableCellBackgroundColorCommand extends _tablecellpropertycommand__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `TableCellBackgroundColorCommand` instance.\n     *\n     * @param editor An editor in which this command will be used.\n     * @param defaultValue The default value of the attribute.\n     */\n    constructor(editor, defaultValue) {\n        super(editor, 'tableCellBackgroundColor', defaultValue);\n    }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellbackgroundcolorcommand.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellbordercolorcommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TableCellBorderColorCommand)\n/* harmony export */ });\n/* harmony import */ var _tablecellpropertycommand__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tablecellpropertycommand */ \"./node_modules/@ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellpropertycommand.js\");\n/* harmony import */ var _utils_table_properties__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/table-properties */ \"./node_modules/@ckeditor/ckeditor5-table/src/utils/table-properties.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n\n/**\n * The table cell border color command.\n *\n * The command is registered by the {@link module:table/tablecellproperties/tablecellpropertiesediting~TableCellPropertiesEditing} as\n * the `'tableCellBorderColor'` editor command.\n *\n * To change the border color of selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'tableCellBorderColor', {\n *   value: '#f00'\n * } );\n * ```\n */\nclass TableCellBorderColorCommand extends _tablecellpropertycommand__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `TableCellBorderColorCommand` instance.\n     *\n     * @param editor An editor in which this command will be used.\n     * @param defaultValue The default value of the attribute.\n     */\n    constructor(editor, defaultValue) {\n        super(editor, 'tableCellBorderColor', defaultValue);\n    }\n    /**\n     * @inheritDoc\n     */\n    _getAttribute(tableCell) {\n        if (!tableCell) {\n            return;\n        }\n        const value = (0,_utils_table_properties__WEBPACK_IMPORTED_MODULE_1__.getSingleValue)(tableCell.getAttribute(this.attributeName));\n        if (value === this._defaultValue) {\n            return;\n        }\n        return value;\n    }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellbordercolorcommand.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellborderstylecommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TableCellBorderStyleCommand)\n/* harmony export */ });\n/* harmony import */ var _tablecellpropertycommand__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tablecellpropertycommand */ \"./node_modules/@ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellpropertycommand.js\");\n/* harmony import */ var _utils_table_properties__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/table-properties */ \"./node_modules/@ckeditor/ckeditor5-table/src/utils/table-properties.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n\n/**\n * The table cell border style command.\n *\n * The command is registered by the {@link module:table/tablecellproperties/tablecellpropertiesediting~TableCellPropertiesEditing} as\n * the `'tableCellBorderStyle'` editor command.\n *\n * To change the border style of selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'tableCellBorderStyle', {\n *   value: 'dashed'\n * } );\n * ```\n */\nclass TableCellBorderStyleCommand extends _tablecellpropertycommand__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `TableCellBorderStyleCommand` instance.\n     *\n     * @param editor An editor in which this command will be used.\n     * @param defaultValue The default value of the attribute.\n     */\n    constructor(editor, defaultValue) {\n        super(editor, 'tableCellBorderStyle', defaultValue);\n    }\n    /**\n     * @inheritDoc\n     */\n    _getAttribute(tableCell) {\n        if (!tableCell) {\n            return;\n        }\n        const value = (0,_utils_table_properties__WEBPACK_IMPORTED_MODULE_1__.getSingleValue)(tableCell.getAttribute(this.attributeName));\n        if (value === this._defaultValue) {\n            return;\n        }\n        return value;\n    }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellborderstylecommand.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellborderwidthcommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TableCellBorderWidthCommand)\n/* harmony export */ });\n/* harmony import */ var _tablecellpropertycommand__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tablecellpropertycommand */ \"./node_modules/@ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellpropertycommand.js\");\n/* harmony import */ var _utils_table_properties__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/table-properties */ \"./node_modules/@ckeditor/ckeditor5-table/src/utils/table-properties.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n\n/**\n * The table cell border width command.\n *\n * The command is registered by the {@link module:table/tablecellproperties/tablecellpropertiesediting~TableCellPropertiesEditing} as\n * the `'tableCellBorderWidth'` editor command.\n *\n * To change the border width of selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'tableCellBorderWidth', {\n *   value: '5px'\n * } );\n * ```\n *\n * **Note**: This command adds the default `'px'` unit to numeric values. Executing:\n *\n * ```ts\n * editor.execute( 'tableCellBorderWidth', {\n *   value: '5'\n * } );\n * ```\n *\n * will set the `borderWidth` attribute to `'5px'` in the model.\n */\nclass TableCellBorderWidthCommand extends _tablecellpropertycommand__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `TableCellBorderWidthCommand` instance.\n     *\n     * @param editor An editor in which this command will be used.\n     * @param defaultValue The default value of the attribute.\n     */\n    constructor(editor, defaultValue) {\n        super(editor, 'tableCellBorderWidth', defaultValue);\n    }\n    /**\n     * @inheritDoc\n     */\n    _getAttribute(tableCell) {\n        if (!tableCell) {\n            return;\n        }\n        const value = (0,_utils_table_properties__WEBPACK_IMPORTED_MODULE_1__.getSingleValue)(tableCell.getAttribute(this.attributeName));\n        if (value === this._defaultValue) {\n            return;\n        }\n        return value;\n    }\n    /**\n     * @inheritDoc\n     */\n    _getValueToSet(value) {\n        const newValue = (0,_utils_table_properties__WEBPACK_IMPORTED_MODULE_1__.addDefaultUnitToNumericValue)(value, 'px');\n        if (newValue === this._defaultValue) {\n            return;\n        }\n        return newValue;\n    }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellborderwidthcommand.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellheightcommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TableCellHeightCommand)\n/* harmony export */ });\n/* harmony import */ var _tablecellpropertycommand__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tablecellpropertycommand */ \"./node_modules/@ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellpropertycommand.js\");\n/* harmony import */ var _utils_table_properties__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/table-properties */ \"./node_modules/@ckeditor/ckeditor5-table/src/utils/table-properties.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n\n/**\n * The table cell height command.\n *\n * The command is registered by the {@link module:table/tablecellproperties/tablecellpropertiesediting~TableCellPropertiesEditing} as\n * the `'tableCellHeight'` editor command.\n *\n * To change the height of selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'tableCellHeight', {\n *   value: '50px'\n * } );\n * ```\n *\n * **Note**: This command adds the default `'px'` unit to numeric values. Executing:\n *\n * ```ts\n * editor.execute( 'tableCellHeight', {\n *   value: '50'\n * } );\n * ```\n *\n * will set the `height` attribute to `'50px'` in the model.\n */\nclass TableCellHeightCommand extends _tablecellpropertycommand__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `TableCellHeightCommand` instance.\n     *\n     * @param editor An editor in which this command will be used.\n     * @param defaultValue The default value of the attribute.\n     */\n    constructor(editor, defaultValue) {\n        super(editor, 'tableCellHeight', defaultValue);\n    }\n    /**\n     * @inheritDoc\n     */\n    _getValueToSet(value) {\n        const newValue = (0,_utils_table_properties__WEBPACK_IMPORTED_MODULE_1__.addDefaultUnitToNumericValue)(value, 'px');\n        if (newValue === this._defaultValue) {\n            return;\n        }\n        return newValue;\n    }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellheightcommand.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellhorizontalalignmentcommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TableCellHorizontalAlignmentCommand)\n/* harmony export */ });\n/* harmony import */ var _tablecellpropertycommand__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tablecellpropertycommand */ \"./node_modules/@ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellpropertycommand.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * The table cell horizontal alignment command.\n *\n * The command is registered by the {@link module:table/tablecellproperties/tablecellpropertiesediting~TableCellPropertiesEditing} as\n * the `'tableCellHorizontalAlignment'` editor command.\n *\n * To change the horizontal text alignment of selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'tableCellHorizontalAlignment', {\n *  value: 'right'\n * } );\n * ```\n */\nclass TableCellHorizontalAlignmentCommand extends _tablecellpropertycommand__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `TableCellHorizontalAlignmentCommand` instance.\n     *\n     * @param editor An editor in which this command will be used.\n     * @param defaultValue The default value for the \"alignment\" attribute.\n     */\n    constructor(editor, defaultValue) {\n        super(editor, 'tableCellHorizontalAlignment', defaultValue);\n    }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellhorizontalalignmentcommand.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellpaddingcommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TableCellPaddingCommand)\n/* harmony export */ });\n/* harmony import */ var _tablecellpropertycommand__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tablecellpropertycommand */ \"./node_modules/@ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellpropertycommand.js\");\n/* harmony import */ var _utils_table_properties__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/table-properties */ \"./node_modules/@ckeditor/ckeditor5-table/src/utils/table-properties.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n\n/**\n * The table cell padding command.\n *\n * The command is registered by the {@link module:table/tablecellproperties/tablecellpropertiesediting~TableCellPropertiesEditing} as\n * the `'tableCellPadding'` editor command.\n *\n * To change the padding of selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'tableCellPadding', {\n *   value: '5px'\n * } );\n * ```\n *\n * **Note**: This command adds the default `'px'` unit to numeric values. Executing:\n *\n * ```ts\n * editor.execute( 'tableCellPadding', {\n *   value: '5'\n * } );\n * ```\n *\n * will set the `padding` attribute to `'5px'` in the model.\n */\nclass TableCellPaddingCommand extends _tablecellpropertycommand__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `TableCellPaddingCommand` instance.\n     *\n     * @param editor An editor in which this command will be used.\n     * @param defaultValue The default value of the attribute.\n     */\n    constructor(editor, defaultValue) {\n        super(editor, 'tableCellPadding', defaultValue);\n    }\n    /**\n     * @inheritDoc\n     */\n    _getAttribute(tableCell) {\n        if (!tableCell) {\n            return;\n        }\n        const value = (0,_utils_table_properties__WEBPACK_IMPORTED_MODULE_1__.getSingleValue)(tableCell.getAttribute(this.attributeName));\n        if (value === this._defaultValue) {\n            return;\n        }\n        return value;\n    }\n    /**\n     * @inheritDoc\n     */\n    _getValueToSet(value) {\n        const newValue = (0,_utils_table_properties__WEBPACK_IMPORTED_MODULE_1__.addDefaultUnitToNumericValue)(value, 'px');\n        if (newValue === this._defaultValue) {\n            return;\n        }\n        return newValue;\n    }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellpaddingcommand.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellpropertycommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TableCellPropertyCommand)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tablecellproperties/commands/tablecellpropertycommand\n */\n\n/**\n * The table cell attribute command.\n *\n * The command is a base command for other table cell property commands.\n */\nclass TableCellPropertyCommand extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Command {\n    /**\n     * Creates a new `TableCellPropertyCommand` instance.\n     *\n     * @param editor An editor in which this command will be used.\n     * @param attributeName Table cell attribute name.\n     * @param defaultValue The default value of the attribute.\n     */\n    constructor(editor, attributeName, defaultValue) {\n        super(editor);\n        this.attributeName = attributeName;\n        this._defaultValue = defaultValue;\n    }\n    /**\n     * @inheritDoc\n     */\n    refresh() {\n        const editor = this.editor;\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const selectedTableCells = tableUtils.getSelectionAffectedTableCells(editor.model.document.selection);\n        this.isEnabled = !!selectedTableCells.length;\n        this.value = this._getSingleValue(selectedTableCells);\n    }\n    /**\n     * Executes the command.\n     *\n     * @fires execute\n     * @param options.value If set, the command will set the attribute on selected table cells.\n     * If it is not set, the command will remove the attribute from the selected table cells.\n     * @param options.batch Pass the model batch instance to the command to aggregate changes,\n     * for example to allow a single undo step for multiple executions.\n     */\n    execute(options = {}) {\n        const { value, batch } = options;\n        const model = this.editor.model;\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const tableCells = tableUtils.getSelectionAffectedTableCells(model.document.selection);\n        const valueToSet = this._getValueToSet(value);\n        model.enqueueChange(batch, writer => {\n            if (valueToSet) {\n                tableCells.forEach(tableCell => writer.setAttribute(this.attributeName, valueToSet, tableCell));\n            }\n            else {\n                tableCells.forEach(tableCell => writer.removeAttribute(this.attributeName, tableCell));\n            }\n        });\n    }\n    /**\n     * Returns the attribute value for a table cell.\n     */\n    _getAttribute(tableCell) {\n        if (!tableCell) {\n            return;\n        }\n        const value = tableCell.getAttribute(this.attributeName);\n        if (value === this._defaultValue) {\n            return;\n        }\n        return value;\n    }\n    /**\n     * Returns the proper model value. It can be used to add a default unit to numeric values.\n     */\n    _getValueToSet(value) {\n        if (value === this._defaultValue) {\n            return;\n        }\n        return value;\n    }\n    /**\n     * Returns a single value for all selected table cells. If the value is the same for all cells,\n     * it will be returned (`undefined` otherwise).\n     */\n    _getSingleValue(tableCells) {\n        const firstCellValue = this._getAttribute(tableCells[0]);\n        const everyCellHasAttribute = tableCells.every(tableCells => this._getAttribute(tableCells) === firstCellValue);\n        return everyCellHasAttribute ? firstCellValue : undefined;\n    }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellpropertycommand.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellverticalalignmentcommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TableCellVerticalAlignmentCommand)\n/* harmony export */ });\n/* harmony import */ var _tablecellpropertycommand__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tablecellpropertycommand */ \"./node_modules/@ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellpropertycommand.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * The table cell vertical alignment command.\n *\n * The command is registered by the {@link module:table/tablecellproperties/tablecellpropertiesediting~TableCellPropertiesEditing} as\n * the `'tableCellVerticalAlignment'` editor command.\n *\n * To change the vertical text alignment of selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'tableCellVerticalAlignment', {\n *   value: 'top'\n * } );\n * ```\n *\n * The following values, corresponding to the\n * [`vertical-align` CSS attribute](https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align), are allowed:\n *\n * * `'top'`\n * * `'bottom'`\n *\n * The `'middle'` value is the default one so there is no need to set it.\n */\nclass TableCellVerticalAlignmentCommand extends _tablecellpropertycommand__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `TableCellVerticalAlignmentCommand` instance.\n     *\n     * @param editor An editor in which this command will be used.\n     * @param defaultValue The default value for the \"alignment\" attribute.\n     */\n    constructor(editor, defaultValue) {\n        super(editor, 'tableCellVerticalAlignment', defaultValue);\n    }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellverticalalignmentcommand.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/tablecellproperties/tablecellpropertiesediting.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TableCellPropertiesEditing)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var ckeditor5_src_engine__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/engine */ \"ckeditor5/src/engine.js\");\n/* harmony import */ var _converters_tableproperties__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../converters/tableproperties */ \"./node_modules/@ckeditor/ckeditor5-table/src/converters/tableproperties.js\");\n/* harmony import */ var _tableediting__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../tableediting */ \"./node_modules/@ckeditor/ckeditor5-table/src/tableediting.js\");\n/* harmony import */ var _tablecellwidth_tablecellwidthediting__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../tablecellwidth/tablecellwidthediting */ \"./node_modules/@ckeditor/ckeditor5-table/src/tablecellwidth/tablecellwidthediting.js\");\n/* harmony import */ var _commands_tablecellpaddingcommand__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./commands/tablecellpaddingcommand */ \"./node_modules/@ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellpaddingcommand.js\");\n/* harmony import */ var _commands_tablecellheightcommand__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./commands/tablecellheightcommand */ \"./node_modules/@ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellheightcommand.js\");\n/* harmony import */ var _commands_tablecellbackgroundcolorcommand__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./commands/tablecellbackgroundcolorcommand */ \"./node_modules/@ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellbackgroundcolorcommand.js\");\n/* harmony import */ var _commands_tablecellverticalalignmentcommand__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./commands/tablecellverticalalignmentcommand */ \"./node_modules/@ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellverticalalignmentcommand.js\");\n/* harmony import */ var _commands_tablecellhorizontalalignmentcommand__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./commands/tablecellhorizontalalignmentcommand */ \"./node_modules/@ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellhorizontalalignmentcommand.js\");\n/* harmony import */ var _commands_tablecellborderstylecommand__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./commands/tablecellborderstylecommand */ \"./node_modules/@ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellborderstylecommand.js\");\n/* harmony import */ var _commands_tablecellbordercolorcommand__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./commands/tablecellbordercolorcommand */ \"./node_modules/@ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellbordercolorcommand.js\");\n/* harmony import */ var _commands_tablecellborderwidthcommand__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./commands/tablecellborderwidthcommand */ \"./node_modules/@ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellborderwidthcommand.js\");\n/* harmony import */ var _utils_table_properties__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../utils/table-properties */ \"./node_modules/@ckeditor/ckeditor5-table/src/utils/table-properties.js\");\n/* harmony import */ var _utils_common__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../utils/common */ \"./node_modules/@ckeditor/ckeditor5-table/src/utils/common.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tablecellproperties/tablecellpropertiesediting\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst VALIGN_VALUES_REG_EXP = /^(top|middle|bottom)$/;\nconst ALIGN_VALUES_REG_EXP = /^(left|center|right|justify)$/;\n/**\n * The table cell properties editing feature.\n *\n * Introduces table cell model attributes and their conversion:\n *\n * - border: `tableCellBorderStyle`, `tableCellBorderColor` and `tableCellBorderWidth`\n * - background color: `tableCellBackgroundColor`\n * - cell padding: `tableCellPadding`\n * - horizontal and vertical alignment: `tableCellHorizontalAlignment`, `tableCellVerticalAlignment`\n * - cell width and height: `tableCellWidth`, `tableCellHeight`\n *\n * It also registers commands used to manipulate the above attributes:\n *\n * - border: the `'tableCellBorderStyle'`, `'tableCellBorderColor'` and `'tableCellBorderWidth'` commands\n * - background color: the `'tableCellBackgroundColor'` command\n * - cell padding: the `'tableCellPadding'` command\n * - horizontal and vertical alignment: the `'tableCellHorizontalAlignment'` and `'tableCellVerticalAlignment'` commands\n * - width and height: the `'tableCellWidth'` and `'tableCellHeight'` commands\n */\nclass TableCellPropertiesEditing extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'TableCellPropertiesEditing';\n    }\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [_tableediting__WEBPACK_IMPORTED_MODULE_3__[\"default\"], _tablecellwidth_tablecellwidthediting__WEBPACK_IMPORTED_MODULE_4__[\"default\"]];\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const schema = editor.model.schema;\n        const conversion = editor.conversion;\n        editor.config.define('table.tableCellProperties.defaultProperties', {});\n        const defaultTableCellProperties = (0,_utils_table_properties__WEBPACK_IMPORTED_MODULE_13__.getNormalizedDefaultProperties)(editor.config.get('table.tableCellProperties.defaultProperties'), {\n            includeVerticalAlignmentProperty: true,\n            includeHorizontalAlignmentProperty: true,\n            includePaddingProperty: true,\n            isRightToLeftContent: editor.locale.contentLanguageDirection === 'rtl'\n        });\n        editor.data.addStyleProcessorRules(ckeditor5_src_engine__WEBPACK_IMPORTED_MODULE_1__.addBorderRules);\n        enableBorderProperties(schema, conversion, {\n            color: defaultTableCellProperties.borderColor,\n            style: defaultTableCellProperties.borderStyle,\n            width: defaultTableCellProperties.borderWidth\n        });\n        editor.commands.add('tableCellBorderStyle', new _commands_tablecellborderstylecommand__WEBPACK_IMPORTED_MODULE_10__[\"default\"](editor, defaultTableCellProperties.borderStyle));\n        editor.commands.add('tableCellBorderColor', new _commands_tablecellbordercolorcommand__WEBPACK_IMPORTED_MODULE_11__[\"default\"](editor, defaultTableCellProperties.borderColor));\n        editor.commands.add('tableCellBorderWidth', new _commands_tablecellborderwidthcommand__WEBPACK_IMPORTED_MODULE_12__[\"default\"](editor, defaultTableCellProperties.borderWidth));\n        (0,_utils_common__WEBPACK_IMPORTED_MODULE_14__.enableProperty)(schema, conversion, {\n            modelAttribute: 'tableCellHeight',\n            styleName: 'height',\n            defaultValue: defaultTableCellProperties.height\n        });\n        editor.commands.add('tableCellHeight', new _commands_tablecellheightcommand__WEBPACK_IMPORTED_MODULE_6__[\"default\"](editor, defaultTableCellProperties.height));\n        editor.data.addStyleProcessorRules(ckeditor5_src_engine__WEBPACK_IMPORTED_MODULE_1__.addPaddingRules);\n        (0,_utils_common__WEBPACK_IMPORTED_MODULE_14__.enableProperty)(schema, conversion, {\n            modelAttribute: 'tableCellPadding',\n            styleName: 'padding',\n            reduceBoxSides: true,\n            defaultValue: defaultTableCellProperties.padding\n        });\n        editor.commands.add('tableCellPadding', new _commands_tablecellpaddingcommand__WEBPACK_IMPORTED_MODULE_5__[\"default\"](editor, defaultTableCellProperties.padding));\n        editor.data.addStyleProcessorRules(ckeditor5_src_engine__WEBPACK_IMPORTED_MODULE_1__.addBackgroundRules);\n        (0,_utils_common__WEBPACK_IMPORTED_MODULE_14__.enableProperty)(schema, conversion, {\n            modelAttribute: 'tableCellBackgroundColor',\n            styleName: 'background-color',\n            defaultValue: defaultTableCellProperties.backgroundColor\n        });\n        editor.commands.add('tableCellBackgroundColor', new _commands_tablecellbackgroundcolorcommand__WEBPACK_IMPORTED_MODULE_7__[\"default\"](editor, defaultTableCellProperties.backgroundColor));\n        enableHorizontalAlignmentProperty(schema, conversion, defaultTableCellProperties.horizontalAlignment);\n        editor.commands.add('tableCellHorizontalAlignment', new _commands_tablecellhorizontalalignmentcommand__WEBPACK_IMPORTED_MODULE_9__[\"default\"](editor, defaultTableCellProperties.horizontalAlignment));\n        enableVerticalAlignmentProperty(schema, conversion, defaultTableCellProperties.verticalAlignment);\n        editor.commands.add('tableCellVerticalAlignment', new _commands_tablecellverticalalignmentcommand__WEBPACK_IMPORTED_MODULE_8__[\"default\"](editor, defaultTableCellProperties.verticalAlignment));\n    }\n}\n/**\n * Enables the `'tableCellBorderStyle'`, `'tableCellBorderColor'` and `'tableCellBorderWidth'` attributes for table cells.\n *\n * @param defaultBorder The default border values.\n * @param defaultBorder.color The default `tableCellBorderColor` value.\n * @param defaultBorder.style The default `tableCellBorderStyle` value.\n * @param defaultBorder.width The default `tableCellBorderWidth` value.\n */\nfunction enableBorderProperties(schema, conversion, defaultBorder) {\n    const modelAttributes = {\n        width: 'tableCellBorderWidth',\n        color: 'tableCellBorderColor',\n        style: 'tableCellBorderStyle'\n    };\n    schema.extend('tableCell', {\n        allowAttributes: Object.values(modelAttributes)\n    });\n    (0,_converters_tableproperties__WEBPACK_IMPORTED_MODULE_2__.upcastBorderStyles)(conversion, 'td', modelAttributes, defaultBorder);\n    (0,_converters_tableproperties__WEBPACK_IMPORTED_MODULE_2__.upcastBorderStyles)(conversion, 'th', modelAttributes, defaultBorder);\n    (0,_converters_tableproperties__WEBPACK_IMPORTED_MODULE_2__.downcastAttributeToStyle)(conversion, { modelElement: 'tableCell', modelAttribute: modelAttributes.style, styleName: 'border-style' });\n    (0,_converters_tableproperties__WEBPACK_IMPORTED_MODULE_2__.downcastAttributeToStyle)(conversion, { modelElement: 'tableCell', modelAttribute: modelAttributes.color, styleName: 'border-color' });\n    (0,_converters_tableproperties__WEBPACK_IMPORTED_MODULE_2__.downcastAttributeToStyle)(conversion, { modelElement: 'tableCell', modelAttribute: modelAttributes.width, styleName: 'border-width' });\n}\n/**\n * Enables the `'tableCellHorizontalAlignment'` attribute for table cells.\n *\n * @param defaultValue The default horizontal alignment value.\n */\nfunction enableHorizontalAlignmentProperty(schema, conversion, defaultValue) {\n    schema.extend('tableCell', {\n        allowAttributes: ['tableCellHorizontalAlignment']\n    });\n    conversion.for('downcast')\n        .attributeToAttribute({\n        model: {\n            name: 'tableCell',\n            key: 'tableCellHorizontalAlignment'\n        },\n        view: alignment => ({\n            key: 'style',\n            value: {\n                'text-align': alignment\n            }\n        })\n    });\n    conversion.for('upcast')\n        // Support for the `text-align:*;` CSS definition for the table cell alignment.\n        .attributeToAttribute({\n        view: {\n            name: /^(td|th)$/,\n            styles: {\n                'text-align': ALIGN_VALUES_REG_EXP\n            }\n        },\n        model: {\n            key: 'tableCellHorizontalAlignment',\n            value: (viewElement) => {\n                const align = viewElement.getStyle('text-align');\n                return align === defaultValue ? null : align;\n            }\n        }\n    })\n        // Support for the `align` attribute as the backward compatibility while pasting from other sources.\n        .attributeToAttribute({\n        view: {\n            name: /^(td|th)$/,\n            attributes: {\n                align: ALIGN_VALUES_REG_EXP\n            }\n        },\n        model: {\n            key: 'tableCellHorizontalAlignment',\n            value: (viewElement) => {\n                const align = viewElement.getAttribute('align');\n                return align === defaultValue ? null : align;\n            }\n        }\n    });\n}\n/**\n * Enables the `'verticalAlignment'` attribute for table cells.\n *\n * @param defaultValue The default vertical alignment value.\n */\nfunction enableVerticalAlignmentProperty(schema, conversion, defaultValue) {\n    schema.extend('tableCell', {\n        allowAttributes: ['tableCellVerticalAlignment']\n    });\n    conversion.for('downcast')\n        .attributeToAttribute({\n        model: {\n            name: 'tableCell',\n            key: 'tableCellVerticalAlignment'\n        },\n        view: alignment => ({\n            key: 'style',\n            value: {\n                'vertical-align': alignment\n            }\n        })\n    });\n    conversion.for('upcast')\n        // Support for the `vertical-align:*;` CSS definition for the table cell alignment.\n        .attributeToAttribute({\n        view: {\n            name: /^(td|th)$/,\n            styles: {\n                'vertical-align': VALIGN_VALUES_REG_EXP\n            }\n        },\n        model: {\n            key: 'tableCellVerticalAlignment',\n            value: (viewElement) => {\n                const align = viewElement.getStyle('vertical-align');\n                return align === defaultValue ? null : align;\n            }\n        }\n    })\n        // Support for the `align` attribute as the backward compatibility while pasting from other sources.\n        .attributeToAttribute({\n        view: {\n            name: /^(td|th)$/,\n            attributes: {\n                valign: VALIGN_VALUES_REG_EXP\n            }\n        },\n        model: {\n            key: 'tableCellVerticalAlignment',\n            value: (viewElement) => {\n                const valign = viewElement.getAttribute('valign');\n                return valign === defaultValue ? null : valign;\n            }\n        }\n    });\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/tablecellproperties/tablecellpropertiesediting.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/tablecellproperties/tablecellpropertiesui.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TableCellPropertiesUI)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/ui */ \"ckeditor5/src/ui.js\");\n/* harmony import */ var _ui_tablecellpropertiesview__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ui/tablecellpropertiesview */ \"./node_modules/@ckeditor/ckeditor5-table/src/tablecellproperties/ui/tablecellpropertiesview.js\");\n/* harmony import */ var _utils_ui_table_properties__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/ui/table-properties */ \"./node_modules/@ckeditor/ckeditor5-table/src/utils/ui/table-properties.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! lodash-es */ \"./node_modules/lodash-es/debounce.js\");\n/* harmony import */ var _utils_ui_widget__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/ui/widget */ \"./node_modules/@ckeditor/ckeditor5-table/src/utils/ui/widget.js\");\n/* harmony import */ var _utils_ui_contextualballoon__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/ui/contextualballoon */ \"./node_modules/@ckeditor/ckeditor5-table/src/utils/ui/contextualballoon.js\");\n/* harmony import */ var _theme_icons_table_cell_properties_svg__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./../../theme/icons/table-cell-properties.svg */ \"./node_modules/@ckeditor/ckeditor5-table/theme/icons/table-cell-properties.svg\");\n/* harmony import */ var _utils_table_properties__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/table-properties */ \"./node_modules/@ckeditor/ckeditor5-table/src/utils/table-properties.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tablecellproperties/tablecellpropertiesui\n */\n\n\n\n\n\n\n\n\n\nconst ERROR_TEXT_TIMEOUT = 500;\n// Map of view properties and related commands.\nconst propertyToCommandMap = {\n    borderStyle: 'tableCellBorderStyle',\n    borderColor: 'tableCellBorderColor',\n    borderWidth: 'tableCellBorderWidth',\n    height: 'tableCellHeight',\n    width: 'tableCellWidth',\n    padding: 'tableCellPadding',\n    backgroundColor: 'tableCellBackgroundColor',\n    horizontalAlignment: 'tableCellHorizontalAlignment',\n    verticalAlignment: 'tableCellVerticalAlignment'\n};\n/**\n * The table cell properties UI plugin. It introduces the `'tableCellProperties'` button\n * that opens a form allowing to specify the visual styling of a table cell.\n *\n * It uses the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon plugin}.\n */\nclass TableCellPropertiesUI extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.ContextualBalloon];\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'TableCellPropertiesUI';\n    }\n    /**\n     * @inheritDoc\n     */\n    constructor(editor) {\n        super(editor);\n        editor.config.define('table.tableCellProperties', {\n            borderColors: _utils_ui_table_properties__WEBPACK_IMPORTED_MODULE_3__.defaultColors,\n            backgroundColors: _utils_ui_table_properties__WEBPACK_IMPORTED_MODULE_3__.defaultColors\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const t = editor.t;\n        this._defaultTableCellProperties = (0,_utils_table_properties__WEBPACK_IMPORTED_MODULE_7__.getNormalizedDefaultProperties)(editor.config.get('table.tableCellProperties.defaultProperties'), {\n            includeVerticalAlignmentProperty: true,\n            includeHorizontalAlignmentProperty: true,\n            includePaddingProperty: true,\n            isRightToLeftContent: editor.locale.contentLanguageDirection === 'rtl'\n        });\n        this._balloon = editor.plugins.get(ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.ContextualBalloon);\n        this.view = null;\n        this._isReady = false;\n        editor.ui.componentFactory.add('tableCellProperties', locale => {\n            const view = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.ButtonView(locale);\n            view.set({\n                label: t('Cell properties'),\n                icon: _theme_icons_table_cell_properties_svg__WEBPACK_IMPORTED_MODULE_6__[\"default\"],\n                tooltip: true\n            });\n            this.listenTo(view, 'execute', () => this._showView());\n            const commands = Object.values(propertyToCommandMap)\n                .map(commandName => editor.commands.get(commandName));\n            view.bind('isEnabled').toMany(commands, 'isEnabled', (...areEnabled) => (areEnabled.some(isCommandEnabled => isCommandEnabled)));\n            return view;\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        super.destroy();\n        // Destroy created UI components as they are not automatically destroyed.\n        // See https://github.com/ckeditor/ckeditor5/issues/1341.\n        if (this.view) {\n            this.view.destroy();\n        }\n    }\n    /**\n     * Creates the {@link module:table/tablecellproperties/ui/tablecellpropertiesview~TableCellPropertiesView} instance.\n     *\n     * @returns The cell properties form view instance.\n     */\n    _createPropertiesView() {\n        const editor = this.editor;\n        const config = editor.config.get('table.tableCellProperties');\n        const borderColorsConfig = (0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.normalizeColorOptions)(config.borderColors);\n        const localizedBorderColors = (0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.getLocalizedColorOptions)(editor.locale, borderColorsConfig);\n        const backgroundColorsConfig = (0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.normalizeColorOptions)(config.backgroundColors);\n        const localizedBackgroundColors = (0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.getLocalizedColorOptions)(editor.locale, backgroundColorsConfig);\n        const hasColorPicker = config.colorPicker !== false;\n        const view = new _ui_tablecellpropertiesview__WEBPACK_IMPORTED_MODULE_2__[\"default\"](editor.locale, {\n            borderColors: localizedBorderColors,\n            backgroundColors: localizedBackgroundColors,\n            defaultTableCellProperties: this._defaultTableCellProperties,\n            colorPickerConfig: hasColorPicker ? (config.colorPicker || {}) : false\n        });\n        const t = editor.t;\n        // Render the view so its #element is available for the clickOutsideHandler.\n        view.render();\n        this.listenTo(view, 'submit', () => {\n            this._hideView();\n        });\n        this.listenTo(view, 'cancel', () => {\n            // https://github.com/ckeditor/ckeditor5/issues/6180\n            if (this._undoStepBatch.operations.length) {\n                editor.execute('undo', this._undoStepBatch);\n            }\n            this._hideView();\n        });\n        // Close the balloon on Esc key press.\n        view.keystrokes.set('Esc', (data, cancel) => {\n            this._hideView();\n            cancel();\n        });\n        // Close on click outside of balloon panel element.\n        (0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.clickOutsideHandler)({\n            emitter: view,\n            activator: () => this._isViewInBalloon,\n            contextElements: [this._balloon.view.element],\n            callback: () => this._hideView()\n        });\n        const colorErrorText = (0,_utils_ui_table_properties__WEBPACK_IMPORTED_MODULE_3__.getLocalizedColorErrorText)(t);\n        const lengthErrorText = (0,_utils_ui_table_properties__WEBPACK_IMPORTED_MODULE_3__.getLocalizedLengthErrorText)(t);\n        // Create the \"UI -> editor data\" binding.\n        // These listeners update the editor data (via table commands) when any observable\n        // property of the view has changed. They also validate the value and display errors in the UI\n        // when necessary. This makes the view live, which means the changes are\n        // visible in the editing as soon as the user types or changes fields' values.\n        view.on('change:borderStyle', this._getPropertyChangeCallback('tableCellBorderStyle'));\n        view.on('change:borderColor', this._getValidatedPropertyChangeCallback({\n            viewField: view.borderColorInput,\n            commandName: 'tableCellBorderColor',\n            errorText: colorErrorText,\n            validator: _utils_ui_table_properties__WEBPACK_IMPORTED_MODULE_3__.colorFieldValidator\n        }));\n        view.on('change:borderWidth', this._getValidatedPropertyChangeCallback({\n            viewField: view.borderWidthInput,\n            commandName: 'tableCellBorderWidth',\n            errorText: lengthErrorText,\n            validator: _utils_ui_table_properties__WEBPACK_IMPORTED_MODULE_3__.lineWidthFieldValidator\n        }));\n        view.on('change:padding', this._getValidatedPropertyChangeCallback({\n            viewField: view.paddingInput,\n            commandName: 'tableCellPadding',\n            errorText: lengthErrorText,\n            validator: _utils_ui_table_properties__WEBPACK_IMPORTED_MODULE_3__.lengthFieldValidator\n        }));\n        view.on('change:width', this._getValidatedPropertyChangeCallback({\n            viewField: view.widthInput,\n            commandName: 'tableCellWidth',\n            errorText: lengthErrorText,\n            validator: _utils_ui_table_properties__WEBPACK_IMPORTED_MODULE_3__.lengthFieldValidator\n        }));\n        view.on('change:height', this._getValidatedPropertyChangeCallback({\n            viewField: view.heightInput,\n            commandName: 'tableCellHeight',\n            errorText: lengthErrorText,\n            validator: _utils_ui_table_properties__WEBPACK_IMPORTED_MODULE_3__.lengthFieldValidator\n        }));\n        view.on('change:backgroundColor', this._getValidatedPropertyChangeCallback({\n            viewField: view.backgroundInput,\n            commandName: 'tableCellBackgroundColor',\n            errorText: colorErrorText,\n            validator: _utils_ui_table_properties__WEBPACK_IMPORTED_MODULE_3__.colorFieldValidator\n        }));\n        view.on('change:horizontalAlignment', this._getPropertyChangeCallback('tableCellHorizontalAlignment'));\n        view.on('change:verticalAlignment', this._getPropertyChangeCallback('tableCellVerticalAlignment'));\n        return view;\n    }\n    /**\n     * In this method the \"editor data -> UI\" binding is happening.\n     *\n     * When executed, this method obtains selected cell property values from various table commands\n     * and passes them to the {@link #view}.\n     *\n     * This way, the UI stays up–to–date with the editor data.\n     */\n    _fillViewFormFromCommandValues() {\n        const commands = this.editor.commands;\n        const borderStyleCommand = commands.get('tableCellBorderStyle');\n        Object.entries(propertyToCommandMap)\n            .map(([property, commandName]) => {\n            const defaultValue = this._defaultTableCellProperties[property] || '';\n            return [\n                property,\n                commands.get(commandName).value || defaultValue\n            ];\n        })\n            .forEach(([property, value]) => {\n            // Do not set the `border-color` and `border-width` fields if `border-style:none`.\n            if ((property === 'borderColor' || property === 'borderWidth') && borderStyleCommand.value === 'none') {\n                return;\n            }\n            this.view.set(property, value);\n        });\n        this._isReady = true;\n    }\n    /**\n     * Shows the {@link #view} in the {@link #_balloon}.\n     *\n     * **Note**: Each time a view is shown, a new {@link #_undoStepBatch} is created. It contains\n     * all changes made to the document when the view is visible, allowing a single undo step\n     * for all of them.\n     */\n    _showView() {\n        const editor = this.editor;\n        if (!this.view) {\n            this.view = this._createPropertiesView();\n        }\n        this.listenTo(editor.ui, 'update', () => {\n            this._updateView();\n        });\n        // Update the view with the model values.\n        this._fillViewFormFromCommandValues();\n        this._balloon.add({\n            view: this.view,\n            position: (0,_utils_ui_contextualballoon__WEBPACK_IMPORTED_MODULE_5__.getBalloonCellPositionData)(editor)\n        });\n        // Create a new batch. Clicking \"Cancel\" will undo this batch.\n        this._undoStepBatch = editor.model.createBatch();\n        // Basic a11y.\n        this.view.focus();\n    }\n    /**\n     * Removes the {@link #view} from the {@link #_balloon}.\n     */\n    _hideView() {\n        const editor = this.editor;\n        this.stopListening(editor.ui, 'update');\n        this._isReady = false;\n        // Blur any input element before removing it from DOM to prevent issues in some browsers.\n        // See https://github.com/ckeditor/ckeditor5/issues/1501.\n        this.view.saveButtonView.focus();\n        this._balloon.remove(this.view);\n        // Make sure the focus is not lost in the process by putting it directly\n        // into the editing view.\n        this.editor.editing.view.focus();\n    }\n    /**\n     * Repositions the {@link #_balloon} or hides the {@link #view} if a table cell is no longer selected.\n     */\n    _updateView() {\n        const editor = this.editor;\n        const viewDocument = editor.editing.view.document;\n        if (!(0,_utils_ui_widget__WEBPACK_IMPORTED_MODULE_4__.getTableWidgetAncestor)(viewDocument.selection)) {\n            this._hideView();\n        }\n        else if (this._isViewVisible) {\n            (0,_utils_ui_contextualballoon__WEBPACK_IMPORTED_MODULE_5__.repositionContextualBalloon)(editor, 'cell');\n        }\n    }\n    /**\n     * Returns `true` when the {@link #view} is visible in the {@link #_balloon}.\n     */\n    get _isViewVisible() {\n        return !!this.view && this._balloon.visibleView === this.view;\n    }\n    /**\n     * Returns `true` when the {@link #view} is in the {@link #_balloon}.\n     */\n    get _isViewInBalloon() {\n        return !!this.view && this._balloon.hasView(this.view);\n    }\n    /**\n     * Creates a callback that when executed upon the {@link #view view's} property change\n     * executes a related editor command with the new property value.\n     *\n     * @param defaultValue The default value of the command.\n     */\n    _getPropertyChangeCallback(commandName) {\n        return (evt, propertyName, newValue) => {\n            if (!this._isReady) {\n                return;\n            }\n            this.editor.execute(commandName, {\n                value: newValue,\n                batch: this._undoStepBatch\n            });\n        };\n    }\n    /**\n     * Creates a callback that when executed upon the {@link #view view's} property change:\n     * * Executes a related editor command with the new property value if the value is valid,\n     * * Or sets the error text next to the invalid field, if the value did not pass the validation.\n     */\n    _getValidatedPropertyChangeCallback(options) {\n        const { commandName, viewField, validator, errorText } = options;\n        const setErrorTextDebounced = (0,lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(() => {\n            viewField.errorText = errorText;\n        }, ERROR_TEXT_TIMEOUT);\n        return (evt, propertyName, newValue) => {\n            setErrorTextDebounced.cancel();\n            // Do not execute the command on initial call (opening the table properties view).\n            if (!this._isReady) {\n                return;\n            }\n            if (validator(newValue)) {\n                this.editor.execute(commandName, {\n                    value: newValue,\n                    batch: this._undoStepBatch\n                });\n                viewField.errorText = null;\n            }\n            else {\n                setErrorTextDebounced();\n            }\n        };\n    }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/tablecellproperties/tablecellpropertiesui.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/tablecellproperties/ui/tablecellpropertiesview.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TableCellPropertiesView)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/ui */ \"ckeditor5/src/ui.js\");\n/* harmony import */ var ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/utils */ \"ckeditor5/src/utils.js\");\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var _utils_ui_table_properties__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/ui/table-properties */ \"./node_modules/@ckeditor/ckeditor5-table/src/utils/ui/table-properties.js\");\n/* harmony import */ var _ui_formrowview__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../ui/formrowview */ \"./node_modules/@ckeditor/ckeditor5-table/src/ui/formrowview.js\");\n/* harmony import */ var _theme_form_css__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../theme/form.css */ \"./node_modules/@ckeditor/ckeditor5-table/theme/form.css\");\n/* harmony import */ var _theme_tableform_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../theme/tableform.css */ \"./node_modules/@ckeditor/ckeditor5-table/theme/tableform.css\");\n/* harmony import */ var _theme_tablecellproperties_css__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../theme/tablecellproperties.css */ \"./node_modules/@ckeditor/ckeditor5-table/theme/tablecellproperties.css\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tablecellproperties/ui/tablecellpropertiesview\n */\n\n\n\n\n\n\n\n\nconst ALIGNMENT_ICONS = {\n    left: ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__.icons.alignLeft,\n    center: ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__.icons.alignCenter,\n    right: ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__.icons.alignRight,\n    justify: ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__.icons.alignJustify,\n    top: ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__.icons.alignTop,\n    middle: ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__.icons.alignMiddle,\n    bottom: ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__.icons.alignBottom\n};\n/**\n * The class representing a table cell properties form, allowing users to customize\n * certain style aspects of a table cell, for instance, border, padding, text alignment, etc..\n */\nclass TableCellPropertiesView extends ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.View {\n    /**\n     * @param locale The {@link module:core/editor/editor~Editor#locale} instance.\n     * @param options Additional configuration of the view.\n     * @param options.borderColors A configuration of the border color palette used by the\n     * {@link module:table/tablecellproperties/ui/tablecellpropertiesview~TableCellPropertiesView#borderColorInput}.\n     * @param options.backgroundColors A configuration of the background color palette used by the\n     * {@link module:table/tablecellproperties/ui/tablecellpropertiesview~TableCellPropertiesView#backgroundInput}.\n     * @param options.defaultTableCellProperties The default table cell properties.\n     */\n    constructor(locale, options) {\n        super(locale);\n        this.set({\n            borderStyle: '',\n            borderWidth: '',\n            borderColor: '',\n            padding: '',\n            backgroundColor: '',\n            width: '',\n            height: '',\n            horizontalAlignment: '',\n            verticalAlignment: ''\n        });\n        this.options = options;\n        const { borderStyleDropdown, borderWidthInput, borderColorInput, borderRowLabel } = this._createBorderFields();\n        const { backgroundRowLabel, backgroundInput } = this._createBackgroundFields();\n        const { widthInput, operatorLabel, heightInput, dimensionsLabel } = this._createDimensionFields();\n        const { horizontalAlignmentToolbar, verticalAlignmentToolbar, alignmentLabel } = this._createAlignmentFields();\n        this.focusTracker = new ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_1__.FocusTracker();\n        this.keystrokes = new ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_1__.KeystrokeHandler();\n        this.children = this.createCollection();\n        this.borderStyleDropdown = borderStyleDropdown;\n        this.borderWidthInput = borderWidthInput;\n        this.borderColorInput = borderColorInput;\n        this.backgroundInput = backgroundInput;\n        this.paddingInput = this._createPaddingField();\n        this.widthInput = widthInput;\n        this.heightInput = heightInput;\n        this.horizontalAlignmentToolbar = horizontalAlignmentToolbar;\n        this.verticalAlignmentToolbar = verticalAlignmentToolbar;\n        // Defer creating to make sure other fields are present and the Save button can\n        // bind its #isEnabled to their error messages so there's no way to save unless all\n        // fields are valid.\n        const { saveButtonView, cancelButtonView } = this._createActionButtons();\n        this.saveButtonView = saveButtonView;\n        this.cancelButtonView = cancelButtonView;\n        this._focusables = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.ViewCollection();\n        this._focusCycler = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.FocusCycler({\n            focusables: this._focusables,\n            focusTracker: this.focusTracker,\n            keystrokeHandler: this.keystrokes,\n            actions: {\n                // Navigate form fields backwards using the Shift + Tab keystroke.\n                focusPrevious: 'shift + tab',\n                // Navigate form fields forwards using the Tab key.\n                focusNext: 'tab'\n            }\n        });\n        // Form header.\n        this.children.add(new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.FormHeaderView(locale, {\n            label: this.t('Cell properties')\n        }));\n        // Border row.\n        this.children.add(new _ui_formrowview__WEBPACK_IMPORTED_MODULE_4__[\"default\"](locale, {\n            labelView: borderRowLabel,\n            children: [\n                borderRowLabel,\n                borderStyleDropdown,\n                borderColorInput,\n                borderWidthInput\n            ],\n            class: 'ck-table-form__border-row'\n        }));\n        // Background.\n        this.children.add(new _ui_formrowview__WEBPACK_IMPORTED_MODULE_4__[\"default\"](locale, {\n            labelView: backgroundRowLabel,\n            children: [\n                backgroundRowLabel,\n                backgroundInput\n            ],\n            class: 'ck-table-form__background-row'\n        }));\n        // Dimensions row and padding.\n        this.children.add(new _ui_formrowview__WEBPACK_IMPORTED_MODULE_4__[\"default\"](locale, {\n            children: [\n                // Dimensions row.\n                new _ui_formrowview__WEBPACK_IMPORTED_MODULE_4__[\"default\"](locale, {\n                    labelView: dimensionsLabel,\n                    children: [\n                        dimensionsLabel,\n                        widthInput,\n                        operatorLabel,\n                        heightInput\n                    ],\n                    class: 'ck-table-form__dimensions-row'\n                }),\n                // Padding row.\n                new _ui_formrowview__WEBPACK_IMPORTED_MODULE_4__[\"default\"](locale, {\n                    children: [\n                        this.paddingInput\n                    ],\n                    class: 'ck-table-cell-properties-form__padding-row'\n                })\n            ]\n        }));\n        // Text alignment row.\n        this.children.add(new _ui_formrowview__WEBPACK_IMPORTED_MODULE_4__[\"default\"](locale, {\n            labelView: alignmentLabel,\n            children: [\n                alignmentLabel,\n                horizontalAlignmentToolbar,\n                verticalAlignmentToolbar\n            ],\n            class: 'ck-table-cell-properties-form__alignment-row'\n        }));\n        // Action row.\n        this.children.add(new _ui_formrowview__WEBPACK_IMPORTED_MODULE_4__[\"default\"](locale, {\n            children: [\n                this.saveButtonView,\n                this.cancelButtonView\n            ],\n            class: 'ck-table-form__action-row'\n        }));\n        this.setTemplate({\n            tag: 'form',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-form',\n                    'ck-table-form',\n                    'ck-table-cell-properties-form'\n                ],\n                // https://github.com/ckeditor/ckeditor5-link/issues/90\n                tabindex: '-1'\n            },\n            children: this.children\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        // Enable the \"submit\" event for this view. It can be triggered by the #saveButtonView\n        // which is of the \"submit\" DOM \"type\".\n        (0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.submitHandler)({\n            view: this\n        });\n        [\n            this.borderStyleDropdown,\n            this.borderColorInput,\n            this.borderColorInput.fieldView.dropdownView.buttonView,\n            this.borderWidthInput,\n            this.backgroundInput,\n            this.backgroundInput.fieldView.dropdownView.buttonView,\n            this.widthInput,\n            this.heightInput,\n            this.paddingInput,\n            this.horizontalAlignmentToolbar,\n            this.verticalAlignmentToolbar,\n            this.saveButtonView,\n            this.cancelButtonView\n        ].forEach(view => {\n            // Register the view as focusable.\n            this._focusables.add(view);\n            // Register the view in the focus tracker.\n            this.focusTracker.add(view.element);\n        });\n        // Mainly for closing using \"Esc\" and navigation using \"Tab\".\n        this.keystrokes.listenTo(this.element);\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        super.destroy();\n        this.focusTracker.destroy();\n        this.keystrokes.destroy();\n    }\n    /**\n     * Focuses the fist focusable field in the form.\n     */\n    focus() {\n        this._focusCycler.focusFirst();\n    }\n    /**\n     * Creates the following form fields:\n     *\n     * * {@link #borderStyleDropdown},\n     * * {@link #borderWidthInput},\n     * * {@link #borderColorInput}.\n     */\n    _createBorderFields() {\n        const defaultTableCellProperties = this.options.defaultTableCellProperties;\n        const defaultBorder = {\n            style: defaultTableCellProperties.borderStyle,\n            width: defaultTableCellProperties.borderWidth,\n            color: defaultTableCellProperties.borderColor\n        };\n        const colorInputCreator = (0,_utils_ui_table_properties__WEBPACK_IMPORTED_MODULE_3__.getLabeledColorInputCreator)({\n            colorConfig: this.options.borderColors,\n            columns: 5,\n            defaultColorValue: defaultBorder.color,\n            colorPickerConfig: this.options.colorPickerConfig\n        });\n        const locale = this.locale;\n        const t = this.t;\n        const accessibleLabel = t('Style');\n        // -- Group label ---------------------------------------------\n        const borderRowLabel = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.LabelView(locale);\n        borderRowLabel.text = t('Border');\n        // -- Style ---------------------------------------------------\n        const styleLabels = (0,_utils_ui_table_properties__WEBPACK_IMPORTED_MODULE_3__.getBorderStyleLabels)(t);\n        const borderStyleDropdown = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.LabeledFieldView(locale, ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.createLabeledDropdown);\n        borderStyleDropdown.set({\n            label: accessibleLabel,\n            class: 'ck-table-form__border-style'\n        });\n        borderStyleDropdown.fieldView.buttonView.set({\n            ariaLabel: accessibleLabel,\n            ariaLabelledBy: undefined,\n            isOn: false,\n            withText: true,\n            tooltip: accessibleLabel\n        });\n        borderStyleDropdown.fieldView.buttonView.bind('label').to(this, 'borderStyle', value => {\n            return styleLabels[value ? value : 'none'];\n        });\n        borderStyleDropdown.fieldView.on('execute', evt => {\n            this.borderStyle = evt.source._borderStyleValue;\n        });\n        borderStyleDropdown.bind('isEmpty').to(this, 'borderStyle', value => !value);\n        (0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.addListToDropdown)(borderStyleDropdown.fieldView, (0,_utils_ui_table_properties__WEBPACK_IMPORTED_MODULE_3__.getBorderStyleDefinitions)(this, defaultBorder.style), {\n            role: 'menu',\n            ariaLabel: accessibleLabel\n        });\n        // -- Width ---------------------------------------------------\n        const borderWidthInput = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.LabeledFieldView(locale, ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.createLabeledInputText);\n        borderWidthInput.set({\n            label: t('Width'),\n            class: 'ck-table-form__border-width'\n        });\n        borderWidthInput.fieldView.bind('value').to(this, 'borderWidth');\n        borderWidthInput.bind('isEnabled').to(this, 'borderStyle', isBorderStyleSet);\n        borderWidthInput.fieldView.on('input', () => {\n            this.borderWidth = borderWidthInput.fieldView.element.value;\n        });\n        // -- Color ---------------------------------------------------\n        const borderColorInput = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.LabeledFieldView(locale, colorInputCreator);\n        borderColorInput.set({\n            label: t('Color'),\n            class: 'ck-table-form__border-color'\n        });\n        borderColorInput.fieldView.bind('value').to(this, 'borderColor');\n        borderColorInput.bind('isEnabled').to(this, 'borderStyle', isBorderStyleSet);\n        borderColorInput.fieldView.on('input', () => {\n            this.borderColor = borderColorInput.fieldView.value;\n        });\n        // Reset the border color and width fields depending on the `border-style` value.\n        this.on('change:borderStyle', (evt, name, newValue, oldValue) => {\n            // When removing the border (`border-style:none`), clear the remaining `border-*` properties.\n            // See: https://github.com/ckeditor/ckeditor5/issues/6227.\n            if (!isBorderStyleSet(newValue)) {\n                this.borderColor = '';\n                this.borderWidth = '';\n            }\n            // When setting the `border-style` from `none`, set the default `border-color` and `border-width` properties.\n            if (!isBorderStyleSet(oldValue)) {\n                this.borderColor = defaultBorder.color;\n                this.borderWidth = defaultBorder.width;\n            }\n        });\n        return {\n            borderRowLabel,\n            borderStyleDropdown,\n            borderColorInput,\n            borderWidthInput\n        };\n    }\n    /**\n     * Creates the following form fields:\n     *\n     * * {@link #backgroundInput}.\n     */\n    _createBackgroundFields() {\n        const locale = this.locale;\n        const t = this.t;\n        // -- Group label ---------------------------------------------\n        const backgroundRowLabel = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.LabelView(locale);\n        backgroundRowLabel.text = t('Background');\n        // -- Background color input -----------------------------------\n        const colorInputCreator = (0,_utils_ui_table_properties__WEBPACK_IMPORTED_MODULE_3__.getLabeledColorInputCreator)({\n            colorConfig: this.options.backgroundColors,\n            columns: 5,\n            defaultColorValue: this.options.defaultTableCellProperties.backgroundColor,\n            colorPickerConfig: this.options.colorPickerConfig\n        });\n        const backgroundInput = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.LabeledFieldView(locale, colorInputCreator);\n        backgroundInput.set({\n            label: t('Color'),\n            class: 'ck-table-cell-properties-form__background'\n        });\n        backgroundInput.fieldView.bind('value').to(this, 'backgroundColor');\n        backgroundInput.fieldView.on('input', () => {\n            this.backgroundColor = backgroundInput.fieldView.value;\n        });\n        return {\n            backgroundRowLabel,\n            backgroundInput\n        };\n    }\n    /**\n     * Creates the following form fields:\n     *\n     * * {@link #widthInput}.\n     * * {@link #heightInput}.\n     */\n    _createDimensionFields() {\n        const locale = this.locale;\n        const t = this.t;\n        // -- Label ---------------------------------------------------\n        const dimensionsLabel = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.LabelView(locale);\n        dimensionsLabel.text = t('Dimensions');\n        // -- Width ---------------------------------------------------\n        const widthInput = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.LabeledFieldView(locale, ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.createLabeledInputText);\n        widthInput.set({\n            label: t('Width'),\n            class: 'ck-table-form__dimensions-row__width'\n        });\n        widthInput.fieldView.bind('value').to(this, 'width');\n        widthInput.fieldView.on('input', () => {\n            this.width = widthInput.fieldView.element.value;\n        });\n        // -- Operator ---------------------------------------------------\n        const operatorLabel = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.View(locale);\n        operatorLabel.setTemplate({\n            tag: 'span',\n            attributes: {\n                class: [\n                    'ck-table-form__dimension-operator'\n                ]\n            },\n            children: [\n                { text: '×' }\n            ]\n        });\n        // -- Height ---------------------------------------------------\n        const heightInput = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.LabeledFieldView(locale, ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.createLabeledInputText);\n        heightInput.set({\n            label: t('Height'),\n            class: 'ck-table-form__dimensions-row__height'\n        });\n        heightInput.fieldView.bind('value').to(this, 'height');\n        heightInput.fieldView.on('input', () => {\n            this.height = heightInput.fieldView.element.value;\n        });\n        return {\n            dimensionsLabel,\n            widthInput,\n            operatorLabel,\n            heightInput\n        };\n    }\n    /**\n     * Creates the following form fields:\n     *\n     * * {@link #paddingInput}.\n     */\n    _createPaddingField() {\n        const locale = this.locale;\n        const t = this.t;\n        const paddingInput = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.LabeledFieldView(locale, ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.createLabeledInputText);\n        paddingInput.set({\n            label: t('Padding'),\n            class: 'ck-table-cell-properties-form__padding'\n        });\n        paddingInput.fieldView.bind('value').to(this, 'padding');\n        paddingInput.fieldView.on('input', () => {\n            this.padding = paddingInput.fieldView.element.value;\n        });\n        return paddingInput;\n    }\n    /**\n     * Creates the following form fields:\n     *\n     * * {@link #horizontalAlignmentToolbar},\n     * * {@link #verticalAlignmentToolbar}.\n     */\n    _createAlignmentFields() {\n        const locale = this.locale;\n        const t = this.t;\n        const alignmentLabel = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.LabelView(locale);\n        alignmentLabel.text = t('Table cell text alignment');\n        // -- Horizontal ---------------------------------------------------\n        const horizontalAlignmentToolbar = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.ToolbarView(locale);\n        const isContentRTL = locale.contentLanguageDirection === 'rtl';\n        horizontalAlignmentToolbar.set({\n            isCompact: true,\n            ariaLabel: t('Horizontal text alignment toolbar')\n        });\n        (0,_utils_ui_table_properties__WEBPACK_IMPORTED_MODULE_3__.fillToolbar)({\n            view: this,\n            icons: ALIGNMENT_ICONS,\n            toolbar: horizontalAlignmentToolbar,\n            labels: this._horizontalAlignmentLabels,\n            propertyName: 'horizontalAlignment',\n            nameToValue: name => {\n                // For the RTL content, we want to swap the buttons \"align to the left\" and \"align to the right\".\n                if (isContentRTL) {\n                    if (name === 'left') {\n                        return 'right';\n                    }\n                    else if (name === 'right') {\n                        return 'left';\n                    }\n                }\n                return name;\n            },\n            defaultValue: this.options.defaultTableCellProperties.horizontalAlignment\n        });\n        // -- Vertical -----------------------------------------------------\n        const verticalAlignmentToolbar = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.ToolbarView(locale);\n        verticalAlignmentToolbar.set({\n            isCompact: true,\n            ariaLabel: t('Vertical text alignment toolbar')\n        });\n        (0,_utils_ui_table_properties__WEBPACK_IMPORTED_MODULE_3__.fillToolbar)({\n            view: this,\n            icons: ALIGNMENT_ICONS,\n            toolbar: verticalAlignmentToolbar,\n            labels: this._verticalAlignmentLabels,\n            propertyName: 'verticalAlignment',\n            defaultValue: this.options.defaultTableCellProperties.verticalAlignment\n        });\n        return {\n            horizontalAlignmentToolbar,\n            verticalAlignmentToolbar,\n            alignmentLabel\n        };\n    }\n    /**\n     * Creates the following form controls:\n     *\n     * * {@link #saveButtonView},\n     * * {@link #cancelButtonView}.\n     */\n    _createActionButtons() {\n        const locale = this.locale;\n        const t = this.t;\n        const saveButtonView = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.ButtonView(locale);\n        const cancelButtonView = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.ButtonView(locale);\n        const fieldsThatShouldValidateToSave = [\n            this.borderWidthInput,\n            this.borderColorInput,\n            this.backgroundInput,\n            this.paddingInput\n        ];\n        saveButtonView.set({\n            label: t('Save'),\n            icon: ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__.icons.check,\n            class: 'ck-button-save',\n            type: 'submit',\n            withText: true\n        });\n        saveButtonView.bind('isEnabled').toMany(fieldsThatShouldValidateToSave, 'errorText', (...errorTexts) => {\n            return errorTexts.every(errorText => !errorText);\n        });\n        cancelButtonView.set({\n            label: t('Cancel'),\n            icon: ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__.icons.cancel,\n            class: 'ck-button-cancel',\n            withText: true\n        });\n        cancelButtonView.delegate('execute').to(this, 'cancel');\n        return {\n            saveButtonView, cancelButtonView\n        };\n    }\n    /**\n     * Provides localized labels for {@link #horizontalAlignmentToolbar} buttons.\n     */\n    get _horizontalAlignmentLabels() {\n        const locale = this.locale;\n        const t = this.t;\n        const left = t('Align cell text to the left');\n        const center = t('Align cell text to the center');\n        const right = t('Align cell text to the right');\n        const justify = t('Justify cell text');\n        // Returns object with a proper order of labels.\n        if (locale.uiLanguageDirection === 'rtl') {\n            return { right, center, left, justify };\n        }\n        else {\n            return { left, center, right, justify };\n        }\n    }\n    /**\n     * Provides localized labels for {@link #verticalAlignmentToolbar} buttons.\n     */\n    get _verticalAlignmentLabels() {\n        const t = this.t;\n        return {\n            top: t('Align cell text to the top'),\n            middle: t('Align cell text to the middle'),\n            bottom: t('Align cell text to the bottom')\n        };\n    }\n}\nfunction isBorderStyleSet(value) {\n    return value !== 'none';\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/tablecellproperties/ui/tablecellpropertiesview.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/tablecellwidth/commands/tablecellwidthcommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TableCellWidthCommand)\n/* harmony export */ });\n/* harmony import */ var _tablecellproperties_commands_tablecellpropertycommand__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tablecellproperties/commands/tablecellpropertycommand */ \"./node_modules/@ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellpropertycommand.js\");\n/* harmony import */ var _utils_table_properties__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/table-properties */ \"./node_modules/@ckeditor/ckeditor5-table/src/utils/table-properties.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n\n/**\n * The table cell width command.\n *\n * The command is registered by the {@link module:table/tablecellwidth/tablecellwidthediting~TableCellWidthEditing} as\n * the `'tableCellWidth'` editor command.\n *\n * To change the width of selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'tableCellWidth', {\n *   value: '50px'\n * } );\n * ```\n *\n * **Note**: This command adds a default `'px'` unit to numeric values. Executing:\n *\n * ```ts\n * editor.execute( 'tableCellWidth', {\n *   value: '50'\n * } );\n * ```\n *\n * will set the `width` attribute to `'50px'` in the model.\n */\nclass TableCellWidthCommand extends _tablecellproperties_commands_tablecellpropertycommand__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `TableCellWidthCommand` instance.\n     *\n     * @param editor An editor in which this command will be used.\n     * @param defaultValue The default value of the attribute.\n     */\n    constructor(editor, defaultValue) {\n        super(editor, 'tableCellWidth', defaultValue);\n    }\n    /**\n     * @inheritDoc\n     */\n    _getValueToSet(value) {\n        value = (0,_utils_table_properties__WEBPACK_IMPORTED_MODULE_1__.addDefaultUnitToNumericValue)(value, 'px');\n        if (value === this._defaultValue) {\n            return;\n        }\n        return value;\n    }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/tablecellwidth/commands/tablecellwidthcommand.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/tablecellwidth/tablecellwidthediting.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ TableCellWidthEditing)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/* harmony import */ var _tableediting__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../tableediting */ "./node_modules/@ckeditor/ckeditor5-table/src/tableediting.js");\n/* harmony import */ var _commands_tablecellwidthcommand__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commands/tablecellwidthcommand */ "./node_modules/@ckeditor/ckeditor5-table/src/tablecellwidth/commands/tablecellwidthcommand.js");\n/* harmony import */ var _utils_table_properties__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/table-properties */ "./node_modules/@ckeditor/ckeditor5-table/src/utils/table-properties.js");\n/* harmony import */ var _utils_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/common */ "./node_modules/@ckeditor/ckeditor5-table/src/utils/common.js");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tablecellwidth/tablecellwidthediting\n */\n\n\n\n\n\n/**\n * The table cell width editing feature.\n *\n * Introduces `tableCellWidth` table cell model attribute alongside with its converters\n * and a command.\n */\nclass TableCellWidthEditing extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return \'TableCellWidthEditing\';\n    }\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [_tableediting__WEBPACK_IMPORTED_MODULE_1__["default"]];\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const defaultTableCellProperties = (0,_utils_table_properties__WEBPACK_IMPORTED_MODULE_3__.getNormalizedDefaultProperties)(editor.config.get(\'table.tableCellProperties.defaultProperties\'));\n        (0,_utils_common__WEBPACK_IMPORTED_MODULE_4__.enableProperty)(editor.model.schema, editor.conversion, {\n            modelAttribute: \'tableCellWidth\',\n            styleName: \'width\',\n            defaultValue: defaultTableCellProperties.width\n        });\n        editor.commands.add(\'tableCellWidth\', new _commands_tablecellwidthcommand__WEBPACK_IMPORTED_MODULE_2__["default"](editor, defaultTableCellProperties.width));\n    }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/tablecellwidth/tablecellwidthediting.js?')},"./node_modules/@ckeditor/ckeditor5-table/src/tableclipboard.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TableClipboard)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var _tableselection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tableselection */ \"./node_modules/@ckeditor/ckeditor5-table/src/tableselection.js\");\n/* harmony import */ var _tablewalker__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tablewalker */ \"./node_modules/@ckeditor/ckeditor5-table/src/tablewalker.js\");\n/* harmony import */ var _tableutils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tableutils */ \"./node_modules/@ckeditor/ckeditor5-table/src/tableutils.js\");\n/* harmony import */ var _utils_structure__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/structure */ \"./node_modules/@ckeditor/ckeditor5-table/src/utils/structure.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n\n\n\n\n/**\n * This plugin adds support for copying/cutting/pasting fragments of tables.\n * It is loaded automatically by the {@link module:table/table~Table} plugin.\n */\nclass TableClipboard extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'TableClipboard';\n    }\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [_tableselection__WEBPACK_IMPORTED_MODULE_1__[\"default\"], _tableutils__WEBPACK_IMPORTED_MODULE_3__[\"default\"]];\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const viewDocument = editor.editing.view.document;\n        this.listenTo(viewDocument, 'copy', (evt, data) => this._onCopyCut(evt, data));\n        this.listenTo(viewDocument, 'cut', (evt, data) => this._onCopyCut(evt, data));\n        this.listenTo(editor.model, 'insertContent', (evt, [content, selectable]) => this._onInsertContent(evt, content, selectable), { priority: 'high' });\n        this.decorate('_replaceTableSlotCell');\n    }\n    /**\n     * Copies table content to a clipboard on \"copy\" & \"cut\" events.\n     *\n     * @param evt An object containing information about the handled event.\n     * @param data Clipboard event data.\n     */\n    _onCopyCut(evt, data) {\n        const tableSelection = this.editor.plugins.get(_tableselection__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n        if (!tableSelection.getSelectedTableCells()) {\n            return;\n        }\n        if (evt.name == 'cut' && !this.editor.model.canEditAt(this.editor.model.document.selection)) {\n            return;\n        }\n        data.preventDefault();\n        evt.stop();\n        const dataController = this.editor.data;\n        const viewDocument = this.editor.editing.view.document;\n        const content = dataController.toView(tableSelection.getSelectionAsFragment());\n        viewDocument.fire('clipboardOutput', {\n            dataTransfer: data.dataTransfer,\n            content,\n            method: evt.name\n        });\n    }\n    /**\n     * Overrides default {@link module:engine/model/model~Model#insertContent `model.insertContent()`} method to handle pasting table inside\n     * selected table fragment.\n     *\n     * Depending on selected table fragment:\n     * - If a selected table fragment is smaller than paste table it will crop pasted table to match dimensions.\n     * - If dimensions are equal it will replace selected table fragment with a pasted table contents.\n     *\n     * @param content The content to insert.\n     * @param selectable The selection into which the content should be inserted.\n     * If not provided the current model document selection will be used.\n     */\n    _onInsertContent(evt, content, selectable) {\n        if (selectable && !selectable.is('documentSelection')) {\n            return;\n        }\n        const model = this.editor.model;\n        const tableUtils = this.editor.plugins.get(_tableutils__WEBPACK_IMPORTED_MODULE_3__[\"default\"]);\n        // We might need to crop table before inserting so reference might change.\n        let pastedTable = this.getTableIfOnlyTableInContent(content, model);\n        if (!pastedTable) {\n            return;\n        }\n        const selectedTableCells = tableUtils.getSelectionAffectedTableCells(model.document.selection);\n        if (!selectedTableCells.length) {\n            (0,_utils_structure__WEBPACK_IMPORTED_MODULE_4__.removeEmptyRowsColumns)(pastedTable, tableUtils);\n            return;\n        }\n        // Override default model.insertContent() handling at this point.\n        evt.stop();\n        model.change(writer => {\n            const pastedDimensions = {\n                width: tableUtils.getColumns(pastedTable),\n                height: tableUtils.getRows(pastedTable)\n            };\n            // Prepare the table for pasting.\n            const selection = prepareTableForPasting(selectedTableCells, pastedDimensions, writer, tableUtils);\n            // Beyond this point we operate on a fixed content table with rectangular selection and proper last row/column values.\n            const selectionHeight = selection.lastRow - selection.firstRow + 1;\n            const selectionWidth = selection.lastColumn - selection.firstColumn + 1;\n            // Crop pasted table if:\n            // - Pasted table dimensions exceeds selection area.\n            // - Pasted table has broken layout (ie some cells sticks out by the table dimensions established by the first and last row).\n            //\n            // Note: The table dimensions are established by the width of the first row and the total number of rows.\n            // It is possible to programmatically create a table that has rows which would have cells anchored beyond first row width but\n            // such table will not be created by other editing solutions.\n            const cropDimensions = {\n                startRow: 0,\n                startColumn: 0,\n                endRow: Math.min(selectionHeight, pastedDimensions.height) - 1,\n                endColumn: Math.min(selectionWidth, pastedDimensions.width) - 1\n            };\n            pastedTable = (0,_utils_structure__WEBPACK_IMPORTED_MODULE_4__.cropTableToDimensions)(pastedTable, cropDimensions, writer);\n            // Content table to which we insert a pasted table.\n            const selectedTable = selectedTableCells[0].findAncestor('table');\n            const cellsToSelect = this._replaceSelectedCellsWithPasted(pastedTable, pastedDimensions, selectedTable, selection, writer);\n            if (this.editor.plugins.get('TableSelection').isEnabled) {\n                // Selection ranges must be sorted because the first and last selection ranges are considered\n                // as anchor/focus cell ranges for multi-cell selection.\n                const selectionRanges = tableUtils.sortRanges(cellsToSelect.map(cell => writer.createRangeOn(cell)));\n                writer.setSelection(selectionRanges);\n            }\n            else {\n                // Set selection inside first cell if multi-cell selection is disabled.\n                writer.setSelection(cellsToSelect[0], 0);\n            }\n        });\n    }\n    /**\n     * Replaces the part of selectedTable with pastedTable.\n     */\n    _replaceSelectedCellsWithPasted(pastedTable, pastedDimensions, selectedTable, selection, writer) {\n        const { width: pastedWidth, height: pastedHeight } = pastedDimensions;\n        // Holds two-dimensional array that is addressed by [ row ][ column ] that stores cells anchored at given location.\n        const pastedTableLocationMap = createLocationMap(pastedTable, pastedWidth, pastedHeight);\n        const selectedTableMap = [...new _tablewalker__WEBPACK_IMPORTED_MODULE_2__[\"default\"](selectedTable, {\n                startRow: selection.firstRow,\n                endRow: selection.lastRow,\n                startColumn: selection.firstColumn,\n                endColumn: selection.lastColumn,\n                includeAllSlots: true\n            })];\n        // Selection must be set to pasted cells (some might be removed or new created).\n        const cellsToSelect = [];\n        // Store next cell insert position.\n        let insertPosition;\n        // Content table replace cells algorithm iterates over a selected table fragment and:\n        //\n        // - Removes existing table cells at current slot (location).\n        // - Inserts cell from a pasted table for a matched slots.\n        //\n        // This ensures proper table geometry after the paste\n        for (const tableSlot of selectedTableMap) {\n            const { row, column } = tableSlot;\n            // Save the insert position for current row start.\n            if (column === selection.firstColumn) {\n                insertPosition = tableSlot.getPositionBefore();\n            }\n            // Map current table slot location to an pasted table slot location.\n            const pastedRow = row - selection.firstRow;\n            const pastedColumn = column - selection.firstColumn;\n            const pastedCell = pastedTableLocationMap[pastedRow % pastedHeight][pastedColumn % pastedWidth];\n            // Clone cell to insert (to duplicate its attributes and children).\n            // Cloning is required to support repeating pasted table content when inserting to a bigger selection.\n            const cellToInsert = pastedCell ? writer.cloneElement(pastedCell) : null;\n            // Replace the cell from the current slot with new table cell.\n            const newTableCell = this._replaceTableSlotCell(tableSlot, cellToInsert, insertPosition, writer);\n            // The cell was only removed.\n            if (!newTableCell) {\n                continue;\n            }\n            // Trim the cell if it's row/col-spans would exceed selection area.\n            (0,_utils_structure__WEBPACK_IMPORTED_MODULE_4__.trimTableCellIfNeeded)(newTableCell, row, column, selection.lastRow, selection.lastColumn, writer);\n            cellsToSelect.push(newTableCell);\n            insertPosition = writer.createPositionAfter(newTableCell);\n        }\n        // If there are any headings, all the cells that overlap from heading must be splitted.\n        const headingRows = parseInt(selectedTable.getAttribute('headingRows') || '0');\n        const headingColumns = parseInt(selectedTable.getAttribute('headingColumns') || '0');\n        const areHeadingRowsIntersectingSelection = selection.firstRow < headingRows && headingRows <= selection.lastRow;\n        const areHeadingColumnsIntersectingSelection = selection.firstColumn < headingColumns && headingColumns <= selection.lastColumn;\n        if (areHeadingRowsIntersectingSelection) {\n            const columnsLimit = { first: selection.firstColumn, last: selection.lastColumn };\n            const newCells = doHorizontalSplit(selectedTable, headingRows, columnsLimit, writer, selection.firstRow);\n            cellsToSelect.push(...newCells);\n        }\n        if (areHeadingColumnsIntersectingSelection) {\n            const rowsLimit = { first: selection.firstRow, last: selection.lastRow };\n            const newCells = doVerticalSplit(selectedTable, headingColumns, rowsLimit, writer);\n            cellsToSelect.push(...newCells);\n        }\n        return cellsToSelect;\n    }\n    /**\n     * Replaces a single table slot.\n     *\n     * @returns Inserted table cell or null if slot should remain empty.\n     * @private\n     */\n    _replaceTableSlotCell(tableSlot, cellToInsert, insertPosition, writer) {\n        const { cell, isAnchor } = tableSlot;\n        // If the slot is occupied by a cell in a selected table - remove it.\n        // The slot of this cell will be either:\n        // - Replaced by a pasted table cell.\n        // - Spanned by a previously pasted table cell.\n        if (isAnchor) {\n            writer.remove(cell);\n        }\n        // There is no cell to insert (might be spanned by other cell in a pasted table) - advance to the next content table slot.\n        if (!cellToInsert) {\n            return null;\n        }\n        writer.insert(cellToInsert, insertPosition);\n        return cellToInsert;\n    }\n    /**\n     * Extracts the table for pasting into a table.\n     *\n     * @param content The content to insert.\n     * @param model The editor model.\n     */\n    getTableIfOnlyTableInContent(content, model) {\n        if (!content.is('documentFragment') && !content.is('element')) {\n            return null;\n        }\n        // Table passed directly.\n        if (content.is('element', 'table')) {\n            return content;\n        }\n        // We do not support mixed content when pasting table into table.\n        // See: https://github.com/ckeditor/ckeditor5/issues/6817.\n        if (content.childCount == 1 && content.getChild(0).is('element', 'table')) {\n            return content.getChild(0);\n        }\n        // If there are only whitespaces around a table then use that table for pasting.\n        const contentRange = model.createRangeIn(content);\n        for (const element of contentRange.getItems()) {\n            if (element.is('element', 'table')) {\n                // Stop checking if there is some content before table.\n                const rangeBefore = model.createRange(contentRange.start, model.createPositionBefore(element));\n                if (model.hasContent(rangeBefore, { ignoreWhitespaces: true })) {\n                    return null;\n                }\n                // Stop checking if there is some content after table.\n                const rangeAfter = model.createRange(model.createPositionAfter(element), contentRange.end);\n                if (model.hasContent(rangeAfter, { ignoreWhitespaces: true })) {\n                    return null;\n                }\n                // There wasn't any content neither before nor after.\n                return element;\n            }\n        }\n        return null;\n    }\n}\n/**\n * Prepares a table for pasting and returns adjusted selection dimensions.\n */\nfunction prepareTableForPasting(selectedTableCells, pastedDimensions, writer, tableUtils) {\n    const selectedTable = selectedTableCells[0].findAncestor('table');\n    const columnIndexes = tableUtils.getColumnIndexes(selectedTableCells);\n    const rowIndexes = tableUtils.getRowIndexes(selectedTableCells);\n    const selection = {\n        firstColumn: columnIndexes.first,\n        lastColumn: columnIndexes.last,\n        firstRow: rowIndexes.first,\n        lastRow: rowIndexes.last\n    };\n    // Single cell selected - expand selection to pasted table dimensions.\n    const shouldExpandSelection = selectedTableCells.length === 1;\n    if (shouldExpandSelection) {\n        selection.lastRow += pastedDimensions.height - 1;\n        selection.lastColumn += pastedDimensions.width - 1;\n        expandTableSize(selectedTable, selection.lastRow + 1, selection.lastColumn + 1, tableUtils);\n    }\n    // In case of expanding selection we do not reset the selection so in this case we will always try to fix selection\n    // like in the case of a non-rectangular area. This might be fixed by re-setting selected cells array but this shortcut is safe.\n    if (shouldExpandSelection || !tableUtils.isSelectionRectangular(selectedTableCells)) {\n        // For a non-rectangular selection (ie in which some cells sticks out from a virtual selection rectangle) we need to create\n        // a table layout that has a rectangular selection. This will split cells so the selection become rectangular.\n        // Beyond this point we will operate on fixed content table.\n        splitCellsToRectangularSelection(selectedTable, selection, writer);\n    }\n    // However a selected table fragment might be invalid if examined alone. Ie such table fragment:\n    //\n    //    +---+---+---+---+\n    //  0 | a | b | c | d |\n    //    +   +   +---+---+\n    //  1 |   | e | f | g |\n    //    +   +---+   +---+\n    //  2 |   | h |   | i | <- last row, each cell has rowspan = 2,\n    //    +   +   +   +   +    so we need to return 3, not 2\n    //  3 |   |   |   |   |\n    //    +---+---+---+---+\n    //\n    // is invalid as the cells \"h\" and \"i\" have rowspans.\n    // This case needs only adjusting the selection dimension as the rest of the algorithm operates on empty slots also.\n    else {\n        selection.lastRow = (0,_utils_structure__WEBPACK_IMPORTED_MODULE_4__.adjustLastRowIndex)(selectedTable, selection);\n        selection.lastColumn = (0,_utils_structure__WEBPACK_IMPORTED_MODULE_4__.adjustLastColumnIndex)(selectedTable, selection);\n    }\n    return selection;\n}\n/**\n * Expand table (in place) to expected size.\n */\nfunction expandTableSize(table, expectedHeight, expectedWidth, tableUtils) {\n    const tableWidth = tableUtils.getColumns(table);\n    const tableHeight = tableUtils.getRows(table);\n    if (expectedWidth > tableWidth) {\n        tableUtils.insertColumns(table, {\n            at: tableWidth,\n            columns: expectedWidth - tableWidth\n        });\n    }\n    if (expectedHeight > tableHeight) {\n        tableUtils.insertRows(table, {\n            at: tableHeight,\n            rows: expectedHeight - tableHeight\n        });\n    }\n}\n/**\n * Returns two-dimensional array that is addressed by [ row ][ column ] that stores cells anchored at given location.\n *\n * At given row & column location it might be one of:\n *\n * * cell - cell from pasted table anchored at this location.\n * * null - if no cell is anchored at this location.\n *\n * For instance, from a table below:\n *\n *   +----+----+----+----+\n *   | 00 | 01 | 02 | 03 |\n *   +    +----+----+----+\n *   |    | 11      | 13 |\n *   +----+         +----+\n *   | 20 |         | 23 |\n *   +----+----+----+----+\n *\n * The method will return an array (numbers represents cell element):\n *\n * ```ts\n * const map = [\n *   [ '00', '01', '02', '03' ],\n *   [ null, '11', null, '13' ],\n *   [ '20', null, null, '23' ]\n * ]\n * ```\n *\n * This allows for a quick access to table at give row & column. For instance to access table cell \"13\" from pasted table call:\n *\n * ```ts\n * const cell = map[ 1 ][ 3 ]\n * ```\n */\nfunction createLocationMap(table, width, height) {\n    // Create height x width (row x column) two-dimensional table to store cells.\n    const map = new Array(height).fill(null)\n        .map(() => new Array(width).fill(null));\n    for (const { column, row, cell } of new _tablewalker__WEBPACK_IMPORTED_MODULE_2__[\"default\"](table)) {\n        map[row][column] = cell;\n    }\n    return map;\n}\n/**\n * Make selected cells rectangular by splitting the cells that stand out from a rectangular selection.\n *\n * In the table below a selection is shown with \"::\" and slots with anchor cells are named.\n *\n * +----+----+----+----+----+                    +----+----+----+----+----+\n * | 00 | 01 | 02 | 03      |                    | 00 | 01 | 02 | 03      |\n * +    +----+    +----+----+                    |    ::::::::::::::::----+\n * |    | 11 |    | 13 | 14 |                    |    ::11 |    | 13:: 14 |    <- first row\n * +----+----+    +    +----+                    +----::---|    |   ::----+\n * | 20 | 21 |    |    | 24 |   select cells:    | 20 ::21 |    |   :: 24 |\n * +----+----+    +----+----+     11 -> 33       +----::---|    |---::----+\n * | 30      |    | 33 | 34 |                    | 30 ::   |    | 33:: 34 |    <- last row\n * +         +    +----+    +                    |    ::::::::::::::::    +\n * |         |    | 43 |    |                    |         |    | 43 |    |\n * +----+----+----+----+----+                    +----+----+----+----+----+\n *                                                      ^          ^\n *                                                     first & last columns\n *\n * Will update table to:\n *\n *                       +----+----+----+----+----+\n *                       | 00 | 01 | 02 | 03      |\n *                       +    +----+----+----+----+\n *                       |    | 11 |    | 13 | 14 |\n *                       +----+----+    +    +----+\n *                       | 20 | 21 |    |    | 24 |\n *                       +----+----+    +----+----+\n *                       | 30 |    |    | 33 | 34 |\n *                       +    +----+----+----+    +\n *                       |    |    |    | 43 |    |\n *                       +----+----+----+----+----+\n *\n * In th example above:\n * - Cell \"02\" which have `rowspan = 4` must be trimmed at first and at after last row.\n * - Cell \"03\" which have `rowspan = 2` and `colspan = 2` must be trimmed at first column and after last row.\n * - Cells \"00\", \"03\" & \"30\" which cannot be cut by this algorithm as they are outside the trimmed area.\n * - Cell \"13\" cannot be cut as it is inside the trimmed area.\n */\nfunction splitCellsToRectangularSelection(table, dimensions, writer) {\n    const { firstRow, lastRow, firstColumn, lastColumn } = dimensions;\n    const rowIndexes = { first: firstRow, last: lastRow };\n    const columnIndexes = { first: firstColumn, last: lastColumn };\n    // 1. Split cells vertically in two steps as first step might create cells that needs to split again.\n    doVerticalSplit(table, firstColumn, rowIndexes, writer);\n    doVerticalSplit(table, lastColumn + 1, rowIndexes, writer);\n    // 2. Split cells horizontally in two steps as first step might create cells that needs to split again.\n    doHorizontalSplit(table, firstRow, columnIndexes, writer);\n    doHorizontalSplit(table, lastRow + 1, columnIndexes, writer, firstRow);\n}\nfunction doHorizontalSplit(table, splitRow, limitColumns, writer, startRow = 0) {\n    // If selection starts at first row then no split is needed.\n    if (splitRow < 1) {\n        return;\n    }\n    const overlappingCells = (0,_utils_structure__WEBPACK_IMPORTED_MODULE_4__.getVerticallyOverlappingCells)(table, splitRow, startRow);\n    // Filter out cells that are not touching insides of the rectangular selection.\n    const cellsToSplit = overlappingCells.filter(({ column, cellWidth }) => isAffectedBySelection(column, cellWidth, limitColumns));\n    return cellsToSplit.map(({ cell }) => (0,_utils_structure__WEBPACK_IMPORTED_MODULE_4__.splitHorizontally)(cell, splitRow, writer));\n}\nfunction doVerticalSplit(table, splitColumn, limitRows, writer) {\n    // If selection starts at first column then no split is needed.\n    if (splitColumn < 1) {\n        return;\n    }\n    const overlappingCells = (0,_utils_structure__WEBPACK_IMPORTED_MODULE_4__.getHorizontallyOverlappingCells)(table, splitColumn);\n    // Filter out cells that are not touching insides of the rectangular selection.\n    const cellsToSplit = overlappingCells.filter(({ row, cellHeight }) => isAffectedBySelection(row, cellHeight, limitRows));\n    return cellsToSplit.map(({ cell, column }) => (0,_utils_structure__WEBPACK_IMPORTED_MODULE_4__.splitVertically)(cell, column, splitColumn, writer));\n}\n/**\n * Checks if cell at given row (column) is affected by a rectangular selection defined by first/last column (row).\n *\n * The same check is used for row as for column.\n */\nfunction isAffectedBySelection(index, span, limit) {\n    const endIndex = index + span - 1;\n    const { first, last } = limit;\n    const isInsideSelection = index >= first && index <= last;\n    const overlapsSelectionFromOutside = index < first && endIndex >= first;\n    return isInsideSelection || overlapsSelectionFromOutside;\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/tableclipboard.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/tablecolumnresize.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ TableColumnResize)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/* harmony import */ var _tablecolumnresize_tablecolumnresizeediting__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tablecolumnresize/tablecolumnresizeediting */ "./node_modules/@ckeditor/ckeditor5-table/src/tablecolumnresize/tablecolumnresizeediting.js");\n/* harmony import */ var _tablecellwidth_tablecellwidthediting__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tablecellwidth/tablecellwidthediting */ "./node_modules/@ckeditor/ckeditor5-table/src/tablecellwidth/tablecellwidthediting.js");\n/* harmony import */ var _theme_tablecolumnresize_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../theme/tablecolumnresize.css */ "./node_modules/@ckeditor/ckeditor5-table/theme/tablecolumnresize.css");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tablecolumnresize\n */\n\n\n\n\n/**\n * The table column resize feature.\n *\n * It provides the possibility to set the width of each column in a table using a resize handler.\n */\nclass TableColumnResize extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [_tablecolumnresize_tablecolumnresizeediting__WEBPACK_IMPORTED_MODULE_1__["default"], _tablecellwidth_tablecellwidthediting__WEBPACK_IMPORTED_MODULE_2__["default"]];\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return \'TableColumnResize\';\n    }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/tablecolumnresize.js?')},"./node_modules/@ckeditor/ckeditor5-table/src/tablecolumnresize/constants.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   COLUMN_MIN_WIDTH_AS_PERCENTAGE: () => (/* binding */ COLUMN_MIN_WIDTH_AS_PERCENTAGE),\n/* harmony export */   COLUMN_MIN_WIDTH_IN_PIXELS: () => (/* binding */ COLUMN_MIN_WIDTH_IN_PIXELS),\n/* harmony export */   COLUMN_WIDTH_PRECISION: () => (/* binding */ COLUMN_WIDTH_PRECISION)\n/* harmony export */ });\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tablecolumnresize/constants\n */\n/**\n * The minimum column width given as a percentage value. Used in situations when the table is not yet rendered, so it is impossible to\n * calculate how many percentage of the table width would be {@link ~COLUMN_MIN_WIDTH_IN_PIXELS minimum column width in pixels}.\n */\nconst COLUMN_MIN_WIDTH_AS_PERCENTAGE = 5;\n/**\n * The minimum column width in pixels when the maximum table width is known.\n */\nconst COLUMN_MIN_WIDTH_IN_PIXELS = 40;\n/**\n * Determines how many digits after the decimal point are used to store the column width as a percentage value.\n */\nconst COLUMN_WIDTH_PRECISION = 2;\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/tablecolumnresize/constants.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/tablecolumnresize/converters.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   downcastTableResizedClass: () => (/* binding */ downcastTableResizedClass),\n/* harmony export */   upcastColgroupElement: () => (/* binding */ upcastColgroupElement)\n/* harmony export */ });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ \"./node_modules/@ckeditor/ckeditor5-table/src/tablecolumnresize/utils.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * Returns a upcast helper that ensures the number of `<tableColumn>` elements corresponds to the actual number of columns in the table,\n * because the input data might have too few or too many <col> elements.\n */\nfunction upcastColgroupElement(tableUtilsPlugin) {\n    return dispatcher => dispatcher.on('element:colgroup', (evt, data, conversionApi) => {\n        const modelTable = data.modelCursor.findAncestor('table');\n        const tableColumnGroup = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getColumnGroupElement)(modelTable);\n        if (!tableColumnGroup) {\n            return;\n        }\n        const columnElements = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getTableColumnElements)(tableColumnGroup);\n        const columnsCount = tableUtilsPlugin.getColumns(modelTable);\n        let columnWidths = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.translateColSpanAttribute)(tableColumnGroup, conversionApi.writer);\n        // Fill the array with 'auto' values if the number of columns is higher than number of declared values.\n        columnWidths = Array.from({ length: columnsCount }, (_, index) => columnWidths[index] || 'auto');\n        if (columnWidths.length != columnElements.length || columnWidths.includes('auto')) {\n            (0,_utils__WEBPACK_IMPORTED_MODULE_0__.updateColumnElements)(columnElements, tableColumnGroup, (0,_utils__WEBPACK_IMPORTED_MODULE_0__.normalizeColumnWidths)(columnWidths), conversionApi.writer);\n        }\n    }, { priority: 'low' });\n}\n/**\n * Returns downcast helper for adding `ck-table-resized` class if there is a `<tableColumnGroup>` element inside the table.\n */\nfunction downcastTableResizedClass() {\n    return dispatcher => dispatcher.on('insert:table', (evt, data, conversionApi) => {\n        const viewWriter = conversionApi.writer;\n        const modelTable = data.item;\n        const viewElement = conversionApi.mapper.toViewElement(modelTable);\n        const viewTable = viewElement.is('element', 'table') ?\n            viewElement :\n            Array.from(viewElement.getChildren()).find(viewChild => viewChild.is('element', 'table'));\n        const tableColumnGroup = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getColumnGroupElement)(modelTable);\n        if (tableColumnGroup) {\n            viewWriter.addClass('ck-table-resized', viewTable);\n        }\n        else {\n            viewWriter.removeClass('ck-table-resized', viewTable);\n        }\n    }, { priority: 'low' });\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/tablecolumnresize/converters.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/tablecolumnresize/tablecolumnresizeediting.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TableColumnResizeEditing)\n/* harmony export */ });\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! lodash-es */ \"./node_modules/lodash-es/isEqual.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! lodash-es */ \"./node_modules/lodash-es/throttle.js\");\n/* harmony import */ var ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/utils */ \"ckeditor5/src/utils.js\");\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var _src_tablemouse_mouseeventsobserver__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../src/tablemouse/mouseeventsobserver */ \"./node_modules/@ckeditor/ckeditor5-table/src/tablemouse/mouseeventsobserver.js\");\n/* harmony import */ var _tableediting__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../tableediting */ \"./node_modules/@ckeditor/ckeditor5-table/src/tableediting.js\");\n/* harmony import */ var _tableutils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../tableutils */ \"./node_modules/@ckeditor/ckeditor5-table/src/tableutils.js\");\n/* harmony import */ var _tablewalker__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../tablewalker */ \"./node_modules/@ckeditor/ckeditor5-table/src/tablewalker.js\");\n/* harmony import */ var _tablewidthscommand__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./tablewidthscommand */ \"./node_modules/@ckeditor/ckeditor5-table/src/tablecolumnresize/tablewidthscommand.js\");\n/* harmony import */ var _converters__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./converters */ \"./node_modules/@ckeditor/ckeditor5-table/src/tablecolumnresize/converters.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils */ \"./node_modules/@ckeditor/ckeditor5-table/src/tablecolumnresize/utils.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./constants */ \"./node_modules/@ckeditor/ckeditor5-table/src/tablecolumnresize/constants.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tablecolumnresize/tablecolumnresizeediting\n */\n\n\n\n\n\n\n\n\n\n\n\n/**\n * The table column resize editing plugin.\n */\nclass TableColumnResizeEditing extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_1__.Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [_tableediting__WEBPACK_IMPORTED_MODULE_3__[\"default\"], _tableutils__WEBPACK_IMPORTED_MODULE_4__[\"default\"]];\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'TableColumnResizeEditing';\n    }\n    /**\n     * @inheritDoc\n     */\n    constructor(editor) {\n        super(editor);\n        this._isResizingActive = false;\n        this.set('_isResizingAllowed', true);\n        this._resizingData = null;\n        this._domEmitter = new ((0,ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_0__.DomEmitterMixin)())();\n        this._tableUtilsPlugin = editor.plugins.get('TableUtils');\n        this.on('change:_isResizingAllowed', (evt, name, value) => {\n            // Toggling the `ck-column-resize_disabled` class shows and hides the resizers through CSS.\n            const classAction = value ? 'removeClass' : 'addClass';\n            editor.editing.view.change(writer => {\n                for (const root of editor.editing.view.document.roots) {\n                    writer[classAction]('ck-column-resize_disabled', editor.editing.view.document.getRoot(root.rootName));\n                }\n            });\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        this._extendSchema();\n        this._registerPostFixer();\n        this._registerConverters();\n        this._registerResizingListeners();\n        this._registerResizerInserter();\n        const editor = this.editor;\n        const columnResizePlugin = editor.plugins.get('TableColumnResize');\n        const tableEditing = editor.plugins.get('TableEditing');\n        tableEditing.registerAdditionalSlot({\n            filter: element => element.is('element', 'tableColumnGroup'),\n            positionOffset: 0\n        });\n        const tableWidthsCommand = new _tablewidthscommand__WEBPACK_IMPORTED_MODULE_6__[\"default\"](editor);\n        // For backwards compatibility we have two commands that perform exactly the same operation.\n        editor.commands.add('resizeTableWidth', tableWidthsCommand);\n        editor.commands.add('resizeColumnWidths', tableWidthsCommand);\n        // Currently the states of column resize and table resize (which is actually the last column resize) features\n        // are bound together. They can be separated in the future by adding distinct listeners and applying\n        // different CSS classes (e.g. `ck-column-resize_disabled` and `ck-table-resize_disabled`) to the editor root.\n        // See #12148 for the details.\n        this.bind('_isResizingAllowed').to(editor, 'isReadOnly', columnResizePlugin, 'isEnabled', tableWidthsCommand, 'isEnabled', (isEditorReadOnly, isPluginEnabled, isTableWidthsCommandCommandEnabled) => !isEditorReadOnly && isPluginEnabled && isTableWidthsCommandCommandEnabled);\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        this._domEmitter.stopListening();\n        super.destroy();\n    }\n    /**\n     * Returns a 'tableColumnGroup' element from the 'table'.\n     *\n     * @param element A 'table' or 'tableColumnGroup' element.\n     * @returns A 'tableColumnGroup' element.\n     */\n    getColumnGroupElement(element) {\n        return (0,_utils__WEBPACK_IMPORTED_MODULE_8__.getColumnGroupElement)(element);\n    }\n    /**\n     * Returns an array of 'tableColumn' elements.\n     *\n     * @param element A 'table' or 'tableColumnGroup' element.\n     * @returns An array of 'tableColumn' elements.\n     */\n    getTableColumnElements(element) {\n        return (0,_utils__WEBPACK_IMPORTED_MODULE_8__.getTableColumnElements)(element);\n    }\n    /**\n     * Returns an array of table column widths.\n     *\n     * @param element A 'table' or 'tableColumnGroup' element.\n     * @returns An array of table column widths.\n     */\n    getTableColumnsWidths(element) {\n        return (0,_utils__WEBPACK_IMPORTED_MODULE_8__.getTableColumnsWidths)(element);\n    }\n    /**\n     * Registers new attributes for a table model element.\n     */\n    _extendSchema() {\n        this.editor.model.schema.extend('table', {\n            allowAttributes: ['tableWidth']\n        });\n        this.editor.model.schema.register('tableColumnGroup', {\n            allowIn: 'table',\n            isLimit: true\n        });\n        this.editor.model.schema.register('tableColumn', {\n            allowIn: 'tableColumnGroup',\n            allowAttributes: ['columnWidth', 'colSpan'],\n            isLimit: true\n        });\n    }\n    /**\n     * Registers table column resize post-fixer.\n     *\n     * It checks if the change from the differ concerns a table-related element or attribute. For detected changes it:\n     *  * Adjusts the `columnWidths` attribute to guarantee that the sum of the widths from all columns is 100%.\n     *  * Checks if the `columnWidths` attribute gets updated accordingly after columns have been added or removed.\n     */\n    _registerPostFixer() {\n        const editor = this.editor;\n        const model = editor.model;\n        model.document.registerPostFixer(writer => {\n            let changed = false;\n            for (const table of (0,_utils__WEBPACK_IMPORTED_MODULE_8__.getChangedResizedTables)(model)) {\n                const tableColumnGroup = this.getColumnGroupElement(table);\n                const columns = this.getTableColumnElements(tableColumnGroup);\n                const columnWidths = this.getTableColumnsWidths(tableColumnGroup);\n                // Adjust the `columnWidths` attribute to guarantee that the sum of the widths from all columns is 100%.\n                let normalizedWidths = (0,_utils__WEBPACK_IMPORTED_MODULE_8__.normalizeColumnWidths)(columnWidths);\n                // If the number of columns has changed, then we need to adjust the widths of the affected columns.\n                normalizedWidths = adjustColumnWidths(normalizedWidths, table, this);\n                if ((0,lodash_es__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(columnWidths, normalizedWidths)) {\n                    continue;\n                }\n                (0,_utils__WEBPACK_IMPORTED_MODULE_8__.updateColumnElements)(columns, tableColumnGroup, normalizedWidths, writer);\n                changed = true;\n            }\n            return changed;\n        });\n        /**\n         * Adjusts if necessary the `columnWidths` in case if the number of column has changed.\n         *\n         * @param columnWidths Note: this array **may be modified** by the function.\n         * @param table Table to be checked.\n         */\n        function adjustColumnWidths(columnWidths, table, plugin) {\n            const newTableColumnsCount = plugin._tableUtilsPlugin.getColumns(table);\n            const columnsCountDelta = newTableColumnsCount - columnWidths.length;\n            if (columnsCountDelta === 0) {\n                return columnWidths;\n            }\n            const widths = columnWidths.map(width => Number(width.replace('%', '')));\n            // Collect all cells that are affected by the change.\n            const cellSet = getAffectedCells(plugin.editor.model.document.differ, table);\n            for (const cell of cellSet) {\n                const currentColumnsDelta = newTableColumnsCount - widths.length;\n                if (currentColumnsDelta === 0) {\n                    continue;\n                }\n                // If the column count in the table changed, adjust the widths of the affected columns.\n                const hasMoreColumns = currentColumnsDelta > 0;\n                const currentColumnIndex = plugin._tableUtilsPlugin.getCellLocation(cell).column;\n                if (hasMoreColumns) {\n                    const columnMinWidthAsPercentage = (0,_utils__WEBPACK_IMPORTED_MODULE_8__.getColumnMinWidthAsPercentage)(table, plugin.editor);\n                    const columnWidthsToInsert = (0,_utils__WEBPACK_IMPORTED_MODULE_8__.createFilledArray)(currentColumnsDelta, columnMinWidthAsPercentage);\n                    widths.splice(currentColumnIndex, 0, ...columnWidthsToInsert);\n                }\n                else {\n                    // Moves the widths of the removed columns to the preceding one.\n                    // Other editors either reduce the width of the whole table or adjust the widths\n                    // proportionally, so change of this behavior can be considered in the future.\n                    const removedColumnWidths = widths.splice(currentColumnIndex, Math.abs(currentColumnsDelta));\n                    widths[currentColumnIndex] += (0,_utils__WEBPACK_IMPORTED_MODULE_8__.sumArray)(removedColumnWidths);\n                }\n            }\n            return widths.map(width => width + '%');\n        }\n        /**\n         * Returns a set of cells that have been changed in a given table.\n         */\n        function getAffectedCells(differ, table) {\n            const cellSet = new Set();\n            for (const change of differ.getChanges()) {\n                if (change.type == 'insert' &&\n                    change.position.nodeAfter &&\n                    change.position.nodeAfter.name == 'tableCell' &&\n                    change.position.nodeAfter.getAncestors().includes(table)) {\n                    cellSet.add(change.position.nodeAfter);\n                }\n                else if (change.type == 'remove') {\n                    // If the first cell was removed, use the node after the change position instead.\n                    const referenceNode = (change.position.nodeBefore || change.position.nodeAfter);\n                    if (referenceNode.name == 'tableCell' && referenceNode.getAncestors().includes(table)) {\n                        cellSet.add(referenceNode);\n                    }\n                }\n            }\n            return cellSet;\n        }\n    }\n    /**\n     * Registers table column resize converters.\n     */\n    _registerConverters() {\n        const editor = this.editor;\n        const conversion = editor.conversion;\n        // Table width style\n        conversion.for('upcast').attributeToAttribute({\n            view: {\n                name: 'figure',\n                key: 'style',\n                value: {\n                    width: /[\\s\\S]+/\n                }\n            },\n            model: {\n                name: 'table',\n                key: 'tableWidth',\n                value: (viewElement) => viewElement.getStyle('width')\n            }\n        });\n        conversion.for('downcast').attributeToAttribute({\n            model: {\n                name: 'table',\n                key: 'tableWidth'\n            },\n            view: (width) => ({\n                name: 'figure',\n                key: 'style',\n                value: {\n                    width\n                }\n            })\n        });\n        conversion.elementToElement({ model: 'tableColumnGroup', view: 'colgroup' });\n        conversion.elementToElement({ model: 'tableColumn', view: 'col' });\n        conversion.for('downcast').add((0,_converters__WEBPACK_IMPORTED_MODULE_7__.downcastTableResizedClass)());\n        conversion.for('upcast').add((0,_converters__WEBPACK_IMPORTED_MODULE_7__.upcastColgroupElement)(this._tableUtilsPlugin));\n        conversion.for('upcast').attributeToAttribute({\n            view: {\n                name: 'col',\n                styles: {\n                    width: /.*/\n                }\n            },\n            model: {\n                key: 'columnWidth',\n                value: (viewElement) => {\n                    const viewColWidth = viewElement.getStyle('width');\n                    // 'pt' is the default unit for table column width pasted from MS Office.\n                    // See https://github.com/ckeditor/ckeditor5/issues/14521#issuecomment-1662102889 for more details.\n                    if (!viewColWidth || (!viewColWidth.endsWith('%') && !viewColWidth.endsWith('pt'))) {\n                        return 'auto';\n                    }\n                    return viewColWidth;\n                }\n            }\n        });\n        // The `col[span]` attribute is present in tables pasted from MS Excel. We use it to set the temporary `colSpan` model attribute,\n        // which is consumed during the `colgroup` element upcast.\n        // See https://github.com/ckeditor/ckeditor5/issues/14521#issuecomment-1662102889 for more details.\n        conversion.for('upcast').attributeToAttribute({\n            view: {\n                name: 'col',\n                key: 'span'\n            },\n            model: 'colSpan'\n        });\n        conversion.for('downcast').attributeToAttribute({\n            model: {\n                name: 'tableColumn',\n                key: 'columnWidth'\n            },\n            view: width => ({ key: 'style', value: { width } })\n        });\n    }\n    /**\n     * Registers listeners to handle resizing process.\n     */\n    _registerResizingListeners() {\n        const editingView = this.editor.editing.view;\n        editingView.addObserver(_src_tablemouse_mouseeventsobserver__WEBPACK_IMPORTED_MODULE_2__[\"default\"]);\n        editingView.document.on('mousedown', this._onMouseDownHandler.bind(this), { priority: 'high' });\n        this._domEmitter.listenTo(ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_0__.global.window.document, 'mousemove', (0,lodash_es__WEBPACK_IMPORTED_MODULE_11__[\"default\"])(this._onMouseMoveHandler.bind(this), 50));\n        this._domEmitter.listenTo(ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_0__.global.window.document, 'mouseup', this._onMouseUpHandler.bind(this));\n    }\n    /**\n     * Handles the `mousedown` event on column resizer element:\n     *  * calculates the initial column pixel widths,\n     *  * inserts the `<colgroup>` element if it is not present in the `<table>`,\n     *  * puts the necessary data in the temporary storage,\n     *  * applies the attributes to the `<table>` view element.\n     *\n     * @param eventInfo An object containing information about the fired event.\n     * @param domEventData The data related to the DOM event.\n     */\n    _onMouseDownHandler(eventInfo, domEventData) {\n        const target = domEventData.target;\n        if (!target.hasClass('ck-table-column-resizer')) {\n            return;\n        }\n        if (!this._isResizingAllowed) {\n            return;\n        }\n        const editor = this.editor;\n        const modelTable = editor.editing.mapper.toModelElement(target.findAncestor('figure'));\n        // Do not resize if table model is in non-editable place.\n        if (!editor.model.canEditAt(modelTable)) {\n            return;\n        }\n        domEventData.preventDefault();\n        eventInfo.stop();\n        // The column widths are calculated upon mousedown to allow lazy applying the `columnWidths` attribute on the table.\n        const columnWidthsInPx = _calculateDomColumnWidths(modelTable, this._tableUtilsPlugin, editor);\n        const viewTable = target.findAncestor('table');\n        const editingView = editor.editing.view;\n        // Insert colgroup for the table that is resized for the first time.\n        if (!Array.from(viewTable.getChildren()).find(viewCol => viewCol.is('element', 'colgroup'))) {\n            editingView.change(viewWriter => {\n                _insertColgroupElement(viewWriter, columnWidthsInPx, viewTable);\n            });\n        }\n        this._isResizingActive = true;\n        this._resizingData = this._getResizingData(domEventData, columnWidthsInPx);\n        // At this point we change only the editor view - we don't want other users to see our changes yet,\n        // so we can't apply them in the model.\n        editingView.change(writer => _applyResizingAttributesToTable(writer, viewTable, this._resizingData));\n        /**\n         * Calculates the DOM columns' widths. It is done by taking the width of the widest cell\n         * from each table column (we rely on the  {@link module:table/tablewalker~TableWalker}\n         * to determine which column the cell belongs to).\n         *\n         * @param modelTable A table which columns should be measured.\n         * @param tableUtils The Table Utils plugin instance.\n         * @param editor The editor instance.\n         * @returns Columns' widths expressed in pixels (without unit).\n         */\n        function _calculateDomColumnWidths(modelTable, tableUtilsPlugin, editor) {\n            const columnWidthsInPx = Array(tableUtilsPlugin.getColumns(modelTable));\n            const tableWalker = new _tablewalker__WEBPACK_IMPORTED_MODULE_5__[\"default\"](modelTable);\n            for (const cellSlot of tableWalker) {\n                const viewCell = editor.editing.mapper.toViewElement(cellSlot.cell);\n                const domCell = editor.editing.view.domConverter.mapViewToDom(viewCell);\n                const domCellWidth = (0,_utils__WEBPACK_IMPORTED_MODULE_8__.getDomCellOuterWidth)(domCell);\n                if (!columnWidthsInPx[cellSlot.column] || domCellWidth < columnWidthsInPx[cellSlot.column]) {\n                    columnWidthsInPx[cellSlot.column] = (0,_utils__WEBPACK_IMPORTED_MODULE_8__.toPrecision)(domCellWidth);\n                }\n            }\n            return columnWidthsInPx;\n        }\n        /**\n         * Creates a `<colgroup>` element with `<col>`s and inserts it into a given view table.\n         *\n         * @param viewWriter A writer instance.\n         * @param columnWidthsInPx Column widths.\n         * @param viewTable A table view element.\n         */\n        function _insertColgroupElement(viewWriter, columnWidthsInPx, viewTable) {\n            const colgroup = viewWriter.createContainerElement('colgroup');\n            for (let i = 0; i < columnWidthsInPx.length; i++) {\n                const viewColElement = viewWriter.createEmptyElement('col');\n                const columnWidthInPc = `${(0,_utils__WEBPACK_IMPORTED_MODULE_8__.toPrecision)(columnWidthsInPx[i] / (0,_utils__WEBPACK_IMPORTED_MODULE_8__.sumArray)(columnWidthsInPx) * 100)}%`;\n                viewWriter.setStyle('width', columnWidthInPc, viewColElement);\n                viewWriter.insert(viewWriter.createPositionAt(colgroup, 'end'), viewColElement);\n            }\n            viewWriter.insert(viewWriter.createPositionAt(viewTable, 0), colgroup);\n        }\n        /**\n         * Applies the style and classes to the view table as the resizing begun.\n         *\n         * @param viewWriter A writer instance.\n         * @param viewTable A table containing the clicked resizer.\n         * @param resizingData Data related to the resizing.\n         */\n        function _applyResizingAttributesToTable(viewWriter, viewTable, resizingData) {\n            const figureInitialPcWidth = resizingData.widths.viewFigureWidth / resizingData.widths.viewFigureParentWidth;\n            viewWriter.addClass('ck-table-resized', viewTable);\n            viewWriter.addClass('ck-table-column-resizer__active', resizingData.elements.viewResizer);\n            viewWriter.setStyle('width', `${(0,_utils__WEBPACK_IMPORTED_MODULE_8__.toPrecision)(figureInitialPcWidth * 100)}%`, viewTable.findAncestor('figure'));\n        }\n    }\n    /**\n     * Handles the `mousemove` event.\n     *  * If resizing process is not in progress, it does nothing.\n     *  * If resizing is active but not allowed, it stops the resizing process instantly calling the `mousedown` event handler.\n     *  * Otherwise it dynamically updates the widths of the resized columns.\n     *\n     * @param eventInfo An object containing information about the fired event.\n     * @param mouseEventData The native DOM event.\n     */\n    _onMouseMoveHandler(eventInfo, mouseEventData) {\n        if (!this._isResizingActive) {\n            return;\n        }\n        if (!this._isResizingAllowed) {\n            this._onMouseUpHandler();\n            return;\n        }\n        const { columnPosition, flags: { isRightEdge, isTableCentered, isLtrContent }, elements: { viewFigure, viewLeftColumn, viewRightColumn }, widths: { viewFigureParentWidth, tableWidth, leftColumnWidth, rightColumnWidth } } = this._resizingData;\n        const dxLowerBound = -leftColumnWidth + _constants__WEBPACK_IMPORTED_MODULE_9__.COLUMN_MIN_WIDTH_IN_PIXELS;\n        const dxUpperBound = isRightEdge ?\n            viewFigureParentWidth - tableWidth :\n            rightColumnWidth - _constants__WEBPACK_IMPORTED_MODULE_9__.COLUMN_MIN_WIDTH_IN_PIXELS;\n        // The multiplier is needed for calculating the proper movement offset:\n        // - it should negate the sign if content language direction is right-to-left,\n        // - it should double the offset if the table edge is resized and table is centered.\n        const multiplier = (isLtrContent ? 1 : -1) * (isRightEdge && isTableCentered ? 2 : 1);\n        const dx = (0,_utils__WEBPACK_IMPORTED_MODULE_8__.clamp)((mouseEventData.clientX - columnPosition) * multiplier, Math.min(dxLowerBound, 0), Math.max(dxUpperBound, 0));\n        if (dx === 0) {\n            return;\n        }\n        this.editor.editing.view.change(writer => {\n            const leftColumnWidthAsPercentage = (0,_utils__WEBPACK_IMPORTED_MODULE_8__.toPrecision)((leftColumnWidth + dx) * 100 / tableWidth);\n            writer.setStyle('width', `${leftColumnWidthAsPercentage}%`, viewLeftColumn);\n            if (isRightEdge) {\n                const tableWidthAsPercentage = (0,_utils__WEBPACK_IMPORTED_MODULE_8__.toPrecision)((tableWidth + dx) * 100 / viewFigureParentWidth);\n                writer.setStyle('width', `${tableWidthAsPercentage}%`, viewFigure);\n            }\n            else {\n                const rightColumnWidthAsPercentage = (0,_utils__WEBPACK_IMPORTED_MODULE_8__.toPrecision)((rightColumnWidth - dx) * 100 / tableWidth);\n                writer.setStyle('width', `${rightColumnWidthAsPercentage}%`, viewRightColumn);\n            }\n        });\n    }\n    /**\n     * Handles the `mouseup` event.\n     *  * If resizing process is not in progress, it does nothing.\n     *  * If resizing is active but not allowed, it cancels the resizing process restoring the original widths.\n     *  * Otherwise it propagates the changes from view to the model by executing the adequate commands.\n     */\n    _onMouseUpHandler() {\n        if (!this._isResizingActive) {\n            return;\n        }\n        const { viewResizer, modelTable, viewFigure, viewColgroup } = this._resizingData.elements;\n        const editor = this.editor;\n        const editingView = editor.editing.view;\n        const tableColumnGroup = this.getColumnGroupElement(modelTable);\n        const viewColumns = Array\n            .from(viewColgroup.getChildren())\n            .filter((column) => column.is('view:element'));\n        const columnWidthsAttributeOld = tableColumnGroup ?\n            this.getTableColumnsWidths(tableColumnGroup) :\n            null;\n        const columnWidthsAttributeNew = viewColumns.map(column => column.getStyle('width'));\n        const isColumnWidthsAttributeChanged = !(0,lodash_es__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(columnWidthsAttributeOld, columnWidthsAttributeNew);\n        const tableWidthAttributeOld = modelTable.getAttribute('tableWidth');\n        const tableWidthAttributeNew = viewFigure.getStyle('width');\n        const isTableWidthAttributeChanged = tableWidthAttributeOld !== tableWidthAttributeNew;\n        if (isColumnWidthsAttributeChanged || isTableWidthAttributeChanged) {\n            if (this._isResizingAllowed) {\n                editor.execute('resizeTableWidth', {\n                    table: modelTable,\n                    tableWidth: `${(0,_utils__WEBPACK_IMPORTED_MODULE_8__.toPrecision)(tableWidthAttributeNew)}%`,\n                    columnWidths: columnWidthsAttributeNew\n                });\n            }\n            else {\n                // In read-only mode revert all changes in the editing view. The model is not touched so it does not need to be restored.\n                // This case can occur if the read-only mode kicks in during the resizing process.\n                editingView.change(writer => {\n                    // If table had resized columns before, restore the previous column widths.\n                    // Otherwise clean up the view from the temporary column resizing markup.\n                    if (columnWidthsAttributeOld) {\n                        for (const viewCol of viewColumns) {\n                            writer.setStyle('width', columnWidthsAttributeOld.shift(), viewCol);\n                        }\n                    }\n                    else {\n                        writer.remove(viewColgroup);\n                    }\n                    if (isTableWidthAttributeChanged) {\n                        // If the whole table was already resized before, restore the previous table width.\n                        // Otherwise clean up the view from the temporary table resizing markup.\n                        if (tableWidthAttributeOld) {\n                            writer.setStyle('width', tableWidthAttributeOld, viewFigure);\n                        }\n                        else {\n                            writer.removeStyle('width', viewFigure);\n                        }\n                    }\n                    // If a table and its columns weren't resized before,\n                    // prune the remaining common resizing markup.\n                    if (!columnWidthsAttributeOld && !tableWidthAttributeOld) {\n                        writer.removeClass('ck-table-resized', [...viewFigure.getChildren()].find(element => element.name === 'table'));\n                    }\n                });\n            }\n        }\n        editingView.change(writer => {\n            writer.removeClass('ck-table-column-resizer__active', viewResizer);\n        });\n        this._isResizingActive = false;\n        this._resizingData = null;\n    }\n    /**\n     * Retrieves and returns required data needed for the resizing process.\n     *\n     * @param domEventData The data of the `mousedown` event.\n     * @param columnWidths The current widths of the columns.\n     * @returns The data needed for the resizing process.\n     */\n    _getResizingData(domEventData, columnWidths) {\n        const editor = this.editor;\n        const columnPosition = domEventData.domEvent.clientX;\n        const viewResizer = domEventData.target;\n        const viewLeftCell = viewResizer.findAncestor('td') || viewResizer.findAncestor('th');\n        const modelLeftCell = editor.editing.mapper.toModelElement(viewLeftCell);\n        const modelTable = modelLeftCell.findAncestor('table');\n        const leftColumnIndex = (0,_utils__WEBPACK_IMPORTED_MODULE_8__.getColumnEdgesIndexes)(modelLeftCell, this._tableUtilsPlugin).rightEdge;\n        const lastColumnIndex = this._tableUtilsPlugin.getColumns(modelTable) - 1;\n        const isRightEdge = leftColumnIndex === lastColumnIndex;\n        const isTableCentered = !modelTable.hasAttribute('tableAlignment');\n        const isLtrContent = editor.locale.contentLanguageDirection !== 'rtl';\n        const viewTable = viewLeftCell.findAncestor('table');\n        const viewFigure = viewTable.findAncestor('figure');\n        const viewColgroup = [...viewTable.getChildren()]\n            .find(viewCol => viewCol.is('element', 'colgroup'));\n        const viewLeftColumn = viewColgroup.getChild(leftColumnIndex);\n        const viewRightColumn = isRightEdge ? undefined : viewColgroup.getChild(leftColumnIndex + 1);\n        const viewFigureParentWidth = (0,_utils__WEBPACK_IMPORTED_MODULE_8__.getElementWidthInPixels)(editor.editing.view.domConverter.mapViewToDom(viewFigure.parent));\n        const viewFigureWidth = (0,_utils__WEBPACK_IMPORTED_MODULE_8__.getElementWidthInPixels)(editor.editing.view.domConverter.mapViewToDom(viewFigure));\n        const tableWidth = (0,_utils__WEBPACK_IMPORTED_MODULE_8__.getTableWidthInPixels)(modelTable, editor);\n        const leftColumnWidth = columnWidths[leftColumnIndex];\n        const rightColumnWidth = isRightEdge ? undefined : columnWidths[leftColumnIndex + 1];\n        return {\n            columnPosition,\n            flags: {\n                isRightEdge,\n                isTableCentered,\n                isLtrContent\n            },\n            elements: {\n                viewResizer,\n                modelTable,\n                viewFigure,\n                viewColgroup,\n                viewLeftColumn,\n                viewRightColumn\n            },\n            widths: {\n                viewFigureParentWidth,\n                viewFigureWidth,\n                tableWidth,\n                leftColumnWidth,\n                rightColumnWidth\n            }\n        };\n    }\n    /**\n     * Registers a listener ensuring that each resizable cell have a resizer handle.\n     */\n    _registerResizerInserter() {\n        this.editor.conversion.for('editingDowncast').add(dispatcher => {\n            dispatcher.on('insert:tableCell', (evt, data, conversionApi) => {\n                const modelElement = data.item;\n                const viewElement = conversionApi.mapper.toViewElement(modelElement);\n                const viewWriter = conversionApi.writer;\n                viewWriter.insert(viewWriter.createPositionAt(viewElement, 'end'), viewWriter.createUIElement('div', { class: 'ck-table-column-resizer' }));\n            }, { priority: 'lowest' });\n        });\n    }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/tablecolumnresize/tablecolumnresizeediting.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/tablecolumnresize/tablewidthscommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TableWidthsCommand)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ \"./node_modules/@ckeditor/ckeditor5-table/src/tablecolumnresize/utils.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n\n/**\n * Command used by the {@link module:table/tablecolumnresize~TableColumnResize Table column resize feature} that\n * updates the width of the whole table as well as its individual columns.\n */\nclass TableWidthsCommand extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Command {\n    /**\n     * @inheritDoc\n     */\n    refresh() {\n        // The command is always enabled as it doesn't care about the actual selection - table can be resized\n        // even if the selection is elsewhere.\n        this.isEnabled = true;\n    }\n    /**\n     * Updated the `tableWidth` attribute of the table and the `columnWidth` attribute of the columns of that table.\n     */\n    execute(options = {}) {\n        const { model, plugins } = this.editor;\n        let { table = model.document.selection.getSelectedElement(), columnWidths, tableWidth } = options;\n        if (columnWidths) {\n            // For backwards compatibility, columnWidths might be an array or a string of comma-separated values.\n            columnWidths = Array.isArray(columnWidths) ?\n                columnWidths :\n                columnWidths.split(',');\n        }\n        model.change(writer => {\n            if (tableWidth) {\n                writer.setAttribute('tableWidth', tableWidth, table);\n            }\n            else {\n                writer.removeAttribute('tableWidth', table);\n            }\n            const tableColumnGroup = plugins\n                .get('TableColumnResizeEditing')\n                .getColumnGroupElement(table);\n            if (!columnWidths && !tableColumnGroup) {\n                return;\n            }\n            if (!columnWidths) {\n                return writer.remove(tableColumnGroup);\n            }\n            const widths = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.normalizeColumnWidths)(columnWidths);\n            if (!tableColumnGroup) {\n                const colGroupElement = writer.createElement('tableColumnGroup');\n                widths.forEach(columnWidth => writer.appendElement('tableColumn', { columnWidth }, colGroupElement));\n                writer.append(colGroupElement, table);\n            }\n            else {\n                Array\n                    .from(tableColumnGroup.getChildren())\n                    .forEach((column, index) => writer.setAttribute('columnWidth', widths[index], column));\n            }\n        });\n    }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/tablecolumnresize/tablewidthscommand.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/tablecolumnresize/utils.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clamp: () => (/* binding */ clamp),\n/* harmony export */   createFilledArray: () => (/* binding */ createFilledArray),\n/* harmony export */   getChangedResizedTables: () => (/* binding */ getChangedResizedTables),\n/* harmony export */   getColumnEdgesIndexes: () => (/* binding */ getColumnEdgesIndexes),\n/* harmony export */   getColumnGroupElement: () => (/* binding */ getColumnGroupElement),\n/* harmony export */   getColumnMinWidthAsPercentage: () => (/* binding */ getColumnMinWidthAsPercentage),\n/* harmony export */   getDomCellOuterWidth: () => (/* binding */ getDomCellOuterWidth),\n/* harmony export */   getElementWidthInPixels: () => (/* binding */ getElementWidthInPixels),\n/* harmony export */   getTableColumnElements: () => (/* binding */ getTableColumnElements),\n/* harmony export */   getTableColumnsWidths: () => (/* binding */ getTableColumnsWidths),\n/* harmony export */   getTableWidthInPixels: () => (/* binding */ getTableWidthInPixels),\n/* harmony export */   normalizeColumnWidths: () => (/* binding */ normalizeColumnWidths),\n/* harmony export */   sumArray: () => (/* binding */ sumArray),\n/* harmony export */   toPrecision: () => (/* binding */ toPrecision),\n/* harmony export */   translateColSpanAttribute: () => (/* binding */ translateColSpanAttribute),\n/* harmony export */   updateColumnElements: () => (/* binding */ updateColumnElements)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/utils */ \"ckeditor5/src/utils.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ \"./node_modules/@ckeditor/ckeditor5-table/src/tablecolumnresize/constants.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n\n/**\n * Returns all the inserted or changed table model elements in a given change set. Only the tables\n * with 'columnsWidth' attribute are taken into account. The returned set may be empty.\n *\n * Most notably if an entire table is removed it will not be included in returned set.\n *\n * @param model The model to collect the affected elements from.\n * @returns A set of table model elements.\n */\nfunction getChangedResizedTables(model) {\n    const affectedTables = new Set();\n    for (const change of model.document.differ.getChanges()) {\n        let referencePosition = null;\n        // Checks if the particular change from the differ is:\n        // - an insertion or removal of a table, a row or a cell,\n        // - an attribute change on a table, a row or a cell.\n        switch (change.type) {\n            case 'insert':\n                referencePosition = ['table', 'tableRow', 'tableCell'].includes(change.name) ?\n                    change.position :\n                    null;\n                break;\n            case 'remove':\n                // If the whole table is removed, there's no need to update its column widths (#12201).\n                referencePosition = ['tableRow', 'tableCell'].includes(change.name) ?\n                    change.position :\n                    null;\n                break;\n            case 'attribute':\n                if (change.range.start.nodeAfter) {\n                    referencePosition = ['table', 'tableRow', 'tableCell'].includes(change.range.start.nodeAfter.name) ?\n                        change.range.start :\n                        null;\n                }\n                break;\n        }\n        if (!referencePosition) {\n            continue;\n        }\n        const tableNode = (referencePosition.nodeAfter && referencePosition.nodeAfter.is('element', 'table')) ?\n            referencePosition.nodeAfter : referencePosition.findAncestor('table');\n        // We iterate over the whole table looking for the nested tables that are also affected.\n        for (const node of model.createRangeOn(tableNode).getItems()) {\n            if (!node.is('element', 'table')) {\n                continue;\n            }\n            if (!getColumnGroupElement(node)) {\n                continue;\n            }\n            affectedTables.add(node);\n        }\n    }\n    return affectedTables;\n}\n/**\n * Calculates the percentage of the minimum column width given in pixels for a given table.\n *\n * @param modelTable A table model element.\n * @param editor The editor instance.\n * @returns The minimal column width in percentage.\n */\nfunction getColumnMinWidthAsPercentage(modelTable, editor) {\n    return _constants__WEBPACK_IMPORTED_MODULE_1__.COLUMN_MIN_WIDTH_IN_PIXELS * 100 / getTableWidthInPixels(modelTable, editor);\n}\n/**\n * Calculates the table width in pixels.\n *\n * @param modelTable A table model element.\n * @param editor The editor instance.\n * @returns The width of the table in pixels.\n */\nfunction getTableWidthInPixels(modelTable, editor) {\n    // It is possible for a table to not have a <tbody> element - see #11878.\n    const referenceElement = getChildrenViewElement(modelTable, 'tbody', editor) || getChildrenViewElement(modelTable, 'thead', editor);\n    const domReferenceElement = editor.editing.view.domConverter.mapViewToDom(referenceElement);\n    return getElementWidthInPixels(domReferenceElement);\n}\n/**\n * Returns the a view element with a given name that is nested directly in a `<table>` element\n * related to a given `modelTable`.\n *\n * @param elementName Name of a view to be looked for, e.g. `'colgroup`', `'thead`'.\n * @returns Matched view or `undefined` otherwise.\n */\nfunction getChildrenViewElement(modelTable, elementName, editor) {\n    const viewFigure = editor.editing.mapper.toViewElement(modelTable);\n    const viewTable = [...viewFigure.getChildren()]\n        .find((node) => node.is('element', 'table'));\n    return [...viewTable.getChildren()]\n        .find((node) => node.is('element', elementName));\n}\n/**\n * Returns the computed width (in pixels) of the DOM element without padding and borders.\n *\n * @param domElement A DOM element.\n * @returns The width of the DOM element in pixels.\n */\nfunction getElementWidthInPixels(domElement) {\n    const styles = ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_0__.global.window.getComputedStyle(domElement);\n    // In the 'border-box' box sizing algorithm, the element's width\n    // already includes the padding and border width (#12335).\n    if (styles.boxSizing === 'border-box') {\n        return parseFloat(styles.width) -\n            parseFloat(styles.paddingLeft) -\n            parseFloat(styles.paddingRight) -\n            parseFloat(styles.borderLeftWidth) -\n            parseFloat(styles.borderRightWidth);\n    }\n    else {\n        return parseFloat(styles.width);\n    }\n}\n/**\n * Returns the column indexes on the left and right edges of a cell. They differ if the cell spans\n * across multiple columns.\n *\n * @param cell A table cell model element.\n * @param tableUtils The Table Utils plugin instance.\n * @returns An object containing the indexes of the left and right edges of the cell.\n */\nfunction getColumnEdgesIndexes(cell, tableUtils) {\n    const cellColumnIndex = tableUtils.getCellLocation(cell).column;\n    const cellWidth = cell.getAttribute('colspan') || 1;\n    return {\n        leftEdge: cellColumnIndex,\n        rightEdge: cellColumnIndex + cellWidth - 1\n    };\n}\n/**\n * Rounds the provided value to a fixed-point number with defined number of digits after the decimal point.\n *\n * @param value A number to be rounded.\n * @returns The rounded number.\n */\nfunction toPrecision(value) {\n    const multiplier = Math.pow(10, _constants__WEBPACK_IMPORTED_MODULE_1__.COLUMN_WIDTH_PRECISION);\n    const number = typeof value === 'number' ? value : parseFloat(value);\n    return Math.round(number * multiplier) / multiplier;\n}\n/**\n * Clamps the number within the inclusive lower (min) and upper (max) bounds. Returned number is rounded using the\n * {@link ~toPrecision `toPrecision()`} function.\n *\n * @param number A number to be clamped.\n * @param min A lower bound.\n * @param max An upper bound.\n * @returns The clamped number.\n */\nfunction clamp(number, min, max) {\n    if (number <= min) {\n        return toPrecision(min);\n    }\n    if (number >= max) {\n        return toPrecision(max);\n    }\n    return toPrecision(number);\n}\n/**\n * Creates an array with defined length and fills all elements with defined value.\n *\n * @param length The length of the array.\n * @param value The value to fill the array with.\n * @returns An array with defined length and filled with defined value.\n */\nfunction createFilledArray(length, value) {\n    return Array(length).fill(value);\n}\n/**\n * Sums all array values that can be parsed to a float.\n *\n * @param array An array of numbers.\n * @returns The sum of all array values.\n */\nfunction sumArray(array) {\n    return array\n        .map(value => typeof value === 'number' ? value : parseFloat(value))\n        .filter(value => !Number.isNaN(value))\n        .reduce((result, item) => result + item, 0);\n}\n/**\n * Makes sure that the sum of the widths from all columns is 100%. If the sum of all the widths is not equal 100%, all the widths are\n * changed proportionally so that they all sum back to 100%. If there are columns without specified width, the amount remaining\n * after assigning the known widths will be distributed equally between them.\n *\n * @param columnWidths An array of column widths.\n * @returns An array of column widths guaranteed to sum up to 100%.\n */\nfunction normalizeColumnWidths(columnWidths) {\n    const widths = columnWidths.map(width => {\n        if (width === 'auto') {\n            return width;\n        }\n        return parseFloat(width.replace('%', ''));\n    });\n    let normalizedWidths = calculateMissingColumnWidths(widths);\n    const totalWidth = sumArray(normalizedWidths);\n    if (totalWidth !== 100) {\n        normalizedWidths = normalizedWidths\n            // Adjust all the columns proportionally.\n            .map(width => toPrecision(width * 100 / totalWidth))\n            // Due to rounding of numbers it may happen that the sum of the widths of all columns will not be exactly 100%.\n            // Therefore, the width of the last column is explicitly adjusted (narrowed or expanded), since all the columns\n            // have been proportionally changed already.\n            .map((columnWidth, columnIndex, width) => {\n            const isLastColumn = columnIndex === width.length - 1;\n            if (!isLastColumn) {\n                return columnWidth;\n            }\n            const totalWidth = sumArray(width);\n            return toPrecision(columnWidth + 100 - totalWidth);\n        });\n    }\n    return normalizedWidths.map(width => width + '%');\n}\n/**\n * Initializes the column widths by parsing the attribute value and calculating the uninitialized column widths. The special value 'auto'\n * indicates that width for the column must be calculated. The width of such uninitialized column is calculated as follows:\n * - If there is enough free space in the table for all uninitialized columns to have at least the minimum allowed width for all of them,\n *   then set this width equally for all uninitialized columns.\n * - Otherwise, just set the minimum allowed width for all uninitialized columns. The sum of all column widths will be greater than 100%,\n *   but then it will be adjusted proportionally to 100% in {@link #normalizeColumnWidths `normalizeColumnWidths()`}.\n *\n * @param columnWidths An array of column widths.\n * @returns An array with 'auto' values replaced with calculated widths.\n */\nfunction calculateMissingColumnWidths(columnWidths) {\n    const numberOfUninitializedColumns = columnWidths.filter(columnWidth => columnWidth === 'auto').length;\n    if (numberOfUninitializedColumns === 0) {\n        return columnWidths.map(columnWidth => toPrecision(columnWidth));\n    }\n    const totalWidthOfInitializedColumns = sumArray(columnWidths);\n    const widthForUninitializedColumn = Math.max((100 - totalWidthOfInitializedColumns) / numberOfUninitializedColumns, _constants__WEBPACK_IMPORTED_MODULE_1__.COLUMN_MIN_WIDTH_AS_PERCENTAGE);\n    return columnWidths\n        .map(columnWidth => columnWidth === 'auto' ? widthForUninitializedColumn : columnWidth)\n        .map(columnWidth => toPrecision(columnWidth));\n}\n/**\n * Calculates the total horizontal space taken by the cell. That includes:\n *  * width,\n *  * left and red padding,\n *  * border width.\n *\n * @param domCell A DOM cell element.\n * @returns Width in pixels without `px` at the end.\n */\nfunction getDomCellOuterWidth(domCell) {\n    const styles = ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_0__.global.window.getComputedStyle(domCell);\n    // In the 'border-box' box sizing algorithm, the element's width\n    // already includes the padding and border width (#12335).\n    if (styles.boxSizing === 'border-box') {\n        return parseInt(styles.width);\n    }\n    else {\n        return parseFloat(styles.width) +\n            parseFloat(styles.paddingLeft) +\n            parseFloat(styles.paddingRight) +\n            parseFloat(styles.borderWidth);\n    }\n}\n/**\n * Updates column elements to match columns widths.\n *\n * @param columns\n * @param tableColumnGroup\n * @param normalizedWidths\n * @param writer\n */\nfunction updateColumnElements(columns, tableColumnGroup, normalizedWidths, writer) {\n    for (let i = 0; i < Math.max(normalizedWidths.length, columns.length); i++) {\n        const column = columns[i];\n        const columnWidth = normalizedWidths[i];\n        if (!columnWidth) {\n            // Number of `<tableColumn>` elements exceeds actual number of columns.\n            writer.remove(column);\n        }\n        else if (!column) {\n            // There is fewer `<tableColumn>` elements than actual columns.\n            writer.appendElement('tableColumn', { columnWidth }, tableColumnGroup);\n        }\n        else {\n            // Update column width.\n            writer.setAttribute('columnWidth', columnWidth, column);\n        }\n    }\n}\n/**\n * Returns a 'tableColumnGroup' element from the 'table'.\n *\n * @internal\n * @param element A 'table' or 'tableColumnGroup' element.\n * @returns A 'tableColumnGroup' element.\n */\nfunction getColumnGroupElement(element) {\n    if (element.is('element', 'tableColumnGroup')) {\n        return element;\n    }\n    const children = element.getChildren();\n    return Array\n        .from(children)\n        .find(element => element.is('element', 'tableColumnGroup'));\n}\n/**\n * Returns an array of 'tableColumn' elements. It may be empty if there's no `tableColumnGroup` element.\n *\n * @internal\n * @param element A 'table' or 'tableColumnGroup' element.\n * @returns An array of 'tableColumn' elements.\n */\nfunction getTableColumnElements(element) {\n    const columnGroupElement = getColumnGroupElement(element);\n    if (!columnGroupElement) {\n        return [];\n    }\n    return Array.from(columnGroupElement.getChildren());\n}\n/**\n * Returns an array of table column widths.\n *\n * @internal\n * @param element A 'table' or 'tableColumnGroup' element.\n * @returns An array of table column widths.\n */\nfunction getTableColumnsWidths(element) {\n    return getTableColumnElements(element).map(column => column.getAttribute('columnWidth'));\n}\n/**\n * Translates the `colSpan` model attribute into additional column widths and returns the resulting array.\n *\n * @internal\n * @param element A 'table' or 'tableColumnGroup' element.\n * @param writer A writer instance.\n * @returns An array of table column widths.\n */\nfunction translateColSpanAttribute(element, writer) {\n    const tableColumnElements = getTableColumnElements(element);\n    return tableColumnElements.reduce((acc, element) => {\n        const columnWidth = element.getAttribute('columnWidth');\n        const colSpan = element.getAttribute('colSpan');\n        if (!colSpan) {\n            acc.push(columnWidth);\n            return acc;\n        }\n        // Translate the `colSpan` model attribute on to the proper number of column widths\n        // and remove it from the element.\n        // See https://github.com/ckeditor/ckeditor5/issues/14521#issuecomment-1662102889 for more details.\n        for (let i = 0; i < colSpan; i++) {\n            acc.push(columnWidth);\n        }\n        writer.removeAttribute('colSpan', element);\n        return acc;\n    }, []);\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/tablecolumnresize/utils.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/tableediting.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TableEditing)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var _converters_upcasttable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./converters/upcasttable */ \"./node_modules/@ckeditor/ckeditor5-table/src/converters/upcasttable.js\");\n/* harmony import */ var _converters_downcast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./converters/downcast */ \"./node_modules/@ckeditor/ckeditor5-table/src/converters/downcast.js\");\n/* harmony import */ var _commands_inserttablecommand__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./commands/inserttablecommand */ \"./node_modules/@ckeditor/ckeditor5-table/src/commands/inserttablecommand.js\");\n/* harmony import */ var _commands_insertrowcommand__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./commands/insertrowcommand */ \"./node_modules/@ckeditor/ckeditor5-table/src/commands/insertrowcommand.js\");\n/* harmony import */ var _commands_insertcolumncommand__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./commands/insertcolumncommand */ \"./node_modules/@ckeditor/ckeditor5-table/src/commands/insertcolumncommand.js\");\n/* harmony import */ var _commands_splitcellcommand__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./commands/splitcellcommand */ \"./node_modules/@ckeditor/ckeditor5-table/src/commands/splitcellcommand.js\");\n/* harmony import */ var _commands_mergecellcommand__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./commands/mergecellcommand */ \"./node_modules/@ckeditor/ckeditor5-table/src/commands/mergecellcommand.js\");\n/* harmony import */ var _commands_removerowcommand__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./commands/removerowcommand */ \"./node_modules/@ckeditor/ckeditor5-table/src/commands/removerowcommand.js\");\n/* harmony import */ var _commands_removecolumncommand__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./commands/removecolumncommand */ \"./node_modules/@ckeditor/ckeditor5-table/src/commands/removecolumncommand.js\");\n/* harmony import */ var _commands_setheaderrowcommand__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./commands/setheaderrowcommand */ \"./node_modules/@ckeditor/ckeditor5-table/src/commands/setheaderrowcommand.js\");\n/* harmony import */ var _commands_setheadercolumncommand__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./commands/setheadercolumncommand */ \"./node_modules/@ckeditor/ckeditor5-table/src/commands/setheadercolumncommand.js\");\n/* harmony import */ var _commands_mergecellscommand__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./commands/mergecellscommand */ \"./node_modules/@ckeditor/ckeditor5-table/src/commands/mergecellscommand.js\");\n/* harmony import */ var _commands_selectrowcommand__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./commands/selectrowcommand */ \"./node_modules/@ckeditor/ckeditor5-table/src/commands/selectrowcommand.js\");\n/* harmony import */ var _commands_selectcolumncommand__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./commands/selectcolumncommand */ \"./node_modules/@ckeditor/ckeditor5-table/src/commands/selectcolumncommand.js\");\n/* harmony import */ var _src_tableutils__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../src/tableutils */ \"./node_modules/@ckeditor/ckeditor5-table/src/tableutils.js\");\n/* harmony import */ var _converters_table_layout_post_fixer__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./converters/table-layout-post-fixer */ \"./node_modules/@ckeditor/ckeditor5-table/src/converters/table-layout-post-fixer.js\");\n/* harmony import */ var _converters_table_cell_paragraph_post_fixer__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./converters/table-cell-paragraph-post-fixer */ \"./node_modules/@ckeditor/ckeditor5-table/src/converters/table-cell-paragraph-post-fixer.js\");\n/* harmony import */ var _converters_table_headings_refresh_handler__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./converters/table-headings-refresh-handler */ \"./node_modules/@ckeditor/ckeditor5-table/src/converters/table-headings-refresh-handler.js\");\n/* harmony import */ var _converters_table_cell_refresh_handler__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./converters/table-cell-refresh-handler */ \"./node_modules/@ckeditor/ckeditor5-table/src/converters/table-cell-refresh-handler.js\");\n/* harmony import */ var _theme_tableediting_css__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../theme/tableediting.css */ \"./node_modules/@ckeditor/ckeditor5-table/theme/tableediting.css\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tableediting\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * The table editing feature.\n */\nclass TableEditing extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'TableEditing';\n    }\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [_src_tableutils__WEBPACK_IMPORTED_MODULE_15__[\"default\"]];\n    }\n    /**\n     * @inheritDoc\n     */\n    constructor(editor) {\n        super(editor);\n        this._additionalSlots = [];\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const model = editor.model;\n        const schema = model.schema;\n        const conversion = editor.conversion;\n        const tableUtils = editor.plugins.get(_src_tableutils__WEBPACK_IMPORTED_MODULE_15__[\"default\"]);\n        schema.register('table', {\n            inheritAllFrom: '$blockObject',\n            allowAttributes: ['headingRows', 'headingColumns']\n        });\n        schema.register('tableRow', {\n            allowIn: 'table',\n            isLimit: true\n        });\n        schema.register('tableCell', {\n            allowContentOf: '$container',\n            allowIn: 'tableRow',\n            allowAttributes: ['colspan', 'rowspan'],\n            isLimit: true,\n            isSelectable: true\n        });\n        // Figure conversion.\n        conversion.for('upcast').add((0,_converters_upcasttable__WEBPACK_IMPORTED_MODULE_1__.upcastTableFigure)());\n        // Table conversion.\n        conversion.for('upcast').add((0,_converters_upcasttable__WEBPACK_IMPORTED_MODULE_1__[\"default\"])());\n        conversion.for('editingDowncast').elementToStructure({\n            model: {\n                name: 'table',\n                attributes: ['headingRows']\n            },\n            view: (0,_converters_downcast__WEBPACK_IMPORTED_MODULE_2__.downcastTable)(tableUtils, {\n                asWidget: true,\n                additionalSlots: this._additionalSlots\n            })\n        });\n        conversion.for('dataDowncast').elementToStructure({\n            model: {\n                name: 'table',\n                attributes: ['headingRows']\n            },\n            view: (0,_converters_downcast__WEBPACK_IMPORTED_MODULE_2__.downcastTable)(tableUtils, {\n                additionalSlots: this._additionalSlots\n            })\n        });\n        // Table row conversion.\n        conversion.for('upcast').elementToElement({ model: 'tableRow', view: 'tr' });\n        conversion.for('upcast').add((0,_converters_upcasttable__WEBPACK_IMPORTED_MODULE_1__.skipEmptyTableRow)());\n        conversion.for('downcast').elementToElement({\n            model: 'tableRow',\n            view: (0,_converters_downcast__WEBPACK_IMPORTED_MODULE_2__.downcastRow)()\n        });\n        // Table cell conversion.\n        conversion.for('upcast').elementToElement({ model: 'tableCell', view: 'td' });\n        conversion.for('upcast').elementToElement({ model: 'tableCell', view: 'th' });\n        conversion.for('upcast').add((0,_converters_upcasttable__WEBPACK_IMPORTED_MODULE_1__.ensureParagraphInTableCell)('td'));\n        conversion.for('upcast').add((0,_converters_upcasttable__WEBPACK_IMPORTED_MODULE_1__.ensureParagraphInTableCell)('th'));\n        conversion.for('editingDowncast').elementToElement({\n            model: 'tableCell',\n            view: (0,_converters_downcast__WEBPACK_IMPORTED_MODULE_2__.downcastCell)({ asWidget: true })\n        });\n        conversion.for('dataDowncast').elementToElement({\n            model: 'tableCell',\n            view: (0,_converters_downcast__WEBPACK_IMPORTED_MODULE_2__.downcastCell)()\n        });\n        // Duplicates code - needed to properly refresh paragraph inside a table cell.\n        conversion.for('editingDowncast').elementToElement({\n            model: 'paragraph',\n            view: (0,_converters_downcast__WEBPACK_IMPORTED_MODULE_2__.convertParagraphInTableCell)({ asWidget: true }),\n            converterPriority: 'high'\n        });\n        conversion.for('dataDowncast').elementToElement({\n            model: 'paragraph',\n            view: (0,_converters_downcast__WEBPACK_IMPORTED_MODULE_2__.convertParagraphInTableCell)(),\n            converterPriority: 'high'\n        });\n        // Table attributes conversion.\n        conversion.for('downcast').attributeToAttribute({ model: 'colspan', view: 'colspan' });\n        conversion.for('upcast').attributeToAttribute({\n            model: { key: 'colspan', value: upcastCellSpan('colspan') },\n            view: 'colspan'\n        });\n        conversion.for('downcast').attributeToAttribute({ model: 'rowspan', view: 'rowspan' });\n        conversion.for('upcast').attributeToAttribute({\n            model: { key: 'rowspan', value: upcastCellSpan('rowspan') },\n            view: 'rowspan'\n        });\n        // Define the config.\n        editor.config.define('table.defaultHeadings.rows', 0);\n        editor.config.define('table.defaultHeadings.columns', 0);\n        // Define all the commands.\n        editor.commands.add('insertTable', new _commands_inserttablecommand__WEBPACK_IMPORTED_MODULE_3__[\"default\"](editor));\n        editor.commands.add('insertTableRowAbove', new _commands_insertrowcommand__WEBPACK_IMPORTED_MODULE_4__[\"default\"](editor, { order: 'above' }));\n        editor.commands.add('insertTableRowBelow', new _commands_insertrowcommand__WEBPACK_IMPORTED_MODULE_4__[\"default\"](editor, { order: 'below' }));\n        editor.commands.add('insertTableColumnLeft', new _commands_insertcolumncommand__WEBPACK_IMPORTED_MODULE_5__[\"default\"](editor, { order: 'left' }));\n        editor.commands.add('insertTableColumnRight', new _commands_insertcolumncommand__WEBPACK_IMPORTED_MODULE_5__[\"default\"](editor, { order: 'right' }));\n        editor.commands.add('removeTableRow', new _commands_removerowcommand__WEBPACK_IMPORTED_MODULE_8__[\"default\"](editor));\n        editor.commands.add('removeTableColumn', new _commands_removecolumncommand__WEBPACK_IMPORTED_MODULE_9__[\"default\"](editor));\n        editor.commands.add('splitTableCellVertically', new _commands_splitcellcommand__WEBPACK_IMPORTED_MODULE_6__[\"default\"](editor, { direction: 'vertically' }));\n        editor.commands.add('splitTableCellHorizontally', new _commands_splitcellcommand__WEBPACK_IMPORTED_MODULE_6__[\"default\"](editor, { direction: 'horizontally' }));\n        editor.commands.add('mergeTableCells', new _commands_mergecellscommand__WEBPACK_IMPORTED_MODULE_12__[\"default\"](editor));\n        editor.commands.add('mergeTableCellRight', new _commands_mergecellcommand__WEBPACK_IMPORTED_MODULE_7__[\"default\"](editor, { direction: 'right' }));\n        editor.commands.add('mergeTableCellLeft', new _commands_mergecellcommand__WEBPACK_IMPORTED_MODULE_7__[\"default\"](editor, { direction: 'left' }));\n        editor.commands.add('mergeTableCellDown', new _commands_mergecellcommand__WEBPACK_IMPORTED_MODULE_7__[\"default\"](editor, { direction: 'down' }));\n        editor.commands.add('mergeTableCellUp', new _commands_mergecellcommand__WEBPACK_IMPORTED_MODULE_7__[\"default\"](editor, { direction: 'up' }));\n        editor.commands.add('setTableColumnHeader', new _commands_setheadercolumncommand__WEBPACK_IMPORTED_MODULE_11__[\"default\"](editor));\n        editor.commands.add('setTableRowHeader', new _commands_setheaderrowcommand__WEBPACK_IMPORTED_MODULE_10__[\"default\"](editor));\n        editor.commands.add('selectTableRow', new _commands_selectrowcommand__WEBPACK_IMPORTED_MODULE_13__[\"default\"](editor));\n        editor.commands.add('selectTableColumn', new _commands_selectcolumncommand__WEBPACK_IMPORTED_MODULE_14__[\"default\"](editor));\n        (0,_converters_table_layout_post_fixer__WEBPACK_IMPORTED_MODULE_16__[\"default\"])(model);\n        (0,_converters_table_cell_paragraph_post_fixer__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(model);\n        this.listenTo(model.document, 'change:data', () => {\n            (0,_converters_table_headings_refresh_handler__WEBPACK_IMPORTED_MODULE_18__[\"default\"])(model, editor.editing);\n            (0,_converters_table_cell_refresh_handler__WEBPACK_IMPORTED_MODULE_19__[\"default\"])(model, editor.editing);\n        });\n    }\n    /**\n     * Registers downcast handler for the additional table slot.\n     */\n    registerAdditionalSlot(slotHandler) {\n        this._additionalSlots.push(slotHandler);\n    }\n}\n/**\n * Returns fixed colspan and rowspan attrbutes values.\n *\n * @param type colspan or rowspan.\n * @returns conversion value function.\n */\nfunction upcastCellSpan(type) {\n    return (cell) => {\n        const span = parseInt(cell.getAttribute(type));\n        if (Number.isNaN(span) || span <= 0) {\n            return null;\n        }\n        return span;\n    };\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/tableediting.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/tablekeyboard.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TableKeyboard)\n/* harmony export */ });\n/* harmony import */ var _tableselection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tableselection */ \"./node_modules/@ckeditor/ckeditor5-table/src/tableselection.js\");\n/* harmony import */ var _tablewalker__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tablewalker */ \"./node_modules/@ckeditor/ckeditor5-table/src/tablewalker.js\");\n/* harmony import */ var _tableutils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tableutils */ \"./node_modules/@ckeditor/ckeditor5-table/src/tableutils.js\");\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ckeditor5/src/utils */ \"ckeditor5/src/utils.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tablekeyboard\n */\n\n\n\n\n\n/**\n * This plugin enables keyboard navigation for tables.\n * It is loaded automatically by the {@link module:table/table~Table} plugin.\n */\nclass TableKeyboard extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_3__.Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'TableKeyboard';\n    }\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [_tableselection__WEBPACK_IMPORTED_MODULE_0__[\"default\"], _tableutils__WEBPACK_IMPORTED_MODULE_2__[\"default\"]];\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const view = this.editor.editing.view;\n        const viewDocument = view.document;\n        this.listenTo(viewDocument, 'arrowKey', (...args) => this._onArrowKey(...args), { context: 'table' });\n        this.listenTo(viewDocument, 'tab', (...args) => this._handleTabOnSelectedTable(...args), { context: 'figure' });\n        this.listenTo(viewDocument, 'tab', (...args) => this._handleTab(...args), { context: ['th', 'td'] });\n    }\n    /**\n     * Handles {@link module:engine/view/document~Document#event:tab tab} events for the <kbd>Tab</kbd> key executed\n     * when the table widget is selected.\n     */\n    _handleTabOnSelectedTable(bubblingEventInfo, domEventData) {\n        const editor = this.editor;\n        const selection = editor.model.document.selection;\n        const selectedElement = selection.getSelectedElement();\n        if (!selectedElement || !selectedElement.is('element', 'table')) {\n            return;\n        }\n        domEventData.preventDefault();\n        domEventData.stopPropagation();\n        bubblingEventInfo.stop();\n        editor.model.change(writer => {\n            writer.setSelection(writer.createRangeIn(selectedElement.getChild(0).getChild(0)));\n        });\n    }\n    /**\n     * Handles {@link module:engine/view/document~Document#event:tab tab} events for the <kbd>Tab</kbd> key executed\n     * inside table cells.\n     */\n    _handleTab(bubblingEventInfo, domEventData) {\n        const editor = this.editor;\n        const tableUtils = this.editor.plugins.get(_tableutils__WEBPACK_IMPORTED_MODULE_2__[\"default\"]);\n        const tableSelection = this.editor.plugins.get('TableSelection');\n        const selection = editor.model.document.selection;\n        const isForward = !domEventData.shiftKey;\n        let tableCell = tableUtils.getTableCellsContainingSelection(selection)[0];\n        if (!tableCell) {\n            tableCell = tableSelection.getFocusCell();\n        }\n        if (!tableCell) {\n            return;\n        }\n        domEventData.preventDefault();\n        domEventData.stopPropagation();\n        bubblingEventInfo.stop();\n        const tableRow = tableCell.parent;\n        const table = tableRow.parent;\n        const currentRowIndex = table.getChildIndex(tableRow);\n        const currentCellIndex = tableRow.getChildIndex(tableCell);\n        const isFirstCellInRow = currentCellIndex === 0;\n        if (!isForward && isFirstCellInRow && currentRowIndex === 0) {\n            // Set the selection over the whole table if the selection was in the first table cell.\n            editor.model.change(writer => {\n                writer.setSelection(writer.createRangeOn(table));\n            });\n            return;\n        }\n        const isLastCellInRow = currentCellIndex === tableRow.childCount - 1;\n        const isLastRow = currentRowIndex === tableUtils.getRows(table) - 1;\n        if (isForward && isLastRow && isLastCellInRow) {\n            editor.execute('insertTableRowBelow');\n            // Check if the command actually added a row. If `insertTableRowBelow` execution didn't add a row (because it was disabled\n            // or it got overwritten) set the selection over the whole table to mirror the first cell case.\n            if (currentRowIndex === tableUtils.getRows(table) - 1) {\n                editor.model.change(writer => {\n                    writer.setSelection(writer.createRangeOn(table));\n                });\n                return;\n            }\n        }\n        let cellToFocus;\n        // Move to the first cell in the next row.\n        if (isForward && isLastCellInRow) {\n            const nextRow = table.getChild(currentRowIndex + 1);\n            cellToFocus = nextRow.getChild(0);\n        }\n        // Move to the last cell in the previous row.\n        else if (!isForward && isFirstCellInRow) {\n            const previousRow = table.getChild(currentRowIndex - 1);\n            cellToFocus = previousRow.getChild(previousRow.childCount - 1);\n        }\n        // Move to the next/previous cell.\n        else {\n            cellToFocus = tableRow.getChild(currentCellIndex + (isForward ? 1 : -1));\n        }\n        editor.model.change(writer => {\n            writer.setSelection(writer.createRangeIn(cellToFocus));\n        });\n    }\n    /**\n     * Handles {@link module:engine/view/document~Document#event:keydown keydown} events.\n     */\n    _onArrowKey(eventInfo, domEventData) {\n        const editor = this.editor;\n        const keyCode = domEventData.keyCode;\n        const direction = (0,ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_4__.getLocalizedArrowKeyCodeDirection)(keyCode, editor.locale.contentLanguageDirection);\n        const wasHandled = this._handleArrowKeys(direction, domEventData.shiftKey);\n        if (wasHandled) {\n            domEventData.preventDefault();\n            domEventData.stopPropagation();\n            eventInfo.stop();\n        }\n    }\n    /**\n     * Handles arrow keys to move the selection around the table.\n     *\n     * @param direction The direction of the arrow key.\n     * @param expandSelection If the current selection should be expanded.\n     * @returns Returns `true` if key was handled.\n     */\n    _handleArrowKeys(direction, expandSelection) {\n        const tableUtils = this.editor.plugins.get(_tableutils__WEBPACK_IMPORTED_MODULE_2__[\"default\"]);\n        const tableSelection = this.editor.plugins.get('TableSelection');\n        const model = this.editor.model;\n        const selection = model.document.selection;\n        const isForward = ['right', 'down'].includes(direction);\n        // In case one or more table cells are selected (from outside),\n        // move the selection to a cell adjacent to the selected table fragment.\n        const selectedCells = tableUtils.getSelectedTableCells(selection);\n        if (selectedCells.length) {\n            let focusCell;\n            if (expandSelection) {\n                focusCell = tableSelection.getFocusCell();\n            }\n            else {\n                focusCell = isForward ? selectedCells[selectedCells.length - 1] : selectedCells[0];\n            }\n            this._navigateFromCellInDirection(focusCell, direction, expandSelection);\n            return true;\n        }\n        // Abort if we're not in a table cell.\n        const tableCell = selection.focus.findAncestor('tableCell');\n        /* istanbul ignore if: paranoid check -- @preserve */\n        if (!tableCell) {\n            return false;\n        }\n        // When the selection is not collapsed.\n        if (!selection.isCollapsed) {\n            if (expandSelection) {\n                // Navigation is in the opposite direction than the selection direction so this is shrinking of the selection.\n                // Selection for sure will not approach cell edge.\n                //\n                // With a special case when all cell content is selected - then selection should expand to the other cell.\n                // Note: When the entire cell gets selected using CTRL+A, the selection is always forward.\n                if (selection.isBackward == isForward && !selection.containsEntireContent(tableCell)) {\n                    return false;\n                }\n            }\n            else {\n                const selectedElement = selection.getSelectedElement();\n                // It will collapse for non-object selected so it's not going to move to other cell.\n                if (!selectedElement || !model.schema.isObject(selectedElement)) {\n                    return false;\n                }\n            }\n        }\n        // Let's check if the selection is at the beginning/end of the cell.\n        if (this._isSelectionAtCellEdge(selection, tableCell, isForward)) {\n            this._navigateFromCellInDirection(tableCell, direction, expandSelection);\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Returns `true` if the selection is at the boundary of a table cell according to the navigation direction.\n     *\n     * @param selection The current selection.\n     * @param tableCell The current table cell element.\n     * @param isForward The expected navigation direction.\n     */\n    _isSelectionAtCellEdge(selection, tableCell, isForward) {\n        const model = this.editor.model;\n        const schema = this.editor.model.schema;\n        const focus = isForward ? selection.getLastPosition() : selection.getFirstPosition();\n        // If the current limit element is not table cell we are for sure not at the cell edge.\n        // Also `modifySelection` will not let us out of it.\n        if (!schema.getLimitElement(focus).is('element', 'tableCell')) {\n            const boundaryPosition = model.createPositionAt(tableCell, isForward ? 'end' : 0);\n            return boundaryPosition.isTouching(focus);\n        }\n        const probe = model.createSelection(focus);\n        model.modifySelection(probe, { direction: isForward ? 'forward' : 'backward' });\n        // If there was no change in the focus position, then it's not possible to move the selection there.\n        return focus.isEqual(probe.focus);\n    }\n    /**\n     * Moves the selection from the given table cell in the specified direction.\n     *\n     * @param focusCell The table cell that is current multi-cell selection focus.\n     * @param direction Direction in which selection should move.\n     * @param expandSelection If the current selection should be expanded. Default value is false.\n     */\n    _navigateFromCellInDirection(focusCell, direction, expandSelection = false) {\n        const model = this.editor.model;\n        const table = focusCell.findAncestor('table');\n        const tableMap = [...new _tablewalker__WEBPACK_IMPORTED_MODULE_1__[\"default\"](table, { includeAllSlots: true })];\n        const { row: lastRow, column: lastColumn } = tableMap[tableMap.length - 1];\n        const currentCellInfo = tableMap.find(({ cell }) => cell == focusCell);\n        let { row, column } = currentCellInfo;\n        switch (direction) {\n            case 'left':\n                column--;\n                break;\n            case 'up':\n                row--;\n                break;\n            case 'right':\n                column += currentCellInfo.cellWidth;\n                break;\n            case 'down':\n                row += currentCellInfo.cellHeight;\n                break;\n        }\n        const isOutsideVertically = row < 0 || row > lastRow;\n        const isBeforeFirstCell = column < 0 && row <= 0;\n        const isAfterLastCell = column > lastColumn && row >= lastRow;\n        // Note that if the table cell at the end of a row is row-spanned then isAfterLastCell will never be true.\n        // However, we don't know if user was navigating on the last row or not, so let's stay in the table.\n        if (isOutsideVertically || isBeforeFirstCell || isAfterLastCell) {\n            model.change(writer => {\n                writer.setSelection(writer.createRangeOn(table));\n            });\n            return;\n        }\n        if (column < 0) {\n            column = expandSelection ? 0 : lastColumn;\n            row--;\n        }\n        else if (column > lastColumn) {\n            column = expandSelection ? lastColumn : 0;\n            row++;\n        }\n        const cellToSelect = tableMap.find(cellInfo => cellInfo.row == row && cellInfo.column == column).cell;\n        const isForward = ['right', 'down'].includes(direction);\n        const tableSelection = this.editor.plugins.get('TableSelection');\n        if (expandSelection && tableSelection.isEnabled) {\n            const anchorCell = tableSelection.getAnchorCell() || focusCell;\n            tableSelection.setCellSelection(anchorCell, cellToSelect);\n        }\n        else {\n            const positionToSelect = model.createPositionAt(cellToSelect, isForward ? 0 : 'end');\n            model.change(writer => {\n                writer.setSelection(positionToSelect);\n            });\n        }\n    }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/tablekeyboard.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/tablemouse.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TableMouse)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var _tableselection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tableselection */ \"./node_modules/@ckeditor/ckeditor5-table/src/tableselection.js\");\n/* harmony import */ var _tablemouse_mouseeventsobserver__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tablemouse/mouseeventsobserver */ \"./node_modules/@ckeditor/ckeditor5-table/src/tablemouse/mouseeventsobserver.js\");\n/* harmony import */ var _tableutils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tableutils */ \"./node_modules/@ckeditor/ckeditor5-table/src/tableutils.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tablemouse\n */\n\n\n\n\n/**\n * This plugin enables a table cells' selection with the mouse.\n * It is loaded automatically by the {@link module:table/table~Table} plugin.\n */\nclass TableMouse extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'TableMouse';\n    }\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [_tableselection__WEBPACK_IMPORTED_MODULE_1__[\"default\"], _tableutils__WEBPACK_IMPORTED_MODULE_3__[\"default\"]];\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        // Currently the MouseObserver only handles `mousedown` and `mouseup` events.\n        // TODO move to the engine?\n        editor.editing.view.addObserver(_tablemouse_mouseeventsobserver__WEBPACK_IMPORTED_MODULE_2__[\"default\"]);\n        this._enableShiftClickSelection();\n        this._enableMouseDragSelection();\n    }\n    /**\n     * Enables making cells selection by <kbd>Shift</kbd>+click. Creates a selection from the cell which previously held\n     * the selection to the cell which was clicked. It can be the same cell, in which case it selects a single cell.\n     */\n    _enableShiftClickSelection() {\n        const editor = this.editor;\n        const tableUtils = editor.plugins.get(_tableutils__WEBPACK_IMPORTED_MODULE_3__[\"default\"]);\n        let blockSelectionChange = false;\n        const tableSelection = editor.plugins.get(_tableselection__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n        this.listenTo(editor.editing.view.document, 'mousedown', (evt, domEventData) => {\n            const selection = editor.model.document.selection;\n            if (!this.isEnabled || !tableSelection.isEnabled) {\n                return;\n            }\n            if (!domEventData.domEvent.shiftKey) {\n                return;\n            }\n            const anchorCell = tableSelection.getAnchorCell() || tableUtils.getTableCellsContainingSelection(selection)[0];\n            if (!anchorCell) {\n                return;\n            }\n            const targetCell = this._getModelTableCellFromDomEvent(domEventData);\n            if (targetCell && haveSameTableParent(anchorCell, targetCell)) {\n                blockSelectionChange = true;\n                tableSelection.setCellSelection(anchorCell, targetCell);\n                domEventData.preventDefault();\n            }\n        });\n        this.listenTo(editor.editing.view.document, 'mouseup', () => {\n            blockSelectionChange = false;\n        });\n        // We need to ignore a `selectionChange` event that is fired after we render our new table cells selection.\n        // When downcasting table cells selection to the view, we put the view selection in the last selected cell\n        // in a place that may not be natively a \"correct\" location. This is – we put it directly in the `<td>` element.\n        // All browsers fire the native `selectionchange` event.\n        // However, all browsers except Safari return the selection in the exact place where we put it\n        // (even though it's visually normalized). Safari returns `<td><p>^foo` that makes our selection observer\n        // fire our `selectionChange` event (because the view selection that we set in the first step differs from the DOM selection).\n        // Since `selectionChange` is fired, we automatically update the model selection that moves it that paragraph.\n        // This breaks our dear cells selection.\n        //\n        // Theoretically this issue concerns only Safari that is the only browser that do normalize the selection.\n        // However, to avoid code branching and to have a good coverage for this event blocker, I enabled it for all browsers.\n        //\n        // Note: I'm keeping the `blockSelectionChange` state separately for shift+click and mouse drag (exact same logic)\n        // so I don't have to try to analyze whether they don't overlap in some weird cases. Probably they don't.\n        // But I have other things to do, like writing this comment.\n        this.listenTo(editor.editing.view.document, 'selectionChange', evt => {\n            if (blockSelectionChange) {\n                // @if CK_DEBUG // console.log( 'Blocked selectionChange to avoid breaking table cells selection.' );\n                evt.stop();\n            }\n        }, { priority: 'highest' });\n    }\n    /**\n     * Enables making cells selection by dragging.\n     *\n     * The selection is made only on mousemove. Mouse tracking is started on mousedown.\n     * However, the cells selection is enabled only after the mouse cursor left the anchor cell.\n     * Thanks to that normal text selection within one cell works just fine. However, you can still select\n     * just one cell by leaving the anchor cell and moving back to it.\n     */\n    _enableMouseDragSelection() {\n        const editor = this.editor;\n        let anchorCell, targetCell;\n        let beganCellSelection = false;\n        let blockSelectionChange = false;\n        const tableSelection = editor.plugins.get(_tableselection__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n        this.listenTo(editor.editing.view.document, 'mousedown', (evt, domEventData) => {\n            if (!this.isEnabled || !tableSelection.isEnabled) {\n                return;\n            }\n            // Make sure to not conflict with the shift+click listener and any other possible handler.\n            if (domEventData.domEvent.shiftKey || domEventData.domEvent.ctrlKey || domEventData.domEvent.altKey) {\n                return;\n            }\n            anchorCell = this._getModelTableCellFromDomEvent(domEventData);\n        });\n        this.listenTo(editor.editing.view.document, 'mousemove', (evt, domEventData) => {\n            if (!domEventData.domEvent.buttons) {\n                return;\n            }\n            if (!anchorCell) {\n                return;\n            }\n            const newTargetCell = this._getModelTableCellFromDomEvent(domEventData);\n            if (newTargetCell && haveSameTableParent(anchorCell, newTargetCell)) {\n                targetCell = newTargetCell;\n                // Switch to the cell selection mode after the mouse cursor left the anchor cell.\n                // Switch off only on mouseup (makes selecting a single cell possible).\n                if (!beganCellSelection && targetCell != anchorCell) {\n                    beganCellSelection = true;\n                }\n            }\n            // Yep, not making a cell selection yet. See method docs.\n            if (!beganCellSelection) {\n                return;\n            }\n            blockSelectionChange = true;\n            tableSelection.setCellSelection(anchorCell, targetCell);\n            domEventData.preventDefault();\n        });\n        this.listenTo(editor.editing.view.document, 'mouseup', () => {\n            beganCellSelection = false;\n            blockSelectionChange = false;\n            anchorCell = null;\n            targetCell = null;\n        });\n        // See the explanation in `_enableShiftClickSelection()`.\n        this.listenTo(editor.editing.view.document, 'selectionChange', evt => {\n            if (blockSelectionChange) {\n                // @if CK_DEBUG // console.log( 'Blocked selectionChange to avoid breaking table cells selection.' );\n                evt.stop();\n            }\n        }, { priority: 'highest' });\n    }\n    /**\n     * Returns the model table cell element based on the target element of the passed DOM event.\n     *\n     * @returns Returns the table cell or `undefined`.\n     */\n    _getModelTableCellFromDomEvent(domEventData) {\n        // Note: Work with positions (not element mapping) because the target element can be an attribute or other non-mapped element.\n        const viewTargetElement = domEventData.target;\n        const viewPosition = this.editor.editing.view.createPositionAt(viewTargetElement, 0);\n        const modelPosition = this.editor.editing.mapper.toModelPosition(viewPosition);\n        const modelElement = modelPosition.parent;\n        return modelElement.findAncestor('tableCell', { includeSelf: true });\n    }\n}\nfunction haveSameTableParent(cellA, cellB) {\n    return cellA.parent.parent == cellB.parent.parent;\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/tablemouse.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/tablemouse/mouseeventsobserver.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ MouseEventsObserver)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/engine */ \"ckeditor5/src/engine.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tablemouse/mouseeventsobserver\n */\n\n/**\n * The mouse selection event observer.\n *\n * It registers listeners for the following DOM events:\n *\n * - `'mousemove'`\n * - `'mouseleave'`\n *\n * Note that this observer is disabled by default. To enable this observer, it needs to be added to\n * {@link module:engine/view/view~View} using the {@link module:engine/view/view~View#addObserver} method.\n *\n * The observer is registered by the {@link module:table/tableselection~TableSelection} plugin.\n */\nclass MouseEventsObserver extends ckeditor5_src_engine__WEBPACK_IMPORTED_MODULE_0__.DomEventObserver {\n    constructor() {\n        super(...arguments);\n        this.domEventType = [\n            'mousemove', 'mouseleave'\n        ];\n    }\n    /**\n     * @inheritDoc\n     */\n    onDomEvent(domEvent) {\n        this.fire(domEvent.type, domEvent);\n    }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/tablemouse/mouseeventsobserver.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/tableproperties.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ TableProperties)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/* harmony import */ var _tableproperties_tablepropertiesediting__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tableproperties/tablepropertiesediting */ "./node_modules/@ckeditor/ckeditor5-table/src/tableproperties/tablepropertiesediting.js");\n/* harmony import */ var _tableproperties_tablepropertiesui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tableproperties/tablepropertiesui */ "./node_modules/@ckeditor/ckeditor5-table/src/tableproperties/tablepropertiesui.js");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tableproperties\n */\n\n\n\n/**\n * The table properties feature. Enables support for setting properties of tables (size, border, background, etc.).\n *\n * Read more in the {@glink features/tables/tables-styling Table and cell styling tools} section.\n * See also the {@link module:table/tablecellproperties~TableCellProperties} plugin.\n *\n * This is a "glue" plugin that loads the\n * {@link module:table/tableproperties/tablepropertiesediting~TablePropertiesEditing table properties editing feature} and\n * the {@link module:table/tableproperties/tablepropertiesui~TablePropertiesUI table properties UI feature}.\n */\nclass TableProperties extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return \'TableProperties\';\n    }\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [_tableproperties_tablepropertiesediting__WEBPACK_IMPORTED_MODULE_1__["default"], _tableproperties_tablepropertiesui__WEBPACK_IMPORTED_MODULE_2__["default"]];\n    }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/tableproperties.js?')},"./node_modules/@ckeditor/ckeditor5-table/src/tableproperties/commands/tablealignmentcommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TableAlignmentCommand)\n/* harmony export */ });\n/* harmony import */ var _tablepropertycommand__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tablepropertycommand */ \"./node_modules/@ckeditor/ckeditor5-table/src/tableproperties/commands/tablepropertycommand.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * The table alignment command.\n *\n * The command is registered by the {@link module:table/tableproperties/tablepropertiesediting~TablePropertiesEditing} as\n * the `'tableAlignment'` editor command.\n *\n * To change the alignment of the selected table, execute the command:\n *\n * ```ts\n * editor.execute( 'tableAlignment', {\n *   value: 'right'\n * } );\n * ```\n */\nclass TableAlignmentCommand extends _tablepropertycommand__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `TableAlignmentCommand` instance.\n     *\n     * @param editor An editor in which this command will be used.\n     * @param defaultValue The default value for the \"alignment\" attribute.\n     */\n    constructor(editor, defaultValue) {\n        super(editor, 'tableAlignment', defaultValue);\n    }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/tableproperties/commands/tablealignmentcommand.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/tableproperties/commands/tablebackgroundcolorcommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TableBackgroundColorCommand)\n/* harmony export */ });\n/* harmony import */ var _tablepropertycommand__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tablepropertycommand */ \"./node_modules/@ckeditor/ckeditor5-table/src/tableproperties/commands/tablepropertycommand.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * The table background color command.\n *\n * The command is registered by the {@link module:table/tableproperties/tablepropertiesediting~TablePropertiesEditing} as\n * the `'tableBackgroundColor'` editor command.\n *\n * To change the background color of the selected table, execute the command:\n *\n * ```ts\n * editor.execute( 'tableBackgroundColor', {\n *   value: '#f00'\n * } );\n * ```\n */\nclass TableBackgroundColorCommand extends _tablepropertycommand__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `TableBackgroundColorCommand` instance.\n     *\n     * @param editor An editor in which this command will be used.\n     * @param defaultValue The default value of the attribute.\n     */\n    constructor(editor, defaultValue) {\n        super(editor, 'tableBackgroundColor', defaultValue);\n    }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/tableproperties/commands/tablebackgroundcolorcommand.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/tableproperties/commands/tablebordercolorcommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TableBorderColorCommand)\n/* harmony export */ });\n/* harmony import */ var _tablepropertycommand__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tablepropertycommand */ \"./node_modules/@ckeditor/ckeditor5-table/src/tableproperties/commands/tablepropertycommand.js\");\n/* harmony import */ var _utils_table_properties__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/table-properties */ \"./node_modules/@ckeditor/ckeditor5-table/src/utils/table-properties.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n\n/**\n * The table border color command.\n *\n * The command is registered by the {@link module:table/tableproperties/tablepropertiesediting~TablePropertiesEditing} as\n * the `'tableBorderColor'` editor command.\n *\n * To change the border color of the selected table, execute the command:\n *\n * ```ts\n * editor.execute( 'tableBorderColor', {\n *   value: '#f00'\n * } );\n * ```\n */\nclass TableBorderColorCommand extends _tablepropertycommand__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `TableBorderColorCommand` instance.\n     *\n     * @param editor An editor in which this command will be used.\n     * @param defaultValue The default value of the attribute.\n     */\n    constructor(editor, defaultValue) {\n        super(editor, 'tableBorderColor', defaultValue);\n    }\n    /**\n     * @inheritDoc\n     */\n    _getValue(table) {\n        if (!table) {\n            return;\n        }\n        const value = (0,_utils_table_properties__WEBPACK_IMPORTED_MODULE_1__.getSingleValue)(table.getAttribute(this.attributeName));\n        if (value === this._defaultValue) {\n            return;\n        }\n        return value;\n    }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/tableproperties/commands/tablebordercolorcommand.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/tableproperties/commands/tableborderstylecommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TableBorderStyleCommand)\n/* harmony export */ });\n/* harmony import */ var _tablepropertycommand__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tablepropertycommand */ \"./node_modules/@ckeditor/ckeditor5-table/src/tableproperties/commands/tablepropertycommand.js\");\n/* harmony import */ var _utils_table_properties__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/table-properties */ \"./node_modules/@ckeditor/ckeditor5-table/src/utils/table-properties.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n\n/**\n * The table style border command.\n *\n * The command is registered by the {@link module:table/tableproperties/tablepropertiesediting~TablePropertiesEditing} as\n * the `'tableBorderStyle'` editor command.\n *\n * To change the border style of the selected table, execute the command:\n *\n * ```ts\n * editor.execute( 'tableBorderStyle', {\n *   value: 'dashed'\n * } );\n * ```\n */\nclass TableBorderStyleCommand extends _tablepropertycommand__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `TableBorderStyleCommand` instance.\n     *\n     * @param editor An editor in which this command will be used.\n     * @param defaultValue The default value of the attribute.\n     */\n    constructor(editor, defaultValue) {\n        super(editor, 'tableBorderStyle', defaultValue);\n    }\n    /**\n     * @inheritDoc\n     */\n    _getValue(table) {\n        if (!table) {\n            return;\n        }\n        const value = (0,_utils_table_properties__WEBPACK_IMPORTED_MODULE_1__.getSingleValue)(table.getAttribute(this.attributeName));\n        if (value === this._defaultValue) {\n            return;\n        }\n        return value;\n    }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/tableproperties/commands/tableborderstylecommand.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/tableproperties/commands/tableborderwidthcommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TableBorderWidthCommand)\n/* harmony export */ });\n/* harmony import */ var _tablepropertycommand__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tablepropertycommand */ \"./node_modules/@ckeditor/ckeditor5-table/src/tableproperties/commands/tablepropertycommand.js\");\n/* harmony import */ var _utils_table_properties__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/table-properties */ \"./node_modules/@ckeditor/ckeditor5-table/src/utils/table-properties.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n\n/**\n * The table width border command.\n *\n * The command is registered by the {@link module:table/tableproperties/tablepropertiesediting~TablePropertiesEditing} as\n * the `'tableBorderWidth'` editor command.\n *\n * To change the border width of the selected table, execute the command:\n *\n * ```ts\n * editor.execute( 'tableBorderWidth', {\n *   value: '5px'\n * } );\n * ```\n *\n * **Note**: This command adds the default `'px'` unit to numeric values. Executing:\n *\n * ```ts\n * editor.execute( 'tableBorderWidth', {\n *   value: '5'\n * } );\n * ```\n *\n * will set the `borderWidth` attribute to `'5px'` in the model.\n */\nclass TableBorderWidthCommand extends _tablepropertycommand__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `TableBorderWidthCommand` instance.\n     *\n     * @param editor An editor in which this command will be used.\n     * @param defaultValue The default value of the attribute.\n     */\n    constructor(editor, defaultValue) {\n        super(editor, 'tableBorderWidth', defaultValue);\n    }\n    /**\n     * @inheritDoc\n     */\n    _getValue(table) {\n        if (!table) {\n            return;\n        }\n        const value = (0,_utils_table_properties__WEBPACK_IMPORTED_MODULE_1__.getSingleValue)(table.getAttribute(this.attributeName));\n        if (value === this._defaultValue) {\n            return;\n        }\n        return value;\n    }\n    /**\n     * @inheritDoc\n     */\n    _getValueToSet(value) {\n        const newValue = (0,_utils_table_properties__WEBPACK_IMPORTED_MODULE_1__.addDefaultUnitToNumericValue)(value, 'px');\n        if (newValue === this._defaultValue) {\n            return;\n        }\n        return newValue;\n    }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/tableproperties/commands/tableborderwidthcommand.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/tableproperties/commands/tableheightcommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TableHeightCommand)\n/* harmony export */ });\n/* harmony import */ var _tablepropertycommand__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tablepropertycommand */ \"./node_modules/@ckeditor/ckeditor5-table/src/tableproperties/commands/tablepropertycommand.js\");\n/* harmony import */ var _utils_table_properties__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/table-properties */ \"./node_modules/@ckeditor/ckeditor5-table/src/utils/table-properties.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tableproperties/commands/tableheightcommand\n */\n\n\n/**\n * The table height command.\n *\n * The command is registered by the {@link module:table/tableproperties/tablepropertiesediting~TablePropertiesEditing} as\n * the `'tableHeight'` editor command.\n *\n * To change the height of the selected table, execute the command:\n *\n * ```ts\n * editor.execute( 'tableHeight', {\n *   value: '500px'\n * } );\n * ```\n *\n * **Note**: This command adds the default `'px'` unit to numeric values. Executing:\n *\n * ```ts\n * editor.execute( 'tableHeight', {\n *   value: '50'\n * } );\n * ```\n *\n * will set the `height` attribute to `'50px'` in the model.\n */\nclass TableHeightCommand extends _tablepropertycommand__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `TableHeightCommand` instance.\n     *\n     * @param editor An editor in which this command will be used.\n     * @param defaultValue The default value of the attribute.\n     */\n    constructor(editor, defaultValue) {\n        super(editor, 'tableHeight', defaultValue);\n    }\n    /**\n     * @inheritDoc\n     */\n    _getValueToSet(value) {\n        value = (0,_utils_table_properties__WEBPACK_IMPORTED_MODULE_1__.addDefaultUnitToNumericValue)(value, 'px');\n        if (value === this._defaultValue) {\n            return;\n        }\n        return value;\n    }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/tableproperties/commands/tableheightcommand.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/tableproperties/commands/tablepropertycommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TablePropertyCommand)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * The table cell attribute command.\n *\n * This command is a base command for other table property commands.\n */\nclass TablePropertyCommand extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Command {\n    /**\n     * Creates a new `TablePropertyCommand` instance.\n     *\n     * @param editor An editor in which this command will be used.\n     * @param attributeName Table cell attribute name.\n     * @param defaultValue The default value of the attribute.\n     */\n    constructor(editor, attributeName, defaultValue) {\n        super(editor);\n        this.attributeName = attributeName;\n        this._defaultValue = defaultValue;\n    }\n    /**\n     * @inheritDoc\n     */\n    refresh() {\n        const editor = this.editor;\n        const selection = editor.model.document.selection;\n        const table = selection.getFirstPosition().findAncestor('table');\n        this.isEnabled = !!table;\n        this.value = this._getValue(table);\n    }\n    /**\n     * Executes the command.\n     *\n     * @fires execute\n     * @param options.value If set, the command will set the attribute on the selected table.\n     * If not set, the command will remove the attribute from the selected table.\n     * @param options.batch Pass the model batch instance to the command to aggregate changes,\n     * for example, to allow a single undo step for multiple executions.\n     */\n    execute(options = {}) {\n        const model = this.editor.model;\n        const selection = model.document.selection;\n        const { value, batch } = options;\n        const table = selection.getFirstPosition().findAncestor('table');\n        const valueToSet = this._getValueToSet(value);\n        model.enqueueChange(batch, writer => {\n            if (valueToSet) {\n                writer.setAttribute(this.attributeName, valueToSet, table);\n            }\n            else {\n                writer.removeAttribute(this.attributeName, table);\n            }\n        });\n    }\n    /**\n     * Returns the attribute value for a table.\n     */\n    _getValue(table) {\n        if (!table) {\n            return;\n        }\n        const value = table.getAttribute(this.attributeName);\n        if (value === this._defaultValue) {\n            return;\n        }\n        return value;\n    }\n    /**\n     * Returns the proper model value. It can be used to add a default unit to numeric values.\n     */\n    _getValueToSet(value) {\n        if (value === this._defaultValue) {\n            return;\n        }\n        return value;\n    }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/tableproperties/commands/tablepropertycommand.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/tableproperties/commands/tablewidthcommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TableWidthCommand)\n/* harmony export */ });\n/* harmony import */ var _tablepropertycommand__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tablepropertycommand */ \"./node_modules/@ckeditor/ckeditor5-table/src/tableproperties/commands/tablepropertycommand.js\");\n/* harmony import */ var _utils_table_properties__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/table-properties */ \"./node_modules/@ckeditor/ckeditor5-table/src/utils/table-properties.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tableproperties/commands/tablewidthcommand\n */\n\n\n/**\n * The table width command.\n *\n * The command is registered by the {@link module:table/tableproperties/tablepropertiesediting~TablePropertiesEditing} as\n * the `'tableWidth'` editor command.\n *\n * To change the width of the selected table, execute the command:\n *\n * ```ts\n * editor.execute( 'tableWidth', {\n *   value: '400px'\n * } );\n * ```\n *\n * **Note**: This command adds the default `'px'` unit to numeric values. Executing:\n *\n * ```ts\n * editor.execute( 'tableWidth', {\n *   value: '50'\n * } );\n * ```\n *\n * will set the `width` attribute to `'50px'` in the model.\n */\nclass TableWidthCommand extends _tablepropertycommand__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `TableWidthCommand` instance.\n     *\n     * @param editor An editor in which this command will be used.\n     * @param defaultValue The default value of the attribute.\n     */\n    constructor(editor, defaultValue) {\n        super(editor, 'tableWidth', defaultValue);\n    }\n    /**\n     * @inheritDoc\n     */\n    _getValueToSet(value) {\n        value = (0,_utils_table_properties__WEBPACK_IMPORTED_MODULE_1__.addDefaultUnitToNumericValue)(value, 'px');\n        if (value === this._defaultValue) {\n            return;\n        }\n        return value;\n    }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/tableproperties/commands/tablewidthcommand.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/tableproperties/tablepropertiesediting.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TablePropertiesEditing)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var ckeditor5_src_engine__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/engine */ \"ckeditor5/src/engine.js\");\n/* harmony import */ var _tableediting__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tableediting */ \"./node_modules/@ckeditor/ckeditor5-table/src/tableediting.js\");\n/* harmony import */ var _converters_tableproperties__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../converters/tableproperties */ \"./node_modules/@ckeditor/ckeditor5-table/src/converters/tableproperties.js\");\n/* harmony import */ var _commands_tablebackgroundcolorcommand__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./commands/tablebackgroundcolorcommand */ \"./node_modules/@ckeditor/ckeditor5-table/src/tableproperties/commands/tablebackgroundcolorcommand.js\");\n/* harmony import */ var _commands_tablebordercolorcommand__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./commands/tablebordercolorcommand */ \"./node_modules/@ckeditor/ckeditor5-table/src/tableproperties/commands/tablebordercolorcommand.js\");\n/* harmony import */ var _commands_tableborderstylecommand__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./commands/tableborderstylecommand */ \"./node_modules/@ckeditor/ckeditor5-table/src/tableproperties/commands/tableborderstylecommand.js\");\n/* harmony import */ var _commands_tableborderwidthcommand__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./commands/tableborderwidthcommand */ \"./node_modules/@ckeditor/ckeditor5-table/src/tableproperties/commands/tableborderwidthcommand.js\");\n/* harmony import */ var _commands_tablewidthcommand__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./commands/tablewidthcommand */ \"./node_modules/@ckeditor/ckeditor5-table/src/tableproperties/commands/tablewidthcommand.js\");\n/* harmony import */ var _commands_tableheightcommand__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./commands/tableheightcommand */ \"./node_modules/@ckeditor/ckeditor5-table/src/tableproperties/commands/tableheightcommand.js\");\n/* harmony import */ var _commands_tablealignmentcommand__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./commands/tablealignmentcommand */ \"./node_modules/@ckeditor/ckeditor5-table/src/tableproperties/commands/tablealignmentcommand.js\");\n/* harmony import */ var _utils_table_properties__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../utils/table-properties */ \"./node_modules/@ckeditor/ckeditor5-table/src/utils/table-properties.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tableproperties/tablepropertiesediting\n */\n\n\n\n\n\n\n\n\n\n\n\n\nconst ALIGN_VALUES_REG_EXP = /^(left|center|right)$/;\nconst FLOAT_VALUES_REG_EXP = /^(left|none|right)$/;\n/**\n * The table properties editing feature.\n *\n * Introduces table's model attributes and their conversion:\n *\n * - border: `tableBorderStyle`, `tableBorderColor` and `tableBorderWidth`\n * - background color: `tableBackgroundColor`\n * - horizontal alignment: `tableAlignment`\n * - width & height: `tableWidth` & `tableHeight`\n *\n * It also registers commands used to manipulate the above attributes:\n *\n * - border: `'tableBorderStyle'`, `'tableBorderColor'` and `'tableBorderWidth'` commands\n * - background color: `'tableBackgroundColor'`\n * - horizontal alignment: `'tableAlignment'`\n * - width & height: `'tableWidth'` & `'tableHeight'`\n */\nclass TablePropertiesEditing extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'TablePropertiesEditing';\n    }\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [_tableediting__WEBPACK_IMPORTED_MODULE_2__[\"default\"]];\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const schema = editor.model.schema;\n        const conversion = editor.conversion;\n        editor.config.define('table.tableProperties.defaultProperties', {});\n        const defaultTableProperties = (0,_utils_table_properties__WEBPACK_IMPORTED_MODULE_11__.getNormalizedDefaultProperties)(editor.config.get('table.tableProperties.defaultProperties'), {\n            includeAlignmentProperty: true\n        });\n        editor.data.addStyleProcessorRules(ckeditor5_src_engine__WEBPACK_IMPORTED_MODULE_1__.addBorderRules);\n        enableBorderProperties(schema, conversion, {\n            color: defaultTableProperties.borderColor,\n            style: defaultTableProperties.borderStyle,\n            width: defaultTableProperties.borderWidth\n        });\n        editor.commands.add('tableBorderColor', new _commands_tablebordercolorcommand__WEBPACK_IMPORTED_MODULE_5__[\"default\"](editor, defaultTableProperties.borderColor));\n        editor.commands.add('tableBorderStyle', new _commands_tableborderstylecommand__WEBPACK_IMPORTED_MODULE_6__[\"default\"](editor, defaultTableProperties.borderStyle));\n        editor.commands.add('tableBorderWidth', new _commands_tableborderwidthcommand__WEBPACK_IMPORTED_MODULE_7__[\"default\"](editor, defaultTableProperties.borderWidth));\n        enableAlignmentProperty(schema, conversion, defaultTableProperties.alignment);\n        editor.commands.add('tableAlignment', new _commands_tablealignmentcommand__WEBPACK_IMPORTED_MODULE_10__[\"default\"](editor, defaultTableProperties.alignment));\n        enableTableToFigureProperty(schema, conversion, {\n            modelAttribute: 'tableWidth',\n            styleName: 'width',\n            defaultValue: defaultTableProperties.width\n        });\n        editor.commands.add('tableWidth', new _commands_tablewidthcommand__WEBPACK_IMPORTED_MODULE_8__[\"default\"](editor, defaultTableProperties.width));\n        enableTableToFigureProperty(schema, conversion, {\n            modelAttribute: 'tableHeight',\n            styleName: 'height',\n            defaultValue: defaultTableProperties.height\n        });\n        editor.commands.add('tableHeight', new _commands_tableheightcommand__WEBPACK_IMPORTED_MODULE_9__[\"default\"](editor, defaultTableProperties.height));\n        editor.data.addStyleProcessorRules(ckeditor5_src_engine__WEBPACK_IMPORTED_MODULE_1__.addBackgroundRules);\n        enableProperty(schema, conversion, {\n            modelAttribute: 'tableBackgroundColor',\n            styleName: 'background-color',\n            defaultValue: defaultTableProperties.backgroundColor\n        });\n        editor.commands.add('tableBackgroundColor', new _commands_tablebackgroundcolorcommand__WEBPACK_IMPORTED_MODULE_4__[\"default\"](editor, defaultTableProperties.backgroundColor));\n    }\n}\n/**\n * Enables `tableBorderStyle'`, `tableBorderColor'` and `tableBorderWidth'` attributes for table.\n *\n * @param defaultBorder The default border values.\n * @param defaultBorder.color The default `tableBorderColor` value.\n * @param defaultBorder.style The default `tableBorderStyle` value.\n * @param defaultBorder.width The default `tableBorderWidth` value.\n */\nfunction enableBorderProperties(schema, conversion, defaultBorder) {\n    const modelAttributes = {\n        width: 'tableBorderWidth',\n        color: 'tableBorderColor',\n        style: 'tableBorderStyle'\n    };\n    schema.extend('table', {\n        allowAttributes: Object.values(modelAttributes)\n    });\n    (0,_converters_tableproperties__WEBPACK_IMPORTED_MODULE_3__.upcastBorderStyles)(conversion, 'table', modelAttributes, defaultBorder);\n    (0,_converters_tableproperties__WEBPACK_IMPORTED_MODULE_3__.downcastTableAttribute)(conversion, { modelAttribute: modelAttributes.color, styleName: 'border-color' });\n    (0,_converters_tableproperties__WEBPACK_IMPORTED_MODULE_3__.downcastTableAttribute)(conversion, { modelAttribute: modelAttributes.style, styleName: 'border-style' });\n    (0,_converters_tableproperties__WEBPACK_IMPORTED_MODULE_3__.downcastTableAttribute)(conversion, { modelAttribute: modelAttributes.width, styleName: 'border-width' });\n}\n/**\n * Enables the `'alignment'` attribute for table.\n *\n * @param defaultValue The default alignment value.\n */\nfunction enableAlignmentProperty(schema, conversion, defaultValue) {\n    schema.extend('table', {\n        allowAttributes: ['tableAlignment']\n    });\n    conversion.for('downcast')\n        .attributeToAttribute({\n        model: {\n            name: 'table',\n            key: 'tableAlignment'\n        },\n        view: alignment => ({\n            key: 'style',\n            value: {\n                // Model: `alignment:center` => CSS: `float:none`.\n                float: alignment === 'center' ? 'none' : alignment\n            }\n        }),\n        converterPriority: 'high'\n    });\n    conversion.for('upcast')\n        // Support for the `float:*;` CSS definition for the table alignment.\n        .attributeToAttribute({\n        view: {\n            name: /^(table|figure)$/,\n            styles: {\n                float: FLOAT_VALUES_REG_EXP\n            }\n        },\n        model: {\n            key: 'tableAlignment',\n            value: (viewElement) => {\n                let align = viewElement.getStyle('float');\n                // CSS: `float:none` => Model: `alignment:center`.\n                if (align === 'none') {\n                    align = 'center';\n                }\n                return align === defaultValue ? null : align;\n            }\n        }\n    })\n        // Support for the `align` attribute as the backward compatibility while pasting from other sources.\n        .attributeToAttribute({\n        view: {\n            attributes: {\n                align: ALIGN_VALUES_REG_EXP\n            }\n        },\n        model: {\n            name: 'table',\n            key: 'tableAlignment',\n            value: (viewElement) => {\n                const align = viewElement.getAttribute('align');\n                return align === defaultValue ? null : align;\n            }\n        }\n    });\n}\n/**\n * Enables conversion for an attribute for simple view-model mappings.\n *\n * @param options.defaultValue The default value for the specified `modelAttribute`.\n */\nfunction enableProperty(schema, conversion, options) {\n    const { modelAttribute } = options;\n    schema.extend('table', {\n        allowAttributes: [modelAttribute]\n    });\n    (0,_converters_tableproperties__WEBPACK_IMPORTED_MODULE_3__.upcastStyleToAttribute)(conversion, { viewElement: 'table', ...options });\n    (0,_converters_tableproperties__WEBPACK_IMPORTED_MODULE_3__.downcastTableAttribute)(conversion, options);\n}\n/**\n * Enables conversion for an attribute for simple view (figure) to model (table) mappings.\n */\nfunction enableTableToFigureProperty(schema, conversion, options) {\n    const { modelAttribute } = options;\n    schema.extend('table', {\n        allowAttributes: [modelAttribute]\n    });\n    (0,_converters_tableproperties__WEBPACK_IMPORTED_MODULE_3__.upcastStyleToAttribute)(conversion, {\n        viewElement: /^(table|figure)$/,\n        shouldUpcast: (element) => !(element.name == 'table' && element.parent.name == 'figure'),\n        ...options\n    });\n    (0,_converters_tableproperties__WEBPACK_IMPORTED_MODULE_3__.downcastAttributeToStyle)(conversion, { modelElement: 'table', ...options });\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/tableproperties/tablepropertiesediting.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/tableproperties/tablepropertiesui.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TablePropertiesUI)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/ui */ \"ckeditor5/src/ui.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! lodash-es */ \"./node_modules/lodash-es/debounce.js\");\n/* harmony import */ var _ui_tablepropertiesview__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ui/tablepropertiesview */ \"./node_modules/@ckeditor/ckeditor5-table/src/tableproperties/ui/tablepropertiesview.js\");\n/* harmony import */ var _theme_icons_table_properties_svg__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../../theme/icons/table-properties.svg */ \"./node_modules/@ckeditor/ckeditor5-table/theme/icons/table-properties.svg\");\n/* harmony import */ var _utils_ui_table_properties__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/ui/table-properties */ \"./node_modules/@ckeditor/ckeditor5-table/src/utils/ui/table-properties.js\");\n/* harmony import */ var _utils_ui_widget__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/ui/widget */ \"./node_modules/@ckeditor/ckeditor5-table/src/utils/ui/widget.js\");\n/* harmony import */ var _utils_ui_contextualballoon__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/ui/contextualballoon */ \"./node_modules/@ckeditor/ckeditor5-table/src/utils/ui/contextualballoon.js\");\n/* harmony import */ var _utils_table_properties__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/table-properties */ \"./node_modules/@ckeditor/ckeditor5-table/src/utils/table-properties.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tableproperties/tablepropertiesui\n */\n\n\n\n\n\n\n\n\n\nconst ERROR_TEXT_TIMEOUT = 500;\n// Map of view properties and related commands.\nconst propertyToCommandMap = {\n    borderStyle: 'tableBorderStyle',\n    borderColor: 'tableBorderColor',\n    borderWidth: 'tableBorderWidth',\n    backgroundColor: 'tableBackgroundColor',\n    width: 'tableWidth',\n    height: 'tableHeight',\n    alignment: 'tableAlignment'\n};\n/**\n * The table properties UI plugin. It introduces the `'tableProperties'` button\n * that opens a form allowing to specify visual styling of an entire table.\n *\n * It uses the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon plugin}.\n */\nclass TablePropertiesUI extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.ContextualBalloon];\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'TablePropertiesUI';\n    }\n    /**\n     * @inheritDoc\n     */\n    constructor(editor) {\n        super(editor);\n        /**\n         * The properties form view displayed inside the balloon.\n         */\n        this.view = null;\n        editor.config.define('table.tableProperties', {\n            borderColors: _utils_ui_table_properties__WEBPACK_IMPORTED_MODULE_4__.defaultColors,\n            backgroundColors: _utils_ui_table_properties__WEBPACK_IMPORTED_MODULE_4__.defaultColors\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const t = editor.t;\n        this._defaultTableProperties = (0,_utils_table_properties__WEBPACK_IMPORTED_MODULE_7__.getNormalizedDefaultProperties)(editor.config.get('table.tableProperties.defaultProperties'), {\n            includeAlignmentProperty: true\n        });\n        this._balloon = editor.plugins.get(ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.ContextualBalloon);\n        editor.ui.componentFactory.add('tableProperties', locale => {\n            const view = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.ButtonView(locale);\n            view.set({\n                label: t('Table properties'),\n                icon: _theme_icons_table_properties_svg__WEBPACK_IMPORTED_MODULE_3__[\"default\"],\n                tooltip: true\n            });\n            this.listenTo(view, 'execute', () => this._showView());\n            const commands = Object.values(propertyToCommandMap)\n                .map(commandName => editor.commands.get(commandName));\n            view.bind('isEnabled').toMany(commands, 'isEnabled', (...areEnabled) => (areEnabled.some(isCommandEnabled => isCommandEnabled)));\n            return view;\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        super.destroy();\n        // Destroy created UI components as they are not automatically destroyed.\n        // See https://github.com/ckeditor/ckeditor5/issues/1341.\n        if (this.view) {\n            this.view.destroy();\n        }\n    }\n    /**\n     * Creates the {@link module:table/tableproperties/ui/tablepropertiesview~TablePropertiesView} instance.\n     *\n     * @returns The table properties form view instance.\n     */\n    _createPropertiesView() {\n        const editor = this.editor;\n        const config = editor.config.get('table.tableProperties');\n        const borderColorsConfig = (0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.normalizeColorOptions)(config.borderColors);\n        const localizedBorderColors = (0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.getLocalizedColorOptions)(editor.locale, borderColorsConfig);\n        const backgroundColorsConfig = (0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.normalizeColorOptions)(config.backgroundColors);\n        const localizedBackgroundColors = (0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.getLocalizedColorOptions)(editor.locale, backgroundColorsConfig);\n        const hasColorPicker = config.colorPicker !== false;\n        const view = new _ui_tablepropertiesview__WEBPACK_IMPORTED_MODULE_2__[\"default\"](editor.locale, {\n            borderColors: localizedBorderColors,\n            backgroundColors: localizedBackgroundColors,\n            defaultTableProperties: this._defaultTableProperties,\n            colorPickerConfig: hasColorPicker ? (config.colorPicker || {}) : false\n        });\n        const t = editor.t;\n        // Render the view so its #element is available for the clickOutsideHandler.\n        view.render();\n        this.listenTo(view, 'submit', () => {\n            this._hideView();\n        });\n        this.listenTo(view, 'cancel', () => {\n            // https://github.com/ckeditor/ckeditor5/issues/6180\n            if (this._undoStepBatch.operations.length) {\n                editor.execute('undo', this._undoStepBatch);\n            }\n            this._hideView();\n        });\n        // Close the balloon on Esc key press.\n        view.keystrokes.set('Esc', (data, cancel) => {\n            this._hideView();\n            cancel();\n        });\n        // Close on click outside of balloon panel element.\n        (0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.clickOutsideHandler)({\n            emitter: view,\n            activator: () => this._isViewInBalloon,\n            contextElements: [this._balloon.view.element],\n            callback: () => this._hideView()\n        });\n        const colorErrorText = (0,_utils_ui_table_properties__WEBPACK_IMPORTED_MODULE_4__.getLocalizedColorErrorText)(t);\n        const lengthErrorText = (0,_utils_ui_table_properties__WEBPACK_IMPORTED_MODULE_4__.getLocalizedLengthErrorText)(t);\n        // Create the \"UI -> editor data\" binding.\n        // These listeners update the editor data (via table commands) when any observable\n        // property of the view has changed. They also validate the value and display errors in the UI\n        // when necessary. This makes the view live, which means the changes are\n        // visible in the editing as soon as the user types or changes fields' values.\n        view.on('change:borderStyle', this._getPropertyChangeCallback('tableBorderStyle'));\n        view.on('change:borderColor', this._getValidatedPropertyChangeCallback({\n            viewField: view.borderColorInput,\n            commandName: 'tableBorderColor',\n            errorText: colorErrorText,\n            validator: _utils_ui_table_properties__WEBPACK_IMPORTED_MODULE_4__.colorFieldValidator\n        }));\n        view.on('change:borderWidth', this._getValidatedPropertyChangeCallback({\n            viewField: view.borderWidthInput,\n            commandName: 'tableBorderWidth',\n            errorText: lengthErrorText,\n            validator: _utils_ui_table_properties__WEBPACK_IMPORTED_MODULE_4__.lineWidthFieldValidator\n        }));\n        view.on('change:backgroundColor', this._getValidatedPropertyChangeCallback({\n            viewField: view.backgroundInput,\n            commandName: 'tableBackgroundColor',\n            errorText: colorErrorText,\n            validator: _utils_ui_table_properties__WEBPACK_IMPORTED_MODULE_4__.colorFieldValidator\n        }));\n        view.on('change:width', this._getValidatedPropertyChangeCallback({\n            viewField: view.widthInput,\n            commandName: 'tableWidth',\n            errorText: lengthErrorText,\n            validator: _utils_ui_table_properties__WEBPACK_IMPORTED_MODULE_4__.lengthFieldValidator\n        }));\n        view.on('change:height', this._getValidatedPropertyChangeCallback({\n            viewField: view.heightInput,\n            commandName: 'tableHeight',\n            errorText: lengthErrorText,\n            validator: _utils_ui_table_properties__WEBPACK_IMPORTED_MODULE_4__.lengthFieldValidator\n        }));\n        view.on('change:alignment', this._getPropertyChangeCallback('tableAlignment'));\n        return view;\n    }\n    /**\n     * In this method the \"editor data -> UI\" binding is happening.\n     *\n     * When executed, this method obtains selected table property values from various table commands\n     * and passes them to the {@link #view}.\n     *\n     * This way, the UI stays up–to–date with the editor data.\n     */\n    _fillViewFormFromCommandValues() {\n        const commands = this.editor.commands;\n        const borderStyleCommand = commands.get('tableBorderStyle');\n        Object.entries(propertyToCommandMap)\n            .map(([property, commandName]) => {\n            const propertyKey = property;\n            const defaultValue = this._defaultTableProperties[propertyKey] || '';\n            return [propertyKey, (commands.get(commandName).value || defaultValue)];\n        })\n            .forEach(([property, value]) => {\n            // Do not set the `border-color` and `border-width` fields if `border-style:none`.\n            if ((property === 'borderColor' || property === 'borderWidth') && borderStyleCommand.value === 'none') {\n                return;\n            }\n            this.view.set(property, value);\n        });\n        this._isReady = true;\n    }\n    /**\n     * Shows the {@link #view} in the {@link #_balloon}.\n     *\n     * **Note**: Each time a view is shown, the new {@link #_undoStepBatch} is created that contains\n     * all changes made to the document when the view is visible, allowing a single undo step\n     * for all of them.\n     */\n    _showView() {\n        const editor = this.editor;\n        if (!this.view) {\n            this.view = this._createPropertiesView();\n        }\n        this.listenTo(editor.ui, 'update', () => {\n            this._updateView();\n        });\n        // Update the view with the model values.\n        this._fillViewFormFromCommandValues();\n        this._balloon.add({\n            view: this.view,\n            position: (0,_utils_ui_contextualballoon__WEBPACK_IMPORTED_MODULE_6__.getBalloonTablePositionData)(editor)\n        });\n        // Create a new batch. Clicking \"Cancel\" will undo this batch.\n        this._undoStepBatch = editor.model.createBatch();\n        // Basic a11y.\n        this.view.focus();\n    }\n    /**\n     * Removes the {@link #view} from the {@link #_balloon}.\n     */\n    _hideView() {\n        const editor = this.editor;\n        this.stopListening(editor.ui, 'update');\n        this._isReady = false;\n        // Blur any input element before removing it from DOM to prevent issues in some browsers.\n        // See https://github.com/ckeditor/ckeditor5/issues/1501.\n        this.view.saveButtonView.focus();\n        this._balloon.remove(this.view);\n        // Make sure the focus is not lost in the process by putting it directly\n        // into the editing view.\n        this.editor.editing.view.focus();\n    }\n    /**\n     * Repositions the {@link #_balloon} or hides the {@link #view} if a table is no longer selected.\n     */\n    _updateView() {\n        const editor = this.editor;\n        const viewDocument = editor.editing.view.document;\n        if (!(0,_utils_ui_widget__WEBPACK_IMPORTED_MODULE_5__.getTableWidgetAncestor)(viewDocument.selection)) {\n            this._hideView();\n        }\n        else if (this._isViewVisible) {\n            (0,_utils_ui_contextualballoon__WEBPACK_IMPORTED_MODULE_6__.repositionContextualBalloon)(editor, 'table');\n        }\n    }\n    /**\n     * Returns `true` when the {@link #view} is the visible in the {@link #_balloon}.\n     */\n    get _isViewVisible() {\n        return !!this.view && this._balloon.visibleView === this.view;\n    }\n    /**\n     * Returns `true` when the {@link #view} is in the {@link #_balloon}.\n     */\n    get _isViewInBalloon() {\n        return !!this.view && this._balloon.hasView(this.view);\n    }\n    /**\n     * Creates a callback that when executed upon {@link #view view's} property change\n     * executes a related editor command with the new property value.\n     *\n     * If new value will be set to the default value, the command will not be executed.\n     *\n     * @param commandName The command that will be executed.\n     */\n    _getPropertyChangeCallback(commandName) {\n        return (evt, propertyName, newValue) => {\n            // Do not execute the command on initial call (opening the table properties view).\n            if (!this._isReady) {\n                return;\n            }\n            this.editor.execute(commandName, {\n                value: newValue,\n                batch: this._undoStepBatch\n            });\n        };\n    }\n    /**\n     * Creates a callback that when executed upon {@link #view view's} property change:\n     * * executes a related editor command with the new property value if the value is valid,\n     * * or sets the error text next to the invalid field, if the value did not pass the validation.\n     */\n    _getValidatedPropertyChangeCallback(options) {\n        const { commandName, viewField, validator, errorText } = options;\n        const setErrorTextDebounced = (0,lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(() => {\n            viewField.errorText = errorText;\n        }, ERROR_TEXT_TIMEOUT);\n        return (evt, propertyName, newValue) => {\n            setErrorTextDebounced.cancel();\n            // Do not execute the command on initial call (opening the table properties view).\n            if (!this._isReady) {\n                return;\n            }\n            if (validator(newValue)) {\n                this.editor.execute(commandName, {\n                    value: newValue,\n                    batch: this._undoStepBatch\n                });\n                viewField.errorText = null;\n            }\n            else {\n                setErrorTextDebounced();\n            }\n        };\n    }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/tableproperties/tablepropertiesui.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/tableproperties/ui/tablepropertiesview.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TablePropertiesView)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/ui */ \"ckeditor5/src/ui.js\");\n/* harmony import */ var ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/utils */ \"ckeditor5/src/utils.js\");\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var _utils_ui_table_properties__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/ui/table-properties */ \"./node_modules/@ckeditor/ckeditor5-table/src/utils/ui/table-properties.js\");\n/* harmony import */ var _ui_formrowview__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../ui/formrowview */ \"./node_modules/@ckeditor/ckeditor5-table/src/ui/formrowview.js\");\n/* harmony import */ var _theme_form_css__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../theme/form.css */ \"./node_modules/@ckeditor/ckeditor5-table/theme/form.css\");\n/* harmony import */ var _theme_tableform_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../theme/tableform.css */ \"./node_modules/@ckeditor/ckeditor5-table/theme/tableform.css\");\n/* harmony import */ var _theme_tableproperties_css__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../theme/tableproperties.css */ \"./node_modules/@ckeditor/ckeditor5-table/theme/tableproperties.css\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tableproperties/ui/tablepropertiesview\n */\n\n\n\n\n\n\n\n\nconst ALIGNMENT_ICONS = {\n    left: ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__.icons.objectLeft,\n    center: ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__.icons.objectCenter,\n    right: ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__.icons.objectRight\n};\n/**\n * The class representing a table properties form, allowing users to customize\n * certain style aspects of a table, for instance, border, background color, alignment, etc..\n */\nclass TablePropertiesView extends ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.View {\n    /**\n     * @param locale The {@link module:core/editor/editor~Editor#locale} instance.\n     * @param options Additional configuration of the view.\n     */\n    constructor(locale, options) {\n        super(locale);\n        this.set({\n            borderStyle: '',\n            borderWidth: '',\n            borderColor: '',\n            backgroundColor: '',\n            width: '',\n            height: '',\n            alignment: ''\n        });\n        this.options = options;\n        const { borderStyleDropdown, borderWidthInput, borderColorInput, borderRowLabel } = this._createBorderFields();\n        const { backgroundRowLabel, backgroundInput } = this._createBackgroundFields();\n        const { widthInput, operatorLabel, heightInput, dimensionsLabel } = this._createDimensionFields();\n        const { alignmentToolbar, alignmentLabel } = this._createAlignmentFields();\n        this.focusTracker = new ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_1__.FocusTracker();\n        this.keystrokes = new ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_1__.KeystrokeHandler();\n        this.children = this.createCollection();\n        this.borderStyleDropdown = borderStyleDropdown;\n        this.borderWidthInput = borderWidthInput;\n        this.borderColorInput = borderColorInput;\n        this.backgroundInput = backgroundInput;\n        this.widthInput = widthInput;\n        this.heightInput = heightInput;\n        this.alignmentToolbar = alignmentToolbar;\n        // Defer creating to make sure other fields are present and the Save button can\n        // bind its #isEnabled to their error messages so there's no way to save unless all\n        // fields are valid.\n        const { saveButtonView, cancelButtonView } = this._createActionButtons();\n        this.saveButtonView = saveButtonView;\n        this.cancelButtonView = cancelButtonView;\n        this._focusables = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.ViewCollection();\n        this._focusCycler = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.FocusCycler({\n            focusables: this._focusables,\n            focusTracker: this.focusTracker,\n            keystrokeHandler: this.keystrokes,\n            actions: {\n                // Navigate form fields backwards using the Shift + Tab keystroke.\n                focusPrevious: 'shift + tab',\n                // Navigate form fields forwards using the Tab key.\n                focusNext: 'tab'\n            }\n        });\n        // Form header.\n        this.children.add(new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.FormHeaderView(locale, {\n            label: this.t('Table properties')\n        }));\n        // Border row.\n        this.children.add(new _ui_formrowview__WEBPACK_IMPORTED_MODULE_4__[\"default\"](locale, {\n            labelView: borderRowLabel,\n            children: [\n                borderRowLabel,\n                borderStyleDropdown,\n                borderColorInput,\n                borderWidthInput\n            ],\n            class: 'ck-table-form__border-row'\n        }));\n        // Background row.\n        this.children.add(new _ui_formrowview__WEBPACK_IMPORTED_MODULE_4__[\"default\"](locale, {\n            labelView: backgroundRowLabel,\n            children: [\n                backgroundRowLabel,\n                backgroundInput\n            ],\n            class: 'ck-table-form__background-row'\n        }));\n        this.children.add(new _ui_formrowview__WEBPACK_IMPORTED_MODULE_4__[\"default\"](locale, {\n            children: [\n                // Dimensions row.\n                new _ui_formrowview__WEBPACK_IMPORTED_MODULE_4__[\"default\"](locale, {\n                    labelView: dimensionsLabel,\n                    children: [\n                        dimensionsLabel,\n                        widthInput,\n                        operatorLabel,\n                        heightInput\n                    ],\n                    class: 'ck-table-form__dimensions-row'\n                }),\n                // Alignment row.\n                new _ui_formrowview__WEBPACK_IMPORTED_MODULE_4__[\"default\"](locale, {\n                    labelView: alignmentLabel,\n                    children: [\n                        alignmentLabel,\n                        alignmentToolbar\n                    ],\n                    class: 'ck-table-properties-form__alignment-row'\n                })\n            ]\n        }));\n        // Action row.\n        this.children.add(new _ui_formrowview__WEBPACK_IMPORTED_MODULE_4__[\"default\"](locale, {\n            children: [\n                this.saveButtonView,\n                this.cancelButtonView\n            ],\n            class: 'ck-table-form__action-row'\n        }));\n        this.setTemplate({\n            tag: 'form',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-form',\n                    'ck-table-form',\n                    'ck-table-properties-form'\n                ],\n                // https://github.com/ckeditor/ckeditor5-link/issues/90\n                tabindex: '-1'\n            },\n            children: this.children\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        // Enable the \"submit\" event for this view. It can be triggered by the #saveButtonView\n        // which is of the \"submit\" DOM \"type\".\n        (0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.submitHandler)({\n            view: this\n        });\n        [\n            this.borderStyleDropdown,\n            this.borderColorInput,\n            this.borderColorInput.fieldView.dropdownView.buttonView,\n            this.borderWidthInput,\n            this.backgroundInput,\n            this.backgroundInput.fieldView.dropdownView.buttonView,\n            this.widthInput,\n            this.heightInput,\n            this.alignmentToolbar,\n            this.saveButtonView,\n            this.cancelButtonView\n        ].forEach(view => {\n            // Register the view as focusable.\n            this._focusables.add(view);\n            // Register the view in the focus tracker.\n            this.focusTracker.add(view.element);\n        });\n        // Mainly for closing using \"Esc\" and navigation using \"Tab\".\n        this.keystrokes.listenTo(this.element);\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        super.destroy();\n        this.focusTracker.destroy();\n        this.keystrokes.destroy();\n    }\n    /**\n     * Focuses the fist focusable field in the form.\n     */\n    focus() {\n        this._focusCycler.focusFirst();\n    }\n    /**\n     * Creates the following form fields:\n     *\n     * * {@link #borderStyleDropdown},\n     * * {@link #borderWidthInput},\n     * * {@link #borderColorInput}.\n     */\n    _createBorderFields() {\n        const defaultTableProperties = this.options.defaultTableProperties;\n        const defaultBorder = {\n            style: defaultTableProperties.borderStyle,\n            width: defaultTableProperties.borderWidth,\n            color: defaultTableProperties.borderColor\n        };\n        const colorInputCreator = (0,_utils_ui_table_properties__WEBPACK_IMPORTED_MODULE_3__.getLabeledColorInputCreator)({\n            colorConfig: this.options.borderColors,\n            columns: 5,\n            defaultColorValue: defaultBorder.color,\n            colorPickerConfig: this.options.colorPickerConfig\n        });\n        const locale = this.locale;\n        const t = this.t;\n        const accessibleLabel = t('Style');\n        // -- Group label ---------------------------------------------\n        const borderRowLabel = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.LabelView(locale);\n        borderRowLabel.text = t('Border');\n        // -- Style ---------------------------------------------------\n        const styleLabels = (0,_utils_ui_table_properties__WEBPACK_IMPORTED_MODULE_3__.getBorderStyleLabels)(t);\n        const borderStyleDropdown = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.LabeledFieldView(locale, ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.createLabeledDropdown);\n        borderStyleDropdown.set({\n            label: accessibleLabel,\n            class: 'ck-table-form__border-style'\n        });\n        borderStyleDropdown.fieldView.buttonView.set({\n            ariaLabel: accessibleLabel,\n            ariaLabelledBy: undefined,\n            isOn: false,\n            withText: true,\n            tooltip: accessibleLabel\n        });\n        borderStyleDropdown.fieldView.buttonView.bind('label').to(this, 'borderStyle', value => {\n            return styleLabels[value ? value : 'none'];\n        });\n        borderStyleDropdown.fieldView.on('execute', evt => {\n            this.borderStyle = evt.source._borderStyleValue;\n        });\n        borderStyleDropdown.bind('isEmpty').to(this, 'borderStyle', value => !value);\n        (0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.addListToDropdown)(borderStyleDropdown.fieldView, (0,_utils_ui_table_properties__WEBPACK_IMPORTED_MODULE_3__.getBorderStyleDefinitions)(this, defaultBorder.style), {\n            role: 'menu',\n            ariaLabel: accessibleLabel\n        });\n        // -- Width ---------------------------------------------------\n        const borderWidthInput = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.LabeledFieldView(locale, ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.createLabeledInputText);\n        borderWidthInput.set({\n            label: t('Width'),\n            class: 'ck-table-form__border-width'\n        });\n        borderWidthInput.fieldView.bind('value').to(this, 'borderWidth');\n        borderWidthInput.bind('isEnabled').to(this, 'borderStyle', isBorderStyleSet);\n        borderWidthInput.fieldView.on('input', () => {\n            this.borderWidth = borderWidthInput.fieldView.element.value;\n        });\n        // -- Color ---------------------------------------------------\n        const borderColorInput = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.LabeledFieldView(locale, colorInputCreator);\n        borderColorInput.set({\n            label: t('Color'),\n            class: 'ck-table-form__border-color'\n        });\n        borderColorInput.fieldView.bind('value').to(this, 'borderColor');\n        borderColorInput.bind('isEnabled').to(this, 'borderStyle', isBorderStyleSet);\n        borderColorInput.fieldView.on('input', () => {\n            this.borderColor = borderColorInput.fieldView.value;\n        });\n        // Reset the border color and width fields depending on the `border-style` value.\n        this.on('change:borderStyle', (evt, name, newValue, oldValue) => {\n            // When removing the border (`border-style:none`), clear the remaining `border-*` properties.\n            // See: https://github.com/ckeditor/ckeditor5/issues/6227.\n            if (!isBorderStyleSet(newValue)) {\n                this.borderColor = '';\n                this.borderWidth = '';\n            }\n            // When setting the `border-style` from `none`, set the default `border-color` and `border-width` properties.\n            if (!isBorderStyleSet(oldValue)) {\n                this.borderColor = defaultBorder.color;\n                this.borderWidth = defaultBorder.width;\n            }\n        });\n        return {\n            borderRowLabel,\n            borderStyleDropdown,\n            borderColorInput,\n            borderWidthInput\n        };\n    }\n    /**\n     * Creates the following form fields:\n     *\n     * * {@link #backgroundInput}.\n     */\n    _createBackgroundFields() {\n        const locale = this.locale;\n        const t = this.t;\n        // -- Group label ---------------------------------------------\n        const backgroundRowLabel = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.LabelView(locale);\n        backgroundRowLabel.text = t('Background');\n        // -- Background color input -----------------------------------\n        const backgroundInputCreator = (0,_utils_ui_table_properties__WEBPACK_IMPORTED_MODULE_3__.getLabeledColorInputCreator)({\n            colorConfig: this.options.backgroundColors,\n            columns: 5,\n            defaultColorValue: this.options.defaultTableProperties.backgroundColor,\n            colorPickerConfig: this.options.colorPickerConfig\n        });\n        const backgroundInput = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.LabeledFieldView(locale, backgroundInputCreator);\n        backgroundInput.set({\n            label: t('Color'),\n            class: 'ck-table-properties-form__background'\n        });\n        backgroundInput.fieldView.bind('value').to(this, 'backgroundColor');\n        backgroundInput.fieldView.on('input', () => {\n            this.backgroundColor = backgroundInput.fieldView.value;\n        });\n        return {\n            backgroundRowLabel,\n            backgroundInput\n        };\n    }\n    /**\n     * Creates the following form fields:\n     *\n     * * {@link #widthInput},\n     * * {@link #heightInput}.\n     */\n    _createDimensionFields() {\n        const locale = this.locale;\n        const t = this.t;\n        // -- Label ---------------------------------------------------\n        const dimensionsLabel = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.LabelView(locale);\n        dimensionsLabel.text = t('Dimensions');\n        // -- Width ---------------------------------------------------\n        const widthInput = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.LabeledFieldView(locale, ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.createLabeledInputText);\n        widthInput.set({\n            label: t('Width'),\n            class: 'ck-table-form__dimensions-row__width'\n        });\n        widthInput.fieldView.bind('value').to(this, 'width');\n        widthInput.fieldView.on('input', () => {\n            this.width = widthInput.fieldView.element.value;\n        });\n        // -- Operator ---------------------------------------------------\n        const operatorLabel = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.View(locale);\n        operatorLabel.setTemplate({\n            tag: 'span',\n            attributes: {\n                class: [\n                    'ck-table-form__dimension-operator'\n                ]\n            },\n            children: [\n                { text: '×' }\n            ]\n        });\n        // -- Height ---------------------------------------------------\n        const heightInput = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.LabeledFieldView(locale, ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.createLabeledInputText);\n        heightInput.set({\n            label: t('Height'),\n            class: 'ck-table-form__dimensions-row__height'\n        });\n        heightInput.fieldView.bind('value').to(this, 'height');\n        heightInput.fieldView.on('input', () => {\n            this.height = heightInput.fieldView.element.value;\n        });\n        return {\n            dimensionsLabel,\n            widthInput,\n            operatorLabel,\n            heightInput\n        };\n    }\n    /**\n     * Creates the following form fields:\n     *\n     * * {@link #alignmentToolbar}.\n     */\n    _createAlignmentFields() {\n        const locale = this.locale;\n        const t = this.t;\n        // -- Label ---------------------------------------------------\n        const alignmentLabel = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.LabelView(locale);\n        alignmentLabel.text = t('Alignment');\n        // -- Toolbar ---------------------------------------------------\n        const alignmentToolbar = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.ToolbarView(locale);\n        alignmentToolbar.set({\n            isCompact: true,\n            ariaLabel: t('Table alignment toolbar')\n        });\n        (0,_utils_ui_table_properties__WEBPACK_IMPORTED_MODULE_3__.fillToolbar)({\n            view: this,\n            icons: ALIGNMENT_ICONS,\n            toolbar: alignmentToolbar,\n            labels: this._alignmentLabels,\n            propertyName: 'alignment',\n            defaultValue: this.options.defaultTableProperties.alignment\n        });\n        return {\n            alignmentLabel,\n            alignmentToolbar\n        };\n    }\n    /**\n     * Creates the following form controls:\n     *\n     * * {@link #saveButtonView},\n     * * {@link #cancelButtonView}.\n     */\n    _createActionButtons() {\n        const locale = this.locale;\n        const t = this.t;\n        const saveButtonView = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.ButtonView(locale);\n        const cancelButtonView = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.ButtonView(locale);\n        const fieldsThatShouldValidateToSave = [\n            this.borderWidthInput,\n            this.borderColorInput,\n            this.backgroundInput,\n            this.widthInput,\n            this.heightInput\n        ];\n        saveButtonView.set({\n            label: t('Save'),\n            icon: ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__.icons.check,\n            class: 'ck-button-save',\n            type: 'submit',\n            withText: true\n        });\n        saveButtonView.bind('isEnabled').toMany(fieldsThatShouldValidateToSave, 'errorText', (...errorTexts) => {\n            return errorTexts.every(errorText => !errorText);\n        });\n        cancelButtonView.set({\n            label: t('Cancel'),\n            icon: ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__.icons.cancel,\n            class: 'ck-button-cancel',\n            withText: true\n        });\n        cancelButtonView.delegate('execute').to(this, 'cancel');\n        return {\n            saveButtonView, cancelButtonView\n        };\n    }\n    /**\n     * Provides localized labels for {@link #alignmentToolbar} buttons.\n     */\n    get _alignmentLabels() {\n        const locale = this.locale;\n        const t = this.t;\n        const left = t('Align table to the left');\n        const center = t('Center table');\n        const right = t('Align table to the right');\n        // Returns object with a proper order of labels.\n        if (locale.uiLanguageDirection === 'rtl') {\n            return { right, center, left };\n        }\n        else {\n            return { left, center, right };\n        }\n    }\n}\nfunction isBorderStyleSet(value) {\n    return value !== 'none';\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/tableproperties/ui/tablepropertiesview.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/tableselection.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TableSelection)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/utils */ \"ckeditor5/src/utils.js\");\n/* harmony import */ var _tablewalker__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tablewalker */ \"./node_modules/@ckeditor/ckeditor5-table/src/tablewalker.js\");\n/* harmony import */ var _tableutils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tableutils */ \"./node_modules/@ckeditor/ckeditor5-table/src/tableutils.js\");\n/* harmony import */ var _utils_structure__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/structure */ \"./node_modules/@ckeditor/ckeditor5-table/src/utils/structure.js\");\n/* harmony import */ var _theme_tableselection_css__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../theme/tableselection.css */ \"./node_modules/@ckeditor/ckeditor5-table/theme/tableselection.css\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tableselection\n */\n\n\n\n\n\n\n/**\n * This plugin enables the advanced table cells, rows and columns selection.\n * It is loaded automatically by the {@link module:table/table~Table} plugin.\n */\nclass TableSelection extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'TableSelection';\n    }\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [_tableutils__WEBPACK_IMPORTED_MODULE_3__[\"default\"], _tableutils__WEBPACK_IMPORTED_MODULE_3__[\"default\"]];\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const model = editor.model;\n        const view = editor.editing.view;\n        this.listenTo(model, 'deleteContent', (evt, args) => this._handleDeleteContent(evt, args), { priority: 'high' });\n        this.listenTo(view.document, 'insertText', (evt, data) => this._handleInsertTextEvent(evt, data), { priority: 'high' });\n        this._defineSelectionConverter();\n        this._enablePluginDisabling(); // sic!\n    }\n    /**\n     * Returns the currently selected table cells or `null` if it is not a table cells selection.\n     */\n    getSelectedTableCells() {\n        const tableUtils = this.editor.plugins.get(_tableutils__WEBPACK_IMPORTED_MODULE_3__[\"default\"]);\n        const selection = this.editor.model.document.selection;\n        const selectedCells = tableUtils.getSelectedTableCells(selection);\n        if (selectedCells.length == 0) {\n            return null;\n        }\n        // This should never happen, but let's know if it ever happens.\n        // @if CK_DEBUG //\tif ( selectedCells.length != selection.rangeCount ) {\n        // @if CK_DEBUG //\t\tconsole.warn( 'Mixed selection warning. The selection contains table cells and some other ranges.' );\n        // @if CK_DEBUG //\t}\n        return selectedCells;\n    }\n    /**\n     * Returns the selected table fragment as a document fragment.\n     */\n    getSelectionAsFragment() {\n        const tableUtils = this.editor.plugins.get(_tableutils__WEBPACK_IMPORTED_MODULE_3__[\"default\"]);\n        const selectedCells = this.getSelectedTableCells();\n        if (!selectedCells) {\n            return null;\n        }\n        return this.editor.model.change(writer => {\n            const documentFragment = writer.createDocumentFragment();\n            const { first: firstColumn, last: lastColumn } = tableUtils.getColumnIndexes(selectedCells);\n            const { first: firstRow, last: lastRow } = tableUtils.getRowIndexes(selectedCells);\n            const sourceTable = selectedCells[0].findAncestor('table');\n            let adjustedLastRow = lastRow;\n            let adjustedLastColumn = lastColumn;\n            // If the selection is rectangular there could be a case of all cells in the last row/column spanned over\n            // next row/column so the real lastRow/lastColumn should be updated.\n            if (tableUtils.isSelectionRectangular(selectedCells)) {\n                const dimensions = {\n                    firstColumn,\n                    lastColumn,\n                    firstRow,\n                    lastRow\n                };\n                adjustedLastRow = (0,_utils_structure__WEBPACK_IMPORTED_MODULE_4__.adjustLastRowIndex)(sourceTable, dimensions);\n                adjustedLastColumn = (0,_utils_structure__WEBPACK_IMPORTED_MODULE_4__.adjustLastColumnIndex)(sourceTable, dimensions);\n            }\n            const cropDimensions = {\n                startRow: firstRow,\n                startColumn: firstColumn,\n                endRow: adjustedLastRow,\n                endColumn: adjustedLastColumn\n            };\n            const table = (0,_utils_structure__WEBPACK_IMPORTED_MODULE_4__.cropTableToDimensions)(sourceTable, cropDimensions, writer);\n            writer.insert(table, documentFragment, 0);\n            return documentFragment;\n        });\n    }\n    /**\n     * Sets the model selection based on given anchor and target cells (can be the same cell).\n     * Takes care of setting the backward flag.\n     *\n     * ```ts\n     * const modelRoot = editor.model.document.getRoot();\n     * const firstCell = modelRoot.getNodeByPath( [ 0, 0, 0 ] );\n     * const lastCell = modelRoot.getNodeByPath( [ 0, 0, 1 ] );\n     *\n     * const tableSelection = editor.plugins.get( 'TableSelection' );\n     * tableSelection.setCellSelection( firstCell, lastCell );\n     * ```\n     */\n    setCellSelection(anchorCell, targetCell) {\n        const cellsToSelect = this._getCellsToSelect(anchorCell, targetCell);\n        this.editor.model.change(writer => {\n            writer.setSelection(cellsToSelect.cells.map(cell => writer.createRangeOn(cell)), { backward: cellsToSelect.backward });\n        });\n    }\n    /**\n     * Returns the focus cell from the current selection.\n     */\n    getFocusCell() {\n        const selection = this.editor.model.document.selection;\n        const focusCellRange = [...selection.getRanges()].pop();\n        const element = focusCellRange.getContainedElement();\n        if (element && element.is('element', 'tableCell')) {\n            return element;\n        }\n        return null;\n    }\n    /**\n     * Returns the anchor cell from the current selection.\n     */\n    getAnchorCell() {\n        const selection = this.editor.model.document.selection;\n        const anchorCellRange = (0,ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_1__.first)(selection.getRanges());\n        const element = anchorCellRange.getContainedElement();\n        if (element && element.is('element', 'tableCell')) {\n            return element;\n        }\n        return null;\n    }\n    /**\n     * Defines a selection converter which marks the selected cells with a specific class.\n     *\n     * The real DOM selection is put in the last cell. Since the order of ranges is dependent on whether the\n     * selection is backward or not, the last cell will usually be close to the \"focus\" end of the selection\n     * (a selection has anchor and focus).\n     *\n     * The real DOM selection is then hidden with CSS.\n     */\n    _defineSelectionConverter() {\n        const editor = this.editor;\n        const highlighted = new Set();\n        editor.conversion.for('editingDowncast').add(dispatcher => dispatcher.on('selection', (evt, data, conversionApi) => {\n            const viewWriter = conversionApi.writer;\n            clearHighlightedTableCells(viewWriter);\n            const selectedCells = this.getSelectedTableCells();\n            if (!selectedCells) {\n                return;\n            }\n            for (const tableCell of selectedCells) {\n                const viewElement = conversionApi.mapper.toViewElement(tableCell);\n                viewWriter.addClass('ck-editor__editable_selected', viewElement);\n                highlighted.add(viewElement);\n            }\n            const lastViewCell = conversionApi.mapper.toViewElement(selectedCells[selectedCells.length - 1]);\n            viewWriter.setSelection(lastViewCell, 0);\n        }, { priority: 'lowest' }));\n        function clearHighlightedTableCells(viewWriter) {\n            for (const previouslyHighlighted of highlighted) {\n                viewWriter.removeClass('ck-editor__editable_selected', previouslyHighlighted);\n            }\n            highlighted.clear();\n        }\n    }\n    /**\n     * Creates a listener that reacts to changes in {@link #isEnabled} and, if the plugin was disabled,\n     * it collapses the multi-cell selection to a regular selection placed inside a table cell.\n     *\n     * This listener helps features that disable the table selection plugin bring the selection\n     * to a clear state they can work with (for instance, because they don't support multiple cell selection).\n     */\n    _enablePluginDisabling() {\n        const editor = this.editor;\n        this.on('change:isEnabled', () => {\n            if (!this.isEnabled) {\n                const selectedCells = this.getSelectedTableCells();\n                if (!selectedCells) {\n                    return;\n                }\n                editor.model.change(writer => {\n                    const position = writer.createPositionAt(selectedCells[0], 0);\n                    const range = editor.model.schema.getNearestSelectionRange(position);\n                    writer.setSelection(range);\n                });\n            }\n        });\n    }\n    /**\n     * Overrides the default `model.deleteContent()` behavior over a selected table fragment.\n     *\n     * @param args Delete content method arguments.\n     */\n    _handleDeleteContent(event, args) {\n        const tableUtils = this.editor.plugins.get(_tableutils__WEBPACK_IMPORTED_MODULE_3__[\"default\"]);\n        const selection = args[0];\n        const options = args[1];\n        const model = this.editor.model;\n        const isBackward = !options || options.direction == 'backward';\n        const selectedTableCells = tableUtils.getSelectedTableCells(selection);\n        if (!selectedTableCells.length) {\n            return;\n        }\n        event.stop();\n        model.change(writer => {\n            const tableCellToSelect = selectedTableCells[isBackward ? selectedTableCells.length - 1 : 0];\n            model.change(writer => {\n                for (const tableCell of selectedTableCells) {\n                    model.deleteContent(writer.createSelection(tableCell, 'in'));\n                }\n            });\n            const rangeToSelect = model.schema.getNearestSelectionRange(writer.createPositionAt(tableCellToSelect, 0));\n            // Note: we ignore the case where rangeToSelect may be null because deleteContent() will always (unless someone broke it)\n            // create an empty paragraph to accommodate the selection.\n            if (selection.is('documentSelection')) {\n                writer.setSelection(rangeToSelect);\n            }\n            else {\n                selection.setTo(rangeToSelect);\n            }\n        });\n    }\n    /**\n     * This handler makes it possible to remove the content of all selected cells by starting to type.\n     * If you take a look at {@link #_defineSelectionConverter} you will find out that despite the multi-cell selection being set\n     * in the model, the view selection is collapsed in the last cell (because most browsers are unable to render multi-cell selections;\n     * yes, it's a hack).\n     *\n     * When multiple cells are selected in the model and the user starts to type, the\n     * {@link module:engine/view/document~Document#event:insertText} event carries information provided by the\n     * beforeinput DOM  event, that in turn only knows about this collapsed DOM selection in the last cell.\n     *\n     * As a result, the selected cells have no chance to be cleaned up. To fix this, this listener intercepts\n     * the event and injects the custom view selection in the data that translates correctly to the actual state\n     * of the multi-cell selection in the model.\n     *\n     * @param data Insert text event data.\n     */\n    _handleInsertTextEvent(evt, data) {\n        const editor = this.editor;\n        const selectedCells = this.getSelectedTableCells();\n        if (!selectedCells) {\n            return;\n        }\n        const view = editor.editing.view;\n        const mapper = editor.editing.mapper;\n        const viewRanges = selectedCells.map(tableCell => view.createRangeOn(mapper.toViewElement(tableCell)));\n        data.selection = view.createSelection(viewRanges);\n    }\n    /**\n     * Returns an array of table cells that should be selected based on the\n     * given anchor cell and target (focus) cell.\n     *\n     * The cells are returned in a reverse direction if the selection is backward.\n     */\n    _getCellsToSelect(anchorCell, targetCell) {\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const startLocation = tableUtils.getCellLocation(anchorCell);\n        const endLocation = tableUtils.getCellLocation(targetCell);\n        const startRow = Math.min(startLocation.row, endLocation.row);\n        const endRow = Math.max(startLocation.row, endLocation.row);\n        const startColumn = Math.min(startLocation.column, endLocation.column);\n        const endColumn = Math.max(startLocation.column, endLocation.column);\n        // 2-dimensional array of the selected cells to ease flipping the order of cells for backward selections.\n        const selectionMap = new Array(endRow - startRow + 1).fill(null).map(() => []);\n        const walkerOptions = {\n            startRow,\n            endRow,\n            startColumn,\n            endColumn\n        };\n        for (const { row, cell } of new _tablewalker__WEBPACK_IMPORTED_MODULE_2__[\"default\"](anchorCell.findAncestor('table'), walkerOptions)) {\n            selectionMap[row - startRow].push(cell);\n        }\n        const flipVertically = endLocation.row < startLocation.row;\n        const flipHorizontally = endLocation.column < startLocation.column;\n        if (flipVertically) {\n            selectionMap.reverse();\n        }\n        if (flipHorizontally) {\n            selectionMap.forEach(row => row.reverse());\n        }\n        return {\n            cells: selectionMap.flat(),\n            backward: flipVertically || flipHorizontally\n        };\n    }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/tableselection.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/tabletoolbar.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TableToolbar)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/widget */ \"ckeditor5/src/widget.js\");\n/* harmony import */ var _utils_ui_widget__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/ui/widget */ \"./node_modules/@ckeditor/ckeditor5-table/src/utils/ui/widget.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tabletoolbar\n */\n\n\n\n/**\n * The table toolbar class. It creates toolbars for the table feature and its content (for now only for the table cell content).\n *\n * The table toolbar shows up when a table widget is selected. Its components (e.g. buttons) are created based on the\n * {@link module:table/tableconfig~TableConfig#tableToolbar `table.tableToolbar` configuration option}.\n *\n * Table content toolbar shows up when the selection is inside the content of a table. It creates its component based on the\n * {@link module:table/tableconfig~TableConfig#contentToolbar `table.contentToolbar` configuration option}.\n */\nclass TableToolbar extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.WidgetToolbarRepository];\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'TableToolbar';\n    }\n    /**\n     * @inheritDoc\n     */\n    afterInit() {\n        const editor = this.editor;\n        const t = editor.t;\n        const widgetToolbarRepository = editor.plugins.get(ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.WidgetToolbarRepository);\n        const tableContentToolbarItems = editor.config.get('table.contentToolbar');\n        const tableToolbarItems = editor.config.get('table.tableToolbar');\n        if (tableContentToolbarItems) {\n            widgetToolbarRepository.register('tableContent', {\n                ariaLabel: t('Table toolbar'),\n                items: tableContentToolbarItems,\n                getRelatedElement: _utils_ui_widget__WEBPACK_IMPORTED_MODULE_2__.getTableWidgetAncestor\n            });\n        }\n        if (tableToolbarItems) {\n            widgetToolbarRepository.register('table', {\n                ariaLabel: t('Table toolbar'),\n                items: tableToolbarItems,\n                getRelatedElement: _utils_ui_widget__WEBPACK_IMPORTED_MODULE_2__.getSelectedTableWidget\n            });\n        }\n    }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/tabletoolbar.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/tableui.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TableUI)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/ui */ \"ckeditor5/src/ui.js\");\n/* harmony import */ var ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ckeditor5/src/utils */ \"ckeditor5/src/utils.js\");\n/* harmony import */ var _ui_inserttableview__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ui/inserttableview */ \"./node_modules/@ckeditor/ckeditor5-table/src/ui/inserttableview.js\");\n/* harmony import */ var _theme_icons_table_svg__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./../theme/icons/table.svg */ \"./node_modules/@ckeditor/ckeditor5-table/theme/icons/table.svg\");\n/* harmony import */ var _theme_icons_table_column_svg__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./../theme/icons/table-column.svg */ \"./node_modules/@ckeditor/ckeditor5-table/theme/icons/table-column.svg\");\n/* harmony import */ var _theme_icons_table_row_svg__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./../theme/icons/table-row.svg */ \"./node_modules/@ckeditor/ckeditor5-table/theme/icons/table-row.svg\");\n/* harmony import */ var _theme_icons_table_merge_cell_svg__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./../theme/icons/table-merge-cell.svg */ \"./node_modules/@ckeditor/ckeditor5-table/theme/icons/table-merge-cell.svg\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tableui\n */\n\n\n\n\n\n\n\n\n/**\n * The table UI plugin. It introduces:\n *\n * * The `'insertTable'` dropdown,\n * * The `'tableColumn'` dropdown,\n * * The `'tableRow'` dropdown,\n * * The `'mergeTableCells'` split button.\n *\n * The `'tableColumn'`, `'tableRow'` and `'mergeTableCells'` dropdowns work best with {@link module:table/tabletoolbar~TableToolbar}.\n */\nclass TableUI extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'TableUI';\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const t = this.editor.t;\n        const contentLanguageDirection = editor.locale.contentLanguageDirection;\n        const isContentLtr = contentLanguageDirection === 'ltr';\n        editor.ui.componentFactory.add('insertTable', locale => {\n            const command = editor.commands.get('insertTable');\n            const dropdownView = (0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.createDropdown)(locale);\n            dropdownView.bind('isEnabled').to(command);\n            // Decorate dropdown's button.\n            dropdownView.buttonView.set({\n                icon: _theme_icons_table_svg__WEBPACK_IMPORTED_MODULE_4__[\"default\"],\n                label: t('Insert table'),\n                tooltip: true\n            });\n            let insertTableView;\n            dropdownView.on('change:isOpen', () => {\n                if (insertTableView) {\n                    return;\n                }\n                // Prepare custom view for dropdown's panel.\n                insertTableView = new _ui_inserttableview__WEBPACK_IMPORTED_MODULE_3__[\"default\"](locale);\n                dropdownView.panelView.children.add(insertTableView);\n                insertTableView.delegate('execute').to(dropdownView);\n                dropdownView.on('execute', () => {\n                    editor.execute('insertTable', { rows: insertTableView.rows, columns: insertTableView.columns });\n                    editor.editing.view.focus();\n                });\n            });\n            return dropdownView;\n        });\n        editor.ui.componentFactory.add('tableColumn', locale => {\n            const options = [\n                {\n                    type: 'switchbutton',\n                    model: {\n                        commandName: 'setTableColumnHeader',\n                        label: t('Header column'),\n                        bindIsOn: true\n                    }\n                },\n                { type: 'separator' },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: isContentLtr ? 'insertTableColumnLeft' : 'insertTableColumnRight',\n                        label: t('Insert column left')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: isContentLtr ? 'insertTableColumnRight' : 'insertTableColumnLeft',\n                        label: t('Insert column right')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'removeTableColumn',\n                        label: t('Delete column')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'selectTableColumn',\n                        label: t('Select column')\n                    }\n                }\n            ];\n            return this._prepareDropdown(t('Column'), _theme_icons_table_column_svg__WEBPACK_IMPORTED_MODULE_5__[\"default\"], options, locale);\n        });\n        editor.ui.componentFactory.add('tableRow', locale => {\n            const options = [\n                {\n                    type: 'switchbutton',\n                    model: {\n                        commandName: 'setTableRowHeader',\n                        label: t('Header row'),\n                        bindIsOn: true\n                    }\n                },\n                { type: 'separator' },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'insertTableRowAbove',\n                        label: t('Insert row above')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'insertTableRowBelow',\n                        label: t('Insert row below')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'removeTableRow',\n                        label: t('Delete row')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'selectTableRow',\n                        label: t('Select row')\n                    }\n                }\n            ];\n            return this._prepareDropdown(t('Row'), _theme_icons_table_row_svg__WEBPACK_IMPORTED_MODULE_6__[\"default\"], options, locale);\n        });\n        editor.ui.componentFactory.add('mergeTableCells', locale => {\n            const options = [\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'mergeTableCellUp',\n                        label: t('Merge cell up')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: isContentLtr ? 'mergeTableCellRight' : 'mergeTableCellLeft',\n                        label: t('Merge cell right')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'mergeTableCellDown',\n                        label: t('Merge cell down')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: isContentLtr ? 'mergeTableCellLeft' : 'mergeTableCellRight',\n                        label: t('Merge cell left')\n                    }\n                },\n                { type: 'separator' },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'splitTableCellVertically',\n                        label: t('Split cell vertically')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'splitTableCellHorizontally',\n                        label: t('Split cell horizontally')\n                    }\n                }\n            ];\n            return this._prepareMergeSplitButtonDropdown(t('Merge cells'), _theme_icons_table_merge_cell_svg__WEBPACK_IMPORTED_MODULE_7__[\"default\"], options, locale);\n        });\n    }\n    /**\n     * Creates a dropdown view from a set of options.\n     *\n     * @param label The dropdown button label.\n     * @param icon An icon for the dropdown button.\n     * @param options The list of options for the dropdown.\n     */\n    _prepareDropdown(label, icon, options, locale) {\n        const editor = this.editor;\n        const dropdownView = (0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.createDropdown)(locale);\n        const commands = this._fillDropdownWithListOptions(dropdownView, options);\n        // Decorate dropdown's button.\n        dropdownView.buttonView.set({\n            label,\n            icon,\n            tooltip: true\n        });\n        // Make dropdown button disabled when all options are disabled.\n        dropdownView.bind('isEnabled').toMany(commands, 'isEnabled', (...areEnabled) => {\n            return areEnabled.some(isEnabled => isEnabled);\n        });\n        this.listenTo(dropdownView, 'execute', evt => {\n            editor.execute(evt.source.commandName);\n            // Toggling a switch button view should not move the focus to the editable.\n            if (!(evt.source instanceof ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.SwitchButtonView)) {\n                editor.editing.view.focus();\n            }\n        });\n        return dropdownView;\n    }\n    /**\n     * Creates a dropdown view with a {@link module:ui/dropdown/button/splitbuttonview~SplitButtonView} for\n     * merge (and split)–related commands.\n     *\n     * @param label The dropdown button label.\n     * @param icon An icon for the dropdown button.\n     * @param options The list of options for the dropdown.\n     */\n    _prepareMergeSplitButtonDropdown(label, icon, options, locale) {\n        const editor = this.editor;\n        const dropdownView = (0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.createDropdown)(locale, ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.SplitButtonView);\n        const mergeCommandName = 'mergeTableCells';\n        // Main command.\n        const mergeCommand = editor.commands.get(mergeCommandName);\n        // Subcommands in the dropdown.\n        const commands = this._fillDropdownWithListOptions(dropdownView, options);\n        dropdownView.buttonView.set({\n            label,\n            icon,\n            tooltip: true,\n            isEnabled: true\n        });\n        // Make dropdown button disabled when all options are disabled together with the main command.\n        dropdownView.bind('isEnabled').toMany([mergeCommand, ...commands], 'isEnabled', (...areEnabled) => {\n            return areEnabled.some(isEnabled => isEnabled);\n        });\n        // Merge selected table cells when the main part of the split button is clicked.\n        this.listenTo(dropdownView.buttonView, 'execute', () => {\n            editor.execute(mergeCommandName);\n            editor.editing.view.focus();\n        });\n        // Execute commands for events coming from the list in the dropdown panel.\n        this.listenTo(dropdownView, 'execute', evt => {\n            editor.execute(evt.source.commandName);\n            editor.editing.view.focus();\n        });\n        return dropdownView;\n    }\n    /**\n     * Injects a {@link module:ui/list/listview~ListView} into the passed dropdown with buttons\n     * which execute editor commands as configured in passed options.\n     *\n     * @param options The list of options for the dropdown.\n     * @returns Commands the list options are interacting with.\n     */\n    _fillDropdownWithListOptions(dropdownView, options) {\n        const editor = this.editor;\n        const commands = [];\n        const itemDefinitions = new ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_2__.Collection();\n        for (const option of options) {\n            addListOption(option, editor, commands, itemDefinitions);\n        }\n        (0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.addListToDropdown)(dropdownView, itemDefinitions);\n        return commands;\n    }\n}\n/**\n * Adds an option to a list view.\n *\n * @param option A configuration option.\n * @param commands The list of commands to update.\n * @param itemDefinitions A collection of dropdown items to update with the given option.\n */\nfunction addListOption(option, editor, commands, itemDefinitions) {\n    if (option.type === 'button' || option.type === 'switchbutton') {\n        const model = option.model = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.Model(option.model);\n        const { commandName, bindIsOn } = option.model;\n        const command = editor.commands.get(commandName);\n        commands.push(command);\n        model.set({ commandName });\n        model.bind('isEnabled').to(command);\n        if (bindIsOn) {\n            model.bind('isOn').to(command, 'value');\n        }\n        model.set({\n            withText: true\n        });\n    }\n    itemDefinitions.add(option);\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/tableui.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/tableutils.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TableUtils)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/utils */ \"ckeditor5/src/utils.js\");\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var _tablewalker__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tablewalker */ \"./node_modules/@ckeditor/ckeditor5-table/src/tablewalker.js\");\n/* harmony import */ var _utils_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/common */ \"./node_modules/@ckeditor/ckeditor5-table/src/utils/common.js\");\n/* harmony import */ var _utils_structure__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/structure */ \"./node_modules/@ckeditor/ckeditor5-table/src/utils/structure.js\");\n/* harmony import */ var _tablecolumnresize_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./tablecolumnresize/utils */ \"./node_modules/@ckeditor/ckeditor5-table/src/tablecolumnresize/utils.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tableutils\n */\n\n\n\n\n\n\n/**\n * The table utilities plugin.\n */\nclass TableUtils extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_1__.Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'TableUtils';\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        this.decorate('insertColumns');\n        this.decorate('insertRows');\n    }\n    /**\n     * Returns the table cell location as an object with table row and table column indexes.\n     *\n     * For instance, in the table below:\n     *\n     *      0   1   2   3\n     *    +---+---+---+---+\n     *  0 | a     | b | c |\n     *    +       +   +---+\n     *  1 |       |   | d |\n     *    +---+---+   +---+\n     *  2 | e     |   | f |\n     *    +---+---+---+---+\n     *\n     * the method will return:\n     *\n     * ```ts\n     * const cellA = table.getNodeByPath( [ 0, 0 ] );\n     * editor.plugins.get( 'TableUtils' ).getCellLocation( cellA );\n     * // will return { row: 0, column: 0 }\n     *\n     * const cellD = table.getNodeByPath( [ 1, 0 ] );\n     * editor.plugins.get( 'TableUtils' ).getCellLocation( cellD );\n     * // will return { row: 1, column: 3 }\n     * ```\n     *\n     * @returns Returns a `{row, column}` object.\n     */\n    getCellLocation(tableCell) {\n        const tableRow = tableCell.parent;\n        const table = tableRow.parent;\n        const rowIndex = table.getChildIndex(tableRow);\n        const tableWalker = new _tablewalker__WEBPACK_IMPORTED_MODULE_2__[\"default\"](table, { row: rowIndex });\n        for (const { cell, row, column } of tableWalker) {\n            if (cell === tableCell) {\n                return { row, column };\n            }\n        }\n        // Should be unreachable code.\n        /* istanbul ignore next -- @preserve */\n        return undefined;\n    }\n    /**\n     * Creates an empty table with a proper structure. The table needs to be inserted into the model,\n     * for example, by using the {@link module:engine/model/model~Model#insertContent} function.\n     *\n     * ```ts\n     * model.change( ( writer ) => {\n     *   // Create a table of 2 rows and 7 columns:\n     *   const table = tableUtils.createTable( writer, { rows: 2, columns: 7 } );\n     *\n     *   // Insert a table to the model at the best position taking the current selection:\n     *   model.insertContent( table );\n     * }\n     * ```\n     *\n     * @param writer The model writer.\n     * @param options.rows The number of rows to create. Default value is 2.\n     * @param options.columns The number of columns to create. Default value is 2.\n     * @param options.headingRows The number of heading rows. Default value is 0.\n     * @param options.headingColumns The number of heading columns. Default value is 0.\n     * @returns The created table element.\n     */\n    createTable(writer, options) {\n        const table = writer.createElement('table');\n        const rows = options.rows || 2;\n        const columns = options.columns || 2;\n        createEmptyRows(writer, table, 0, rows, columns);\n        if (options.headingRows) {\n            (0,_utils_common__WEBPACK_IMPORTED_MODULE_3__.updateNumericAttribute)('headingRows', Math.min(options.headingRows, rows), table, writer, 0);\n        }\n        if (options.headingColumns) {\n            (0,_utils_common__WEBPACK_IMPORTED_MODULE_3__.updateNumericAttribute)('headingColumns', Math.min(options.headingColumns, columns), table, writer, 0);\n        }\n        return table;\n    }\n    /**\n     * Inserts rows into a table.\n     *\n     * ```ts\n     * editor.plugins.get( 'TableUtils' ).insertRows( table, { at: 1, rows: 2 } );\n     * ```\n     *\n     * Assuming the table on the left, the above code will transform it to the table on the right:\n     *\n     *  row index\n     *    0 +---+---+---+       `at` = 1,      +---+---+---+ 0\n     *      | a | b | c |       `rows` = 2,    | a | b | c |\n     *    1 +   +---+---+   <-- insert here    +   +---+---+ 1\n     *      |   | d | e |                      |   |   |   |\n     *    2 +   +---+---+       will give:     +   +---+---+ 2\n     *      |   | f | g |                      |   |   |   |\n     *    3 +---+---+---+                      +   +---+---+ 3\n     *                                         |   | d | e |\n     *                                         +   +---+---+ 4\n     *                                         +   + f | g |\n     *                                         +---+---+---+ 5\n     *\n     * @param table The table model element where the rows will be inserted.\n     * @param options.at The row index at which the rows will be inserted.  Default value is 0.\n     * @param options.rows The number of rows to insert.  Default value is 1.\n     * @param options.copyStructureFromAbove The flag for copying row structure. Note that\n     * the row structure will not be copied if this option is not provided.\n     */\n    insertRows(table, options = {}) {\n        const model = this.editor.model;\n        const insertAt = options.at || 0;\n        const rowsToInsert = options.rows || 1;\n        const isCopyStructure = options.copyStructureFromAbove !== undefined;\n        const copyStructureFrom = options.copyStructureFromAbove ? insertAt - 1 : insertAt;\n        const rows = this.getRows(table);\n        const columns = this.getColumns(table);\n        if (insertAt > rows) {\n            /**\n             * The `options.at` points at a row position that does not exist.\n             *\n             * @error tableutils-insertrows-insert-out-of-range\n             */\n            throw new ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_0__.CKEditorError('tableutils-insertrows-insert-out-of-range', this, { options });\n        }\n        model.change(writer => {\n            const headingRows = table.getAttribute('headingRows') || 0;\n            // Inserting rows inside heading section requires to update `headingRows` attribute as the heading section will grow.\n            if (headingRows > insertAt) {\n                (0,_utils_common__WEBPACK_IMPORTED_MODULE_3__.updateNumericAttribute)('headingRows', headingRows + rowsToInsert, table, writer, 0);\n            }\n            // Inserting at the end or at the beginning of a table doesn't require to calculate anything special.\n            if (!isCopyStructure && (insertAt === 0 || insertAt === rows)) {\n                createEmptyRows(writer, table, insertAt, rowsToInsert, columns);\n                return;\n            }\n            // Iterate over all the rows above the inserted rows in order to check for the row-spanned cells.\n            const walkerEndRow = isCopyStructure ? Math.max(insertAt, copyStructureFrom) : insertAt;\n            const tableIterator = new _tablewalker__WEBPACK_IMPORTED_MODULE_2__[\"default\"](table, { endRow: walkerEndRow });\n            // Store spans of the reference row to reproduce it's structure. This array is column number indexed.\n            const rowColSpansMap = new Array(columns).fill(1);\n            for (const { row, column, cellHeight, cellWidth, cell } of tableIterator) {\n                const lastCellRow = row + cellHeight - 1;\n                const isOverlappingInsertedRow = row < insertAt && insertAt <= lastCellRow;\n                const isReferenceRow = row <= copyStructureFrom && copyStructureFrom <= lastCellRow;\n                // If the cell is row-spanned and overlaps the inserted row, then reserve space for it in the row map.\n                if (isOverlappingInsertedRow) {\n                    // This cell overlaps the inserted rows so we need to expand it further.\n                    writer.setAttribute('rowspan', cellHeight + rowsToInsert, cell);\n                    // Mark this cell with negative number to indicate how many cells should be skipped when adding the new cells.\n                    rowColSpansMap[column] = -cellWidth;\n                }\n                // Store the colspan from reference row.\n                else if (isCopyStructure && isReferenceRow) {\n                    rowColSpansMap[column] = cellWidth;\n                }\n            }\n            for (let rowIndex = 0; rowIndex < rowsToInsert; rowIndex++) {\n                const tableRow = writer.createElement('tableRow');\n                writer.insert(tableRow, table, insertAt);\n                for (let cellIndex = 0; cellIndex < rowColSpansMap.length; cellIndex++) {\n                    const colspan = rowColSpansMap[cellIndex];\n                    const insertPosition = writer.createPositionAt(tableRow, 'end');\n                    // Insert the empty cell only if this slot is not row-spanned from any other cell.\n                    if (colspan > 0) {\n                        (0,_utils_common__WEBPACK_IMPORTED_MODULE_3__.createEmptyTableCell)(writer, insertPosition, colspan > 1 ? { colspan } : undefined);\n                    }\n                    // Skip the col-spanned slots, there won't be any cells.\n                    cellIndex += Math.abs(colspan) - 1;\n                }\n            }\n        });\n    }\n    /**\n     * Inserts columns into a table.\n     *\n     * ```ts\n     * editor.plugins.get( 'TableUtils' ).insertColumns( table, { at: 1, columns: 2 } );\n     * ```\n     *\n     * Assuming the table on the left, the above code will transform it to the table on the right:\n     *\n     *  0   1   2   3                   0   1   2   3   4   5\n     *  +---+---+---+                   +---+---+---+---+---+\n     *  | a     | b |                   | a             | b |\n     *  +       +---+                   +               +---+\n     *  |       | c |                   |               | c |\n     *  +---+---+---+     will give:    +---+---+---+---+---+\n     *  | d | e | f |                   | d |   |   | e | f |\n     *  +---+   +---+                   +---+---+---+   +---+\n     *  | g |   | h |                   | g |   |   |   | h |\n     *  +---+---+---+                   +---+---+---+---+---+\n     *  | i         |                   | i                 |\n     *  +---+---+---+                   +---+---+---+---+---+\n     *      ^---- insert here, `at` = 1, `columns` = 2\n     *\n     * @param table The table model element where the columns will be inserted.\n     * @param options.at The column index at which the columns will be inserted. Default value is 0.\n     * @param options.columns The number of columns to insert. Default value is 1.\n     */\n    insertColumns(table, options = {}) {\n        const model = this.editor.model;\n        const insertAt = options.at || 0;\n        const columnsToInsert = options.columns || 1;\n        model.change(writer => {\n            const headingColumns = table.getAttribute('headingColumns');\n            // Inserting columns inside heading section requires to update `headingColumns` attribute as the heading section will grow.\n            if (insertAt < headingColumns) {\n                writer.setAttribute('headingColumns', headingColumns + columnsToInsert, table);\n            }\n            const tableColumns = this.getColumns(table);\n            // Inserting at the end and at the beginning of a table doesn't require to calculate anything special.\n            if (insertAt === 0 || tableColumns === insertAt) {\n                for (const tableRow of table.getChildren()) {\n                    // Ignore non-row elements inside the table (e.g. caption).\n                    if (!tableRow.is('element', 'tableRow')) {\n                        continue;\n                    }\n                    createCells(columnsToInsert, writer, writer.createPositionAt(tableRow, insertAt ? 'end' : 0));\n                }\n                return;\n            }\n            const tableWalker = new _tablewalker__WEBPACK_IMPORTED_MODULE_2__[\"default\"](table, { column: insertAt, includeAllSlots: true });\n            for (const tableSlot of tableWalker) {\n                const { row, cell, cellAnchorColumn, cellAnchorRow, cellWidth, cellHeight } = tableSlot;\n                // When iterating over column the table walker outputs either:\n                // - cells at given column index (cell \"e\" from method docs),\n                // - spanned columns (spanned cell from row between cells \"g\" and \"h\" - spanned by \"e\", only if `includeAllSlots: true`),\n                // - or a cell from the same row which spans over this column (cell \"a\").\n                if (cellAnchorColumn < insertAt) {\n                    // If cell is anchored in previous column, it is a cell that spans over an inserted column (cell \"a\" & \"i\").\n                    // For such cells expand them by a number of columns inserted.\n                    writer.setAttribute('colspan', cellWidth + columnsToInsert, cell);\n                    // This cell will overlap cells in rows below so skip them (because of `includeAllSlots` option) - (cell \"a\")\n                    const lastCellRow = cellAnchorRow + cellHeight - 1;\n                    for (let i = row; i <= lastCellRow; i++) {\n                        tableWalker.skipRow(i);\n                    }\n                }\n                else {\n                    // It's either cell at this column index or spanned cell by a row-spanned cell from row above.\n                    // In table above it's cell \"e\" and a spanned position from row below (empty cell between cells \"g\" and \"h\")\n                    createCells(columnsToInsert, writer, tableSlot.getPositionBefore());\n                }\n            }\n        });\n    }\n    /**\n     * Removes rows from the given `table`.\n     *\n     * This method re-calculates the table geometry including `rowspan` attribute of table cells overlapping removed rows\n     * and table headings values.\n     *\n     * ```ts\n     * editor.plugins.get( 'TableUtils' ).removeRows( table, { at: 1, rows: 2 } );\n     * ```\n     *\n     * Executing the above code in the context of the table on the left will transform its structure as presented on the right:\n     *\n     *  row index\n     *      ┌───┬───┬───┐        `at` = 1        ┌───┬───┬───┐\n     *    0 │ a │ b │ c │        `rows` = 2      │ a │ b │ c │ 0\n     *      │   ├───┼───┤                        │   ├───┼───┤\n     *    1 │   │ d │ e │  <-- remove from here  │   │ d │ g │ 1\n     *      │   │   ├───┤        will give:      ├───┼───┼───┤\n     *    2 │   │   │ f │                        │ h │ i │ j │ 2\n     *      │   │   ├───┤                        └───┴───┴───┘\n     *    3 │   │   │ g │\n     *      ├───┼───┼───┤\n     *    4 │ h │ i │ j │\n     *      └───┴───┴───┘\n     *\n     * @param options.at The row index at which the removing rows will start.\n     * @param options.rows The number of rows to remove. Default value is 1.\n     */\n    removeRows(table, options) {\n        const model = this.editor.model;\n        const rowsToRemove = options.rows || 1;\n        const rowCount = this.getRows(table);\n        const first = options.at;\n        const last = first + rowsToRemove - 1;\n        if (last > rowCount - 1) {\n            /**\n             * The `options.at` param must point at existing row and `options.rows` must not exceed the rows in the table.\n             *\n             * @error tableutils-removerows-row-index-out-of-range\n             */\n            throw new ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_0__.CKEditorError('tableutils-removerows-row-index-out-of-range', this, { table, options });\n        }\n        model.change(writer => {\n            const indexesObject = { first, last };\n            // Removing rows from the table require that most calculations to be done prior to changing table structure.\n            // Preparations must be done in the same enqueueChange callback to use the current table structure.\n            // 1. Preparation - get row-spanned cells that have to be modified after removing rows.\n            const { cellsToMove, cellsToTrim } = getCellsToMoveAndTrimOnRemoveRow(table, indexesObject);\n            // 2. Execution\n            // 2a. Move cells from removed rows that extends over a removed section - must be done before removing rows.\n            // This will fill any gaps in a rows below that previously were empty because of row-spanned cells.\n            if (cellsToMove.size) {\n                const rowAfterRemovedSection = last + 1;\n                moveCellsToRow(table, rowAfterRemovedSection, cellsToMove, writer);\n            }\n            // 2b. Remove all required rows.\n            for (let i = last; i >= first; i--) {\n                writer.remove(table.getChild(i));\n            }\n            // 2c. Update cells from rows above that overlap removed section. Similar to step 2 but does not involve moving cells.\n            for (const { rowspan, cell } of cellsToTrim) {\n                (0,_utils_common__WEBPACK_IMPORTED_MODULE_3__.updateNumericAttribute)('rowspan', rowspan, cell, writer);\n            }\n            // 2d. Adjust heading rows if removed rows were in a heading section.\n            updateHeadingRows(table, indexesObject, writer);\n            // 2e. Remove empty columns (without anchored cells) if there are any.\n            if (!(0,_utils_structure__WEBPACK_IMPORTED_MODULE_4__.removeEmptyColumns)(table, this)) {\n                // If there wasn't any empty columns then we still need to check if this wasn't called\n                // because of cleaning empty rows and we only removed one of them.\n                (0,_utils_structure__WEBPACK_IMPORTED_MODULE_4__.removeEmptyRows)(table, this);\n            }\n        });\n    }\n    /**\n     * Removes columns from the given `table`.\n     *\n     * This method re-calculates the table geometry including the `colspan` attribute of table cells overlapping removed columns\n     * and table headings values.\n     *\n     * ```ts\n     * editor.plugins.get( 'TableUtils' ).removeColumns( table, { at: 1, columns: 2 } );\n     * ```\n     *\n     * Executing the above code in the context of the table on the left will transform its structure as presented on the right:\n     *\n     *    0   1   2   3   4                       0   1   2\n     *  ┌───────────────┬───┐                   ┌───────┬───┐\n     *  │ a             │ b │                   │ a     │ b │\n     *  │               ├───┤                   │       ├───┤\n     *  │               │ c │                   │       │ c │\n     *  ├───┬───┬───┬───┼───┤     will give:    ├───┬───┼───┤\n     *  │ d │ e │ f │ g │ h │                   │ d │ g │ h │\n     *  ├───┼───┼───┤   ├───┤                   ├───┤   ├───┤\n     *  │ i │ j │ k │   │ l │                   │ i │   │ l │\n     *  ├───┴───┴───┴───┴───┤                   ├───┴───┴───┤\n     *  │ m                 │                   │ m         │\n     *  └───────────────────┘                   └───────────┘\n     *        ^---- remove from here, `at` = 1, `columns` = 2\n     *\n     * @param options.at The row index at which the removing columns will start.\n     * @param options.columns The number of columns to remove.\n     */\n    removeColumns(table, options) {\n        const model = this.editor.model;\n        const first = options.at;\n        const columnsToRemove = options.columns || 1;\n        const last = options.at + columnsToRemove - 1;\n        model.change(writer => {\n            adjustHeadingColumns(table, { first, last }, writer);\n            const tableColumns = (0,_tablecolumnresize_utils__WEBPACK_IMPORTED_MODULE_5__.getTableColumnElements)(table);\n            for (let removedColumnIndex = last; removedColumnIndex >= first; removedColumnIndex--) {\n                for (const { cell, column, cellWidth } of [...new _tablewalker__WEBPACK_IMPORTED_MODULE_2__[\"default\"](table)]) {\n                    // If colspaned cell overlaps removed column decrease its span.\n                    if (column <= removedColumnIndex && cellWidth > 1 && column + cellWidth > removedColumnIndex) {\n                        (0,_utils_common__WEBPACK_IMPORTED_MODULE_3__.updateNumericAttribute)('colspan', cellWidth - 1, cell, writer);\n                    }\n                    else if (column === removedColumnIndex) {\n                        // The cell in removed column has colspan of 1.\n                        writer.remove(cell);\n                    }\n                }\n                // If table has `tableColumn` elements, we need to update it manually.\n                // See https://github.com/ckeditor/ckeditor5/issues/14521#issuecomment-1662102889 for details.\n                if (tableColumns[removedColumnIndex]) {\n                    // If the removed column is the first one then we need to add its width to the next column.\n                    // Otherwise we add it to the previous column.\n                    const adjacentColumn = removedColumnIndex === 0 ? tableColumns[1] : tableColumns[removedColumnIndex - 1];\n                    const removedColumnWidth = parseFloat(tableColumns[removedColumnIndex].getAttribute('columnWidth'));\n                    const adjacentColumnWidth = parseFloat(adjacentColumn.getAttribute('columnWidth'));\n                    writer.remove(tableColumns[removedColumnIndex]);\n                    // Add the removed column width (in %) to the adjacent column.\n                    writer.setAttribute('columnWidth', removedColumnWidth + adjacentColumnWidth + '%', adjacentColumn);\n                }\n            }\n            // Remove empty rows that could appear after removing columns.\n            if (!(0,_utils_structure__WEBPACK_IMPORTED_MODULE_4__.removeEmptyRows)(table, this)) {\n                // If there wasn't any empty rows then we still need to check if this wasn't called\n                // because of cleaning empty columns and we only removed one of them.\n                (0,_utils_structure__WEBPACK_IMPORTED_MODULE_4__.removeEmptyColumns)(table, this);\n            }\n        });\n    }\n    /**\n     * Divides a table cell vertically into several ones.\n     *\n     * The cell will be visually split into more cells by updating colspans of other cells in a column\n     * and inserting cells (columns) after that cell.\n     *\n     * In the table below, if cell \"a\" is split into 3 cells:\n     *\n     *  +---+---+---+\n     *  | a | b | c |\n     *  +---+---+---+\n     *  | d | e | f |\n     *  +---+---+---+\n     *\n     * it will result in the table below:\n     *\n     *  +---+---+---+---+---+\n     *  | a |   |   | b | c |\n     *  +---+---+---+---+---+\n     *  | d         | e | f |\n     *  +---+---+---+---+---+\n     *\n     * So cell \"d\" will get its `colspan` updated to `3` and 2 cells will be added (2 columns will be created).\n     *\n     * Splitting a cell that already has a `colspan` attribute set will distribute the cell `colspan` evenly and the remainder\n     * will be left to the original cell:\n     *\n     *  +---+---+---+\n     *  | a         |\n     *  +---+---+---+\n     *  | b | c | d |\n     *  +---+---+---+\n     *\n     * Splitting cell \"a\" with `colspan=3` into 2 cells will create 1 cell with a `colspan=a` and cell \"a\" that will have `colspan=2`:\n     *\n     *  +---+---+---+\n     *  | a     |   |\n     *  +---+---+---+\n     *  | b | c | d |\n     *  +---+---+---+\n     */\n    splitCellVertically(tableCell, numberOfCells = 2) {\n        const model = this.editor.model;\n        const tableRow = tableCell.parent;\n        const table = tableRow.parent;\n        const rowspan = parseInt(tableCell.getAttribute('rowspan') || '1');\n        const colspan = parseInt(tableCell.getAttribute('colspan') || '1');\n        model.change(writer => {\n            // First check - the cell spans over multiple rows so before doing anything else just split this cell.\n            if (colspan > 1) {\n                // Get spans of new (inserted) cells and span to update of split cell.\n                const { newCellsSpan, updatedSpan } = breakSpanEvenly(colspan, numberOfCells);\n                (0,_utils_common__WEBPACK_IMPORTED_MODULE_3__.updateNumericAttribute)('colspan', updatedSpan, tableCell, writer);\n                // Each inserted cell will have the same attributes:\n                const newCellsAttributes = {};\n                // Do not store default value in the model.\n                if (newCellsSpan > 1) {\n                    newCellsAttributes.colspan = newCellsSpan;\n                }\n                // Copy rowspan of split cell.\n                if (rowspan > 1) {\n                    newCellsAttributes.rowspan = rowspan;\n                }\n                const cellsToInsert = colspan > numberOfCells ? numberOfCells - 1 : colspan - 1;\n                createCells(cellsToInsert, writer, writer.createPositionAfter(tableCell), newCellsAttributes);\n            }\n            // Second check - the cell has colspan of 1 or we need to create more cells then the currently one spans over.\n            if (colspan < numberOfCells) {\n                const cellsToInsert = numberOfCells - colspan;\n                // First step: expand cells on the same column as split cell.\n                const tableMap = [...new _tablewalker__WEBPACK_IMPORTED_MODULE_2__[\"default\"](table)];\n                // Get the column index of split cell.\n                const { column: splitCellColumn } = tableMap.find(({ cell }) => cell === tableCell);\n                // Find cells which needs to be expanded vertically - those on the same column or those that spans over split cell's column.\n                const cellsToUpdate = tableMap.filter(({ cell, cellWidth, column }) => {\n                    const isOnSameColumn = cell !== tableCell && column === splitCellColumn;\n                    const spansOverColumn = (column < splitCellColumn && column + cellWidth > splitCellColumn);\n                    return isOnSameColumn || spansOverColumn;\n                });\n                // Expand cells vertically.\n                for (const { cell, cellWidth } of cellsToUpdate) {\n                    writer.setAttribute('colspan', cellWidth + cellsToInsert, cell);\n                }\n                // Second step: create columns after split cell.\n                // Each inserted cell will have the same attributes:\n                const newCellsAttributes = {};\n                // Do not store default value in the model.\n                // Copy rowspan of split cell.\n                if (rowspan > 1) {\n                    newCellsAttributes.rowspan = rowspan;\n                }\n                createCells(cellsToInsert, writer, writer.createPositionAfter(tableCell), newCellsAttributes);\n                const headingColumns = table.getAttribute('headingColumns') || 0;\n                // Update heading section if split cell is in heading section.\n                if (headingColumns > splitCellColumn) {\n                    (0,_utils_common__WEBPACK_IMPORTED_MODULE_3__.updateNumericAttribute)('headingColumns', headingColumns + cellsToInsert, table, writer);\n                }\n            }\n        });\n    }\n    /**\n     * Divides a table cell horizontally into several ones.\n     *\n     * The cell will be visually split into more cells by updating rowspans of other cells in the row and inserting rows with a single cell\n     * below.\n     *\n     * If in the table below cell \"b\" is split into 3 cells:\n     *\n     *  +---+---+---+\n     *  | a | b | c |\n     *  +---+---+---+\n     *  | d | e | f |\n     *  +---+---+---+\n     *\n     * It will result in the table below:\n     *\n     *  +---+---+---+\n     *  | a | b | c |\n     *  +   +---+   +\n     *  |   |   |   |\n     *  +   +---+   +\n     *  |   |   |   |\n     *  +---+---+---+\n     *  | d | e | f |\n     *  +---+---+---+\n     *\n     * So cells \"a\" and \"b\" will get their `rowspan` updated to `3` and 2 rows with a single cell will be added.\n     *\n     * Splitting a cell that already has a `rowspan` attribute set will distribute the cell `rowspan` evenly and the remainder\n     * will be left to the original cell:\n     *\n     *  +---+---+---+\n     *  | a | b | c |\n     *  +   +---+---+\n     *  |   | d | e |\n     *  +   +---+---+\n     *  |   | f | g |\n     *  +   +---+---+\n     *  |   | h | i |\n     *  +---+---+---+\n     *\n     * Splitting cell \"a\" with `rowspan=4` into 3 cells will create 2 cells with a `rowspan=1` and cell \"a\" will have `rowspan=2`:\n     *\n     *  +---+---+---+\n     *  | a | b | c |\n     *  +   +---+---+\n     *  |   | d | e |\n     *  +---+---+---+\n     *  |   | f | g |\n     *  +---+---+---+\n     *  |   | h | i |\n     *  +---+---+---+\n     */\n    splitCellHorizontally(tableCell, numberOfCells = 2) {\n        const model = this.editor.model;\n        const tableRow = tableCell.parent;\n        const table = tableRow.parent;\n        const splitCellRow = table.getChildIndex(tableRow);\n        const rowspan = parseInt(tableCell.getAttribute('rowspan') || '1');\n        const colspan = parseInt(tableCell.getAttribute('colspan') || '1');\n        model.change(writer => {\n            // First check - the cell spans over multiple rows so before doing anything else just split this cell.\n            if (rowspan > 1) {\n                // Cache table map before updating table.\n                const tableMap = [...new _tablewalker__WEBPACK_IMPORTED_MODULE_2__[\"default\"](table, {\n                        startRow: splitCellRow,\n                        endRow: splitCellRow + rowspan - 1,\n                        includeAllSlots: true\n                    })];\n                // Get spans of new (inserted) cells and span to update of split cell.\n                const { newCellsSpan, updatedSpan } = breakSpanEvenly(rowspan, numberOfCells);\n                (0,_utils_common__WEBPACK_IMPORTED_MODULE_3__.updateNumericAttribute)('rowspan', updatedSpan, tableCell, writer);\n                const { column: cellColumn } = tableMap.find(({ cell }) => cell === tableCell);\n                // Each inserted cell will have the same attributes:\n                const newCellsAttributes = {};\n                // Do not store default value in the model.\n                if (newCellsSpan > 1) {\n                    newCellsAttributes.rowspan = newCellsSpan;\n                }\n                // Copy colspan of split cell.\n                if (colspan > 1) {\n                    newCellsAttributes.colspan = colspan;\n                }\n                for (const tableSlot of tableMap) {\n                    const { column, row } = tableSlot;\n                    // As both newly created cells and the split cell might have rowspan,\n                    // the insertion of new cells must go to appropriate rows:\n                    //\n                    // 1. It's a row after split cell + it's height.\n                    const isAfterSplitCell = row >= splitCellRow + updatedSpan;\n                    // 2. Is on the same column.\n                    const isOnSameColumn = column === cellColumn;\n                    // 3. And it's row index is after previous cell height.\n                    const isInEvenlySplitRow = (row + splitCellRow + updatedSpan) % newCellsSpan === 0;\n                    if (isAfterSplitCell && isOnSameColumn && isInEvenlySplitRow) {\n                        createCells(1, writer, tableSlot.getPositionBefore(), newCellsAttributes);\n                    }\n                }\n            }\n            // Second check - the cell has rowspan of 1 or we need to create more cells than the current cell spans over.\n            if (rowspan < numberOfCells) {\n                // We already split the cell in check one so here we split to the remaining number of cells only.\n                const cellsToInsert = numberOfCells - rowspan;\n                // This check is needed since we need to check if there are any cells from previous rows than spans over this cell's row.\n                const tableMap = [...new _tablewalker__WEBPACK_IMPORTED_MODULE_2__[\"default\"](table, { startRow: 0, endRow: splitCellRow })];\n                // First step: expand cells.\n                for (const { cell, cellHeight, row } of tableMap) {\n                    // Expand rowspan of cells that are either:\n                    // - on the same row as current cell,\n                    // - or are below split cell row and overlaps that row.\n                    if (cell !== tableCell && row + cellHeight > splitCellRow) {\n                        const rowspanToSet = cellHeight + cellsToInsert;\n                        writer.setAttribute('rowspan', rowspanToSet, cell);\n                    }\n                }\n                // Second step: create rows with single cell below split cell.\n                const newCellsAttributes = {};\n                // Copy colspan of split cell.\n                if (colspan > 1) {\n                    newCellsAttributes.colspan = colspan;\n                }\n                createEmptyRows(writer, table, splitCellRow + 1, cellsToInsert, 1, newCellsAttributes);\n                // Update heading section if split cell is in heading section.\n                const headingRows = table.getAttribute('headingRows') || 0;\n                if (headingRows > splitCellRow) {\n                    (0,_utils_common__WEBPACK_IMPORTED_MODULE_3__.updateNumericAttribute)('headingRows', headingRows + cellsToInsert, table, writer);\n                }\n            }\n        });\n    }\n    /**\n     * Returns the number of columns for a given table.\n     *\n     * ```ts\n     * editor.plugins.get( 'TableUtils' ).getColumns( table );\n     * ```\n     *\n     * @param table The table to analyze.\n     */\n    getColumns(table) {\n        // Analyze first row only as all the rows should have the same width.\n        // Using the first row without checking if it's a tableRow because we expect\n        // that table will have only tableRow model elements at the beginning.\n        const row = table.getChild(0);\n        return [...row.getChildren()].reduce((columns, row) => {\n            const columnWidth = parseInt(row.getAttribute('colspan') || '1');\n            return columns + columnWidth;\n        }, 0);\n    }\n    /**\n     * Returns the number of rows for a given table. Any other element present in the table model is omitted.\n     *\n     * ```ts\n     * editor.plugins.get( 'TableUtils' ).getRows( table );\n     * ```\n     *\n     * @param table The table to analyze.\n     */\n    getRows(table) {\n        // Rowspan not included due to #6427.\n        return Array.from(table.getChildren())\n            .reduce((rowCount, child) => child.is('element', 'tableRow') ? rowCount + 1 : rowCount, 0);\n    }\n    /**\n     * Creates an instance of the table walker.\n     *\n     * The table walker iterates internally by traversing the table from row index = 0 and column index = 0.\n     * It walks row by row and column by column in order to output values defined in the options.\n     * By default it will output only the locations that are occupied by a cell. To include also spanned rows and columns,\n     * pass the `includeAllSlots` option.\n     *\n     * @internal\n     * @param table A table over which the walker iterates.\n     * @param options An object with configuration.\n     */\n    createTableWalker(table, options = {}) {\n        return new _tablewalker__WEBPACK_IMPORTED_MODULE_2__[\"default\"](table, options);\n    }\n    /**\n     * Returns all model table cells that are fully selected (from the outside)\n     * within the provided model selection's ranges.\n     *\n     * To obtain the cells selected from the inside, use\n     * {@link #getTableCellsContainingSelection}.\n     */\n    getSelectedTableCells(selection) {\n        const cells = [];\n        for (const range of this.sortRanges(selection.getRanges())) {\n            const element = range.getContainedElement();\n            if (element && element.is('element', 'tableCell')) {\n                cells.push(element);\n            }\n        }\n        return cells;\n    }\n    /**\n     * Returns all model table cells that the provided model selection's ranges\n     * {@link module:engine/model/range~Range#start} inside.\n     *\n     * To obtain the cells selected from the outside, use\n     * {@link #getSelectedTableCells}.\n     */\n    getTableCellsContainingSelection(selection) {\n        const cells = [];\n        for (const range of selection.getRanges()) {\n            const cellWithSelection = range.start.findAncestor('tableCell');\n            if (cellWithSelection) {\n                cells.push(cellWithSelection);\n            }\n        }\n        return cells;\n    }\n    /**\n     * Returns all model table cells that are either completely selected\n     * by selection ranges or host selection range\n     * {@link module:engine/model/range~Range#start start positions} inside them.\n     *\n     * Combines {@link #getTableCellsContainingSelection} and\n     * {@link #getSelectedTableCells}.\n     */\n    getSelectionAffectedTableCells(selection) {\n        const selectedCells = this.getSelectedTableCells(selection);\n        if (selectedCells.length) {\n            return selectedCells;\n        }\n        return this.getTableCellsContainingSelection(selection);\n    }\n    /**\n     * Returns an object with the `first` and `last` row index contained in the given `tableCells`.\n     *\n     * ```ts\n     * const selectedTableCells = getSelectedTableCells( editor.model.document.selection );\n     *\n     * const { first, last } = getRowIndexes( selectedTableCells );\n     *\n     * console.log( `Selected rows: ${ first } to ${ last }` );\n     * ```\n     *\n     * @returns Returns an object with the `first` and `last` table row indexes.\n     */\n    getRowIndexes(tableCells) {\n        const indexes = tableCells.map(cell => cell.parent.index);\n        return this._getFirstLastIndexesObject(indexes);\n    }\n    /**\n     * Returns an object with the `first` and `last` column index contained in the given `tableCells`.\n     *\n     * ```ts\n     * const selectedTableCells = getSelectedTableCells( editor.model.document.selection );\n     *\n     * const { first, last } = getColumnIndexes( selectedTableCells );\n     *\n     * console.log( `Selected columns: ${ first } to ${ last }` );\n     * ```\n     *\n     * @returns Returns an object with the `first` and `last` table column indexes.\n     */\n    getColumnIndexes(tableCells) {\n        const table = tableCells[0].findAncestor('table');\n        const tableMap = [...new _tablewalker__WEBPACK_IMPORTED_MODULE_2__[\"default\"](table)];\n        const indexes = tableMap\n            .filter(entry => tableCells.includes(entry.cell))\n            .map(entry => entry.column);\n        return this._getFirstLastIndexesObject(indexes);\n    }\n    /**\n     * Checks if the selection contains cells that do not exceed rectangular selection.\n     *\n     * In a table below:\n     *\n     *  ┌───┬───┬───┬───┐\n     *  │ a │ b │ c │ d │\n     *  ├───┴───┼───┤   │\n     *  │ e     │ f │   │\n     *  │       ├───┼───┤\n     *  │       │ g │ h │\n     *  └───────┴───┴───┘\n     *\n     * Valid selections are these which create a solid rectangle (without gaps), such as:\n     *   - a, b (two horizontal cells)\n     *   - c, f (two vertical cells)\n     *   - a, b, e (cell \"e\" spans over four cells)\n     *   - c, d, f (cell d spans over a cell in the row below)\n     *\n     * While an invalid selection would be:\n     *   - a, c (the unselected cell \"b\" creates a gap)\n     *   - f, g, h (cell \"d\" spans over a cell from the row of \"f\" cell - thus creates a gap)\n     */\n    isSelectionRectangular(selectedTableCells) {\n        if (selectedTableCells.length < 2 || !this._areCellInTheSameTableSection(selectedTableCells)) {\n            return false;\n        }\n        // A valid selection is a fully occupied rectangle composed of table cells.\n        // Below we will calculate the area of a selected table cells and the area of valid selection.\n        // The area of a valid selection is defined by top-left and bottom-right cells.\n        const rows = new Set();\n        const columns = new Set();\n        let areaOfSelectedCells = 0;\n        for (const tableCell of selectedTableCells) {\n            const { row, column } = this.getCellLocation(tableCell);\n            const rowspan = parseInt(tableCell.getAttribute('rowspan')) || 1;\n            const colspan = parseInt(tableCell.getAttribute('colspan')) || 1;\n            // Record row & column indexes of current cell.\n            rows.add(row);\n            columns.add(column);\n            // For cells that spans over multiple rows add also the last row that this cell spans over.\n            if (rowspan > 1) {\n                rows.add(row + rowspan - 1);\n            }\n            // For cells that spans over multiple columns add also the last column that this cell spans over.\n            if (colspan > 1) {\n                columns.add(column + colspan - 1);\n            }\n            areaOfSelectedCells += (rowspan * colspan);\n        }\n        // We can only merge table cells that are in adjacent rows...\n        const areaOfValidSelection = getBiggestRectangleArea(rows, columns);\n        return areaOfValidSelection == areaOfSelectedCells;\n    }\n    /**\n     * Returns array of sorted ranges.\n     */\n    sortRanges(ranges) {\n        return Array.from(ranges).sort(compareRangeOrder);\n    }\n    /**\n     * Helper method to get an object with `first` and `last` indexes from an unsorted array of indexes.\n     */\n    _getFirstLastIndexesObject(indexes) {\n        const allIndexesSorted = indexes.sort((indexA, indexB) => indexA - indexB);\n        const first = allIndexesSorted[0];\n        const last = allIndexesSorted[allIndexesSorted.length - 1];\n        return { first, last };\n    }\n    /**\n     * Checks if the selection does not mix a header (column or row) with other cells.\n     *\n     * For instance, in the table below valid selections consist of cells with the same letter only.\n     * So, a-a (same heading row and column) or d-d (body cells) are valid while c-d or a-b are not.\n     *\n     * header columns\n     *    ↓   ↓\n     *  ┌───┬───┬───┬───┐\n     *  │ a │ a │ b │ b │  ← header row\n     *  ├───┼───┼───┼───┤\n     *  │ c │ c │ d │ d │\n     *  ├───┼───┼───┼───┤\n     *  │ c │ c │ d │ d │\n     *  └───┴───┴───┴───┘\n     */\n    _areCellInTheSameTableSection(tableCells) {\n        const table = tableCells[0].findAncestor('table');\n        const rowIndexes = this.getRowIndexes(tableCells);\n        const headingRows = parseInt(table.getAttribute('headingRows')) || 0;\n        // Calculating row indexes is a bit cheaper so if this check fails we can't merge.\n        if (!this._areIndexesInSameSection(rowIndexes, headingRows)) {\n            return false;\n        }\n        const columnIndexes = this.getColumnIndexes(tableCells);\n        const headingColumns = parseInt(table.getAttribute('headingColumns')) || 0;\n        // Similarly cells must be in same column section.\n        return this._areIndexesInSameSection(columnIndexes, headingColumns);\n    }\n    /**\n     * Unified check if table rows/columns indexes are in the same heading/body section.\n     */\n    _areIndexesInSameSection({ first, last }, headingSectionSize) {\n        const firstCellIsInHeading = first < headingSectionSize;\n        const lastCellIsInHeading = last < headingSectionSize;\n        return firstCellIsInHeading === lastCellIsInHeading;\n    }\n}\n/**\n * Creates empty rows at the given index in an existing table.\n *\n * @param insertAt The row index of row insertion.\n * @param rows The number of rows to create.\n * @param tableCellToInsert The number of cells to insert in each row.\n */\nfunction createEmptyRows(writer, table, insertAt, rows, tableCellToInsert, attributes = {}) {\n    for (let i = 0; i < rows; i++) {\n        const tableRow = writer.createElement('tableRow');\n        writer.insert(tableRow, table, insertAt);\n        createCells(tableCellToInsert, writer, writer.createPositionAt(tableRow, 'end'), attributes);\n    }\n}\n/**\n * Creates cells at a given position.\n *\n * @param cells The number of cells to create\n */\nfunction createCells(cells, writer, insertPosition, attributes = {}) {\n    for (let i = 0; i < cells; i++) {\n        (0,_utils_common__WEBPACK_IMPORTED_MODULE_3__.createEmptyTableCell)(writer, insertPosition, attributes);\n    }\n}\n/**\n * Evenly distributes the span of a cell to a number of provided cells.\n * The resulting spans will always be integer values.\n *\n * For instance breaking a span of 7 into 3 cells will return:\n *\n * ```ts\n * { newCellsSpan: 2, updatedSpan: 3 }\n * ```\n *\n * as two cells will have a span of 2 and the remainder will go the first cell so its span will change to 3.\n *\n * @param span The span value do break.\n * @param numberOfCells The number of resulting spans.\n */\nfunction breakSpanEvenly(span, numberOfCells) {\n    if (span < numberOfCells) {\n        return { newCellsSpan: 1, updatedSpan: 1 };\n    }\n    const newCellsSpan = Math.floor(span / numberOfCells);\n    const updatedSpan = (span - newCellsSpan * numberOfCells) + newCellsSpan;\n    return { newCellsSpan, updatedSpan };\n}\n/**\n * Updates heading columns attribute if removing a row from head section.\n */\nfunction adjustHeadingColumns(table, removedColumnIndexes, writer) {\n    const headingColumns = table.getAttribute('headingColumns') || 0;\n    if (headingColumns && removedColumnIndexes.first < headingColumns) {\n        const headingsRemoved = Math.min(headingColumns - 1 /* Other numbers are 0-based */, removedColumnIndexes.last) -\n            removedColumnIndexes.first + 1;\n        writer.setAttribute('headingColumns', headingColumns - headingsRemoved, table);\n    }\n}\n/**\n * Calculates a new heading rows value for removing rows from heading section.\n */\nfunction updateHeadingRows(table, { first, last }, writer) {\n    const headingRows = table.getAttribute('headingRows') || 0;\n    if (first < headingRows) {\n        const newRows = last < headingRows ? headingRows - (last - first + 1) : first;\n        (0,_utils_common__WEBPACK_IMPORTED_MODULE_3__.updateNumericAttribute)('headingRows', newRows, table, writer, 0);\n    }\n}\n/**\n * Finds cells that will be:\n * - trimmed - Cells that are \"above\" removed rows sections and overlap the removed section - their rowspan must be trimmed.\n * - moved - Cells from removed rows section might stick out of. These cells are moved to the next row after a removed section.\n *\n * Sample table with overlapping & sticking out cells:\n *\n *      +----+----+----+----+----+\n *      | 00 | 01 | 02 | 03 | 04 |\n *      +----+    +    +    +    +\n *      | 10 |    |    |    |    |\n *      +----+----+    +    +    +\n *      | 20 | 21 |    |    |    | <-- removed row\n *      +    +    +----+    +    +\n *      |    |    | 32 |    |    | <-- removed row\n *      +----+    +    +----+    +\n *      | 40 |    |    | 43 |    |\n *      +----+----+----+----+----+\n *\n * In a table above:\n * - cells to trim: '02', '03' & '04'.\n * - cells to move: '21' & '32'.\n */\nfunction getCellsToMoveAndTrimOnRemoveRow(table, { first, last }) {\n    const cellsToMove = new Map();\n    const cellsToTrim = [];\n    for (const { row, column, cellHeight, cell } of new _tablewalker__WEBPACK_IMPORTED_MODULE_2__[\"default\"](table, { endRow: last })) {\n        const lastRowOfCell = row + cellHeight - 1;\n        const isCellStickingOutFromRemovedRows = row >= first && row <= last && lastRowOfCell > last;\n        if (isCellStickingOutFromRemovedRows) {\n            const rowspanInRemovedSection = last - row + 1;\n            const rowSpanToSet = cellHeight - rowspanInRemovedSection;\n            cellsToMove.set(column, {\n                cell,\n                rowspan: rowSpanToSet\n            });\n        }\n        const isCellOverlappingRemovedRows = row < first && lastRowOfCell >= first;\n        if (isCellOverlappingRemovedRows) {\n            let rowspanAdjustment;\n            // Cell fully covers removed section - trim it by removed rows count.\n            if (lastRowOfCell >= last) {\n                rowspanAdjustment = last - first + 1;\n            }\n            // Cell partially overlaps removed section - calculate cell's span that is in removed section.\n            else {\n                rowspanAdjustment = lastRowOfCell - first + 1;\n            }\n            cellsToTrim.push({\n                cell,\n                rowspan: cellHeight - rowspanAdjustment\n            });\n        }\n    }\n    return { cellsToMove, cellsToTrim };\n}\nfunction moveCellsToRow(table, targetRowIndex, cellsToMove, writer) {\n    const tableWalker = new _tablewalker__WEBPACK_IMPORTED_MODULE_2__[\"default\"](table, {\n        includeAllSlots: true,\n        row: targetRowIndex\n    });\n    const tableRowMap = [...tableWalker];\n    const row = table.getChild(targetRowIndex);\n    let previousCell;\n    for (const { column, cell, isAnchor } of tableRowMap) {\n        if (cellsToMove.has(column)) {\n            const { cell: cellToMove, rowspan } = cellsToMove.get(column);\n            const targetPosition = previousCell ?\n                writer.createPositionAfter(previousCell) :\n                writer.createPositionAt(row, 0);\n            writer.move(writer.createRangeOn(cellToMove), targetPosition);\n            (0,_utils_common__WEBPACK_IMPORTED_MODULE_3__.updateNumericAttribute)('rowspan', rowspan, cellToMove, writer);\n            previousCell = cellToMove;\n        }\n        else if (isAnchor) {\n            // If cell is spanned then `cell` holds reference to overlapping cell. See ckeditor/ckeditor5#6502.\n            previousCell = cell;\n        }\n    }\n}\nfunction compareRangeOrder(rangeA, rangeB) {\n    // Since table cell ranges are disjoint, it's enough to check their start positions.\n    const posA = rangeA.start;\n    const posB = rangeB.start;\n    // Checking for equal position (returning 0) is not needed because this would be either:\n    // a. Intersecting range (not allowed by model)\n    // b. Collapsed range on the same position (allowed by model but should not happen).\n    return posA.isBefore(posB) ? -1 : 1;\n}\n/**\n * Calculates the area of a maximum rectangle that can span over the provided row & column indexes.\n */\nfunction getBiggestRectangleArea(rows, columns) {\n    const rowsIndexes = Array.from(rows.values());\n    const columnIndexes = Array.from(columns.values());\n    const lastRow = Math.max(...rowsIndexes);\n    const firstRow = Math.min(...rowsIndexes);\n    const lastColumn = Math.max(...columnIndexes);\n    const firstColumn = Math.min(...columnIndexes);\n    return (lastRow - firstRow + 1) * (lastColumn - firstColumn + 1);\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/tableutils.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/tablewalker.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TableWalker)\n/* harmony export */ });\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * The table iterator class. It allows to iterate over table cells. For each cell the iterator yields\n * {@link module:table/tablewalker~TableSlot} with proper table cell attributes.\n */\nclass TableWalker {\n    /**\n     * Creates an instance of the table walker.\n     *\n     * The table walker iterates internally by traversing the table from row index = 0 and column index = 0.\n     * It walks row by row and column by column in order to output values defined in the constructor.\n     * By default it will output only the locations that are occupied by a cell. To include also spanned rows and columns,\n     * pass the `includeAllSlots` option to the constructor.\n     *\n     * The most important values of the iterator are column and row indexes of a cell.\n     *\n     * See {@link module:table/tablewalker~TableSlot} what values are returned by the table walker.\n     *\n     * To iterate over a given row:\n     *\n     * ```ts\n     * const tableWalker = new TableWalker( table, { startRow: 1, endRow: 2 } );\n     *\n     * for ( const tableSlot of tableWalker ) {\n     *   console.log( 'A cell at row', tableSlot.row, 'and column', tableSlot.column );\n     * }\n     * ```\n     *\n     * For instance the code above for the following table:\n     *\n     *  +----+----+----+----+----+----+\n     *  | 00      | 02 | 03 | 04 | 05 |\n     *  |         +----+----+----+----+\n     *  |         | 12      | 14 | 15 |\n     *  |         +----+----+----+    +\n     *  |         | 22           |    |\n     *  |----+----+----+----+----+    +\n     *  | 30 | 31 | 32 | 33 | 34 |    |\n     *  +----+----+----+----+----+----+\n     *\n     * will log in the console:\n     *\n     *  'A cell at row 1 and column 2'\n     *  'A cell at row 1 and column 4'\n     *  'A cell at row 1 and column 5'\n     *  'A cell at row 2 and column 2'\n     *\n     * To also iterate over spanned cells:\n     *\n     * ```ts\n     * const tableWalker = new TableWalker( table, { row: 1, includeAllSlots: true } );\n     *\n     * for ( const tableSlot of tableWalker ) {\n     *   console.log( 'Slot at', tableSlot.row, 'x', tableSlot.column, ':', tableSlot.isAnchor ? 'is anchored' : 'is spanned' );\n     * }\n     * ```\n     *\n     * will log in the console for the table from the previous example:\n     *\n     *  'Cell at 1 x 0 : is spanned'\n     *  'Cell at 1 x 1 : is spanned'\n     *  'Cell at 1 x 2 : is anchored'\n     *  'Cell at 1 x 3 : is spanned'\n     *  'Cell at 1 x 4 : is anchored'\n     *  'Cell at 1 x 5 : is anchored'\n     *\n     * **Note**: Option `row` is a shortcut that sets both `startRow` and `endRow` to the same row.\n     * (Use either `row` or `startRow` and `endRow` but never together). Similarly the `column` option sets both `startColumn`\n     * and `endColumn` to the same column (Use either `column` or `startColumn` and `endColumn` but never together).\n     *\n     * @param table A table over which the walker iterates.\n     * @param options An object with configuration.\n     * @param options.row A row index for which this iterator will output cells. Can't be used together with `startRow` and `endRow`.\n     * @param options.startRow A row index from which this iterator should start. Can't be used together with `row`. Default value is 0.\n     * @param options.endRow A row index at which this iterator should end. Can't be used together with `row`.\n     * @param options.column A column index for which this iterator will output cells.\n     * Can't be used together with `startColumn` and `endColumn`.\n     * @param options.startColumn A column index from which this iterator should start.\n     * Can't be used together with `column`. Default value is 0.\n     * @param options.endColumn A column index at which this iterator should end. Can't be used together with `column`.\n     * @param options.includeAllSlots Also return values for spanned cells. Default value is \"false\".\n     */\n    constructor(table, options = {}) {\n        /**\n         * Indicates whether the iterator jumped to (or close to) the start row, ignoring rows that don't need to be traversed.\n         */\n        this._jumpedToStartRow = false;\n        this._table = table;\n        this._startRow = options.row !== undefined ? options.row : options.startRow || 0;\n        this._endRow = options.row !== undefined ? options.row : options.endRow;\n        this._startColumn = options.column !== undefined ? options.column : options.startColumn || 0;\n        this._endColumn = options.column !== undefined ? options.column : options.endColumn;\n        this._includeAllSlots = !!options.includeAllSlots;\n        this._skipRows = new Set();\n        this._row = 0;\n        this._rowIndex = 0;\n        this._column = 0;\n        this._cellIndex = 0;\n        this._spannedCells = new Map();\n        this._nextCellAtColumn = -1;\n    }\n    /**\n     * Iterable interface.\n     */\n    [Symbol.iterator]() {\n        return this;\n    }\n    /**\n     * Gets the next table walker's value.\n     *\n     * @returns The next table walker's value.\n     */\n    next() {\n        if (this._canJumpToStartRow()) {\n            this._jumpToNonSpannedRowClosestToStartRow();\n        }\n        const row = this._table.getChild(this._rowIndex);\n        // Iterator is done when there's no row (table ended) or the row is after `endRow` limit.\n        if (!row || this._isOverEndRow()) {\n            return { done: true, value: undefined };\n        }\n        // We step over current element when it is not a tableRow instance.\n        if (!row.is('element', 'tableRow')) {\n            this._rowIndex++;\n            return this.next();\n        }\n        if (this._isOverEndColumn()) {\n            return this._advanceToNextRow();\n        }\n        let outValue = null;\n        const spanData = this._getSpanned();\n        if (spanData) {\n            if (this._includeAllSlots && !this._shouldSkipSlot()) {\n                outValue = this._formatOutValue(spanData.cell, spanData.row, spanData.column);\n            }\n        }\n        else {\n            const cell = row.getChild(this._cellIndex);\n            if (!cell) {\n                // If there are no more cells left in row advance to the next row.\n                return this._advanceToNextRow();\n            }\n            const colspan = parseInt(cell.getAttribute('colspan') || '1');\n            const rowspan = parseInt(cell.getAttribute('rowspan') || '1');\n            // Record this cell spans if it's not 1x1 cell.\n            if (colspan > 1 || rowspan > 1) {\n                this._recordSpans(cell, rowspan, colspan);\n            }\n            if (!this._shouldSkipSlot()) {\n                outValue = this._formatOutValue(cell);\n            }\n            this._nextCellAtColumn = this._column + colspan;\n        }\n        // Advance to the next column before returning value.\n        this._column++;\n        if (this._column == this._nextCellAtColumn) {\n            this._cellIndex++;\n        }\n        // The current value will be returned only if current row and column are not skipped.\n        return outValue || this.next();\n    }\n    /**\n     * Marks a row to skip in the next iteration. It will also skip cells from the current row if there are any cells from the current row\n     * to output.\n     *\n     * @param row The row index to skip.\n     */\n    skipRow(row) {\n        this._skipRows.add(row);\n    }\n    /**\n     * Advances internal cursor to the next row.\n     */\n    _advanceToNextRow() {\n        this._row++;\n        this._rowIndex++;\n        this._column = 0;\n        this._cellIndex = 0;\n        this._nextCellAtColumn = -1;\n        return this.next();\n    }\n    /**\n     * Checks if the current row is over {@link #_endRow}.\n     */\n    _isOverEndRow() {\n        // If #_endRow is defined skip all rows after it.\n        return this._endRow !== undefined && this._row > this._endRow;\n    }\n    /**\n     * Checks if the current cell is over {@link #_endColumn}\n     */\n    _isOverEndColumn() {\n        // If #_endColumn is defined skip all cells after it.\n        return this._endColumn !== undefined && this._column > this._endColumn;\n    }\n    /**\n     * A common method for formatting the iterator's output value.\n     *\n     * @param cell The table cell to output.\n     * @param anchorRow The row index of a cell anchor slot.\n     * @param anchorColumn The column index of a cell anchor slot.\n     */\n    _formatOutValue(cell, anchorRow = this._row, anchorColumn = this._column) {\n        return {\n            done: false,\n            value: new TableSlot(this, cell, anchorRow, anchorColumn)\n        };\n    }\n    /**\n     * Checks if the current slot should be skipped.\n     */\n    _shouldSkipSlot() {\n        const rowIsMarkedAsSkipped = this._skipRows.has(this._row);\n        const rowIsBeforeStartRow = this._row < this._startRow;\n        const columnIsBeforeStartColumn = this._column < this._startColumn;\n        const columnIsAfterEndColumn = this._endColumn !== undefined && this._column > this._endColumn;\n        return rowIsMarkedAsSkipped || rowIsBeforeStartRow || columnIsBeforeStartColumn || columnIsAfterEndColumn;\n    }\n    /**\n     * Returns the cell element that is spanned over the current cell location.\n     */\n    _getSpanned() {\n        const rowMap = this._spannedCells.get(this._row);\n        // No spans for given row.\n        if (!rowMap) {\n            return null;\n        }\n        // If spans for given rows has entry for column it means that this location if spanned by other cell.\n        return rowMap.get(this._column) || null;\n    }\n    /**\n     * Updates spanned cells map relative to the current cell location and its span dimensions.\n     *\n     * @param cell A cell that is spanned.\n     * @param rowspan Cell height.\n     * @param colspan Cell width.\n     */\n    _recordSpans(cell, rowspan, colspan) {\n        const data = {\n            cell,\n            row: this._row,\n            column: this._column\n        };\n        for (let rowToUpdate = this._row; rowToUpdate < this._row + rowspan; rowToUpdate++) {\n            for (let columnToUpdate = this._column; columnToUpdate < this._column + colspan; columnToUpdate++) {\n                if (rowToUpdate != this._row || columnToUpdate != this._column) {\n                    this._markSpannedCell(rowToUpdate, columnToUpdate, data);\n                }\n            }\n        }\n    }\n    /**\n     * Marks the cell location as spanned by another cell.\n     *\n     * @param row The row index of the cell location.\n     * @param column The column index of the cell location.\n     * @param data A spanned cell details (cell element, anchor row and column).\n     */\n    _markSpannedCell(row, column, data) {\n        if (!this._spannedCells.has(row)) {\n            this._spannedCells.set(row, new Map());\n        }\n        const rowSpans = this._spannedCells.get(row);\n        rowSpans.set(column, data);\n    }\n    /**\n     * Checks if part of the table can be skipped.\n     */\n    _canJumpToStartRow() {\n        return !!this._startRow &&\n            this._startRow > 0 &&\n            !this._jumpedToStartRow;\n    }\n    /**\n     * Sets the current row to `this._startRow` or the first row before it that has the number of cells\n     * equal to the number of columns in the table.\n     *\n     * Example:\n     * \t+----+----+----+\n     *  | 00 | 01 | 02 |\n     *  |----+----+----+\n     *  | 10      | 12 |\n     *  |         +----+\n     *  |         | 22 |\n     *  |         +----+\n     *  |         | 32 | <--- Start row\n     *  +----+----+----+\n     *  | 40 | 41 | 42 |\n     *  +----+----+----+\n     *\n     * If the 4th row is a `this._startRow`, this method will:\n     * 1.) Count the number of columns this table has based on the first row (3 columns in this case).\n     * 2.) Check if the 4th row contains 3 cells. It doesn't, so go to the row before it.\n     * 3.) Check if the 3rd row contains 3 cells. It doesn't, so go to the row before it.\n     * 4.) Check if the 2nd row contains 3 cells. It does, so set the current row to that row.\n     *\n     * Setting the current row this way is necessary to let the `next()`  method loop over the cells\n     * spanning multiple rows or columns and update the `this._spannedCells` property.\n     */\n    _jumpToNonSpannedRowClosestToStartRow() {\n        const firstRowLength = this._getRowLength(0);\n        for (let i = this._startRow; !this._jumpedToStartRow; i--) {\n            if (firstRowLength === this._getRowLength(i)) {\n                this._row = i;\n                this._rowIndex = i;\n                this._jumpedToStartRow = true;\n            }\n        }\n    }\n    /**\n     * Returns a number of columns in a row taking `colspan` into consideration.\n     */\n    _getRowLength(rowIndex) {\n        const row = this._table.getChild(rowIndex);\n        return [...row.getChildren()].reduce((cols, row) => {\n            return cols + parseInt(row.getAttribute('colspan') || '1');\n        }, 0);\n    }\n}\n/**\n * An object returned by {@link module:table/tablewalker~TableWalker} when traversing table cells.\n */\nclass TableSlot {\n    /**\n     * Creates an instance of the table walker value.\n     *\n     * @param tableWalker The table walker instance.\n     * @param cell The current table cell.\n     * @param anchorRow The row index of a cell anchor slot.\n     * @param anchorColumn The column index of a cell anchor slot.\n     */\n    constructor(tableWalker, cell, anchorRow, anchorColumn) {\n        this.cell = cell;\n        this.row = tableWalker._row;\n        this.column = tableWalker._column;\n        this.cellAnchorRow = anchorRow;\n        this.cellAnchorColumn = anchorColumn;\n        this._cellIndex = tableWalker._cellIndex;\n        this._rowIndex = tableWalker._rowIndex;\n        this._table = tableWalker._table;\n    }\n    // @if CK_DEBUG // public get isSpanned(): unknown { return throwMissingGetterError( 'isSpanned' ); }\n    // @if CK_DEBUG // public get colspan(): unknown { return throwMissingGetterError( 'colspan' ); }\n    // @if CK_DEBUG // public get rowspan(): unknown { return throwMissingGetterError( 'rowspan' ); }\n    // @if CK_DEBUG // public get cellIndex(): unknown { return throwMissingGetterError( 'cellIndex' ); }\n    /**\n     * Whether the cell is anchored in the current slot.\n     */\n    get isAnchor() {\n        return this.row === this.cellAnchorRow && this.column === this.cellAnchorColumn;\n    }\n    /**\n     * The width of a cell defined by a `colspan` attribute. If the model attribute is not present, it is set to `1`.\n     */\n    get cellWidth() {\n        return parseInt(this.cell.getAttribute('colspan') || '1');\n    }\n    /**\n     * The height of a cell defined by a `rowspan` attribute. If the model attribute is not present, it is set to `1`.\n     */\n    get cellHeight() {\n        return parseInt(this.cell.getAttribute('rowspan') || '1');\n    }\n    /**\n     * The index of the current row element in the table.\n     */\n    get rowIndex() {\n        return this._rowIndex;\n    }\n    /**\n     * Returns the {@link module:engine/model/position~Position} before the table slot.\n     */\n    getPositionBefore() {\n        const model = this._table.root.document.model;\n        return model.createPositionAt(this._table.getChild(this.row), this._cellIndex);\n    }\n}\n/**\n * This `TableSlot`'s getter (property) was removed in CKEditor 5 v20.0.0.\n *\n * Check out the new `TableWalker`'s API in the documentation.\n *\n * @error tableslot-getter-removed\n * @param getterName\n */\n// @if CK_DEBUG // function throwMissingGetterError( getterName: string ): void {\n// @if CK_DEBUG //\t\tthrow new CKEditorError( 'tableslot-getter-removed', null, {\n// @if CK_DEBUG //\t\t\tgetterName\n// @if CK_DEBUG //\t\t} );\n// @if CK_DEBUG // }\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/tablewalker.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/ui/colorinputview.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ColorInputView)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/ui */ \"ckeditor5/src/ui.js\");\n/* harmony import */ var ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/utils */ \"ckeditor5/src/utils.js\");\n/* harmony import */ var _theme_colorinput_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../theme/colorinput.css */ \"./node_modules/@ckeditor/ckeditor5-table/theme/colorinput.css\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/ui/colorinputview\n */\n\n\n\n/**\n * The color input view class. It allows the user to type in a color (hex, rgb, etc.)\n * or choose it from the configurable color palette with a preview.\n *\n * @internal\n */\nclass ColorInputView extends ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.View {\n    /**\n     * Creates an instance of the color input view.\n     *\n     * @param locale The locale instance.\n     * @param options The input options.\n     * @param options.colorDefinitions The colors to be displayed in the palette inside the input's dropdown.\n     * @param options.columns The number of columns in which the colors will be displayed.\n     * @param options.defaultColorValue If specified, the color input view will replace the \"Remove color\" button with\n     * the \"Restore default\" button. Instead of clearing the input field, the default color value will be set.\n     */\n    constructor(locale, options) {\n        super(locale);\n        this.set('value', '');\n        this.set('isReadOnly', false);\n        this.set('isFocused', false);\n        this.set('isEmpty', true);\n        this.options = options;\n        this.focusTracker = new ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_1__.FocusTracker();\n        this._focusables = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.ViewCollection();\n        this.dropdownView = this._createDropdownView();\n        this.inputView = this._createInputTextView();\n        this.keystrokes = new ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_1__.KeystrokeHandler();\n        this._stillTyping = false;\n        this._focusCycler = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.FocusCycler({\n            focusables: this._focusables,\n            focusTracker: this.focusTracker,\n            keystrokeHandler: this.keystrokes,\n            actions: {\n                // Navigate items backwards using the <kbd>Shift</kbd> + <kbd>Tab</kbd> keystroke.\n                focusPrevious: 'shift + tab',\n                // Navigate items forwards using the <kbd>Tab</kbd> key.\n                focusNext: 'tab'\n            }\n        });\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-input-color'\n                ]\n            },\n            children: [\n                this.dropdownView,\n                this.inputView\n            ]\n        });\n        this.on('change:value', (evt, name, inputValue) => this._setInputValue(inputValue));\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        // Start listening for the keystrokes coming from the dropdown panel view.\n        this.keystrokes.listenTo(this.dropdownView.panelView.element);\n    }\n    /**\n     * Focuses the input.\n     */\n    focus() {\n        this.inputView.focus();\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        super.destroy();\n        this.focusTracker.destroy();\n        this.keystrokes.destroy();\n    }\n    /**\n     * Creates and configures the {@link #dropdownView}.\n     */\n    _createDropdownView() {\n        const locale = this.locale;\n        const t = locale.t;\n        const bind = this.bindTemplate;\n        const colorSelector = this._createColorSelector(locale);\n        const dropdown = (0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.createDropdown)(locale);\n        const colorPreview = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.View();\n        colorPreview.setTemplate({\n            tag: 'span',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-input-color__button__preview'\n                ],\n                style: {\n                    backgroundColor: bind.to('value')\n                }\n            },\n            children: [{\n                    tag: 'span',\n                    attributes: {\n                        class: [\n                            'ck',\n                            'ck-input-color__button__preview__no-color-indicator',\n                            bind.if('value', 'ck-hidden', value => value != '')\n                        ]\n                    }\n                }]\n        });\n        dropdown.buttonView.extendTemplate({\n            attributes: {\n                class: 'ck-input-color__button'\n            }\n        });\n        dropdown.buttonView.children.add(colorPreview);\n        dropdown.buttonView.label = t('Color picker');\n        dropdown.buttonView.tooltip = true;\n        dropdown.panelPosition = locale.uiLanguageDirection === 'rtl' ? 'se' : 'sw';\n        dropdown.panelView.children.add(colorSelector);\n        dropdown.bind('isEnabled').to(this, 'isReadOnly', value => !value);\n        this._focusables.add(colorSelector);\n        this.focusTracker.add(colorSelector.element);\n        dropdown.on('change:isOpen', (evt, name, isVisible) => {\n            if (isVisible) {\n                colorSelector.updateSelectedColors();\n                colorSelector.showColorGridsFragment();\n            }\n        });\n        return dropdown;\n    }\n    /**\n     * Creates and configures an instance of {@link module:ui/inputtext/inputtextview~InputTextView}.\n     *\n     * @returns A configured instance to be set as {@link #inputView}.\n     */\n    _createInputTextView() {\n        const locale = this.locale;\n        const inputView = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.InputTextView(locale);\n        inputView.extendTemplate({\n            on: {\n                blur: inputView.bindTemplate.to('blur')\n            }\n        });\n        inputView.value = this.value;\n        inputView.bind('isReadOnly', 'hasError').to(this);\n        this.bind('isFocused', 'isEmpty').to(inputView);\n        inputView.on('input', () => {\n            const inputValue = inputView.element.value;\n            // Check if the value matches one of our defined colors' label.\n            const mappedColor = this.options.colorDefinitions.find(def => inputValue === def.label);\n            this._stillTyping = true;\n            this.value = mappedColor && mappedColor.color || inputValue;\n        });\n        inputView.on('blur', () => {\n            this._stillTyping = false;\n            this._setInputValue(inputView.element.value);\n        });\n        inputView.delegate('input').to(this);\n        return inputView;\n    }\n    /**\n     * Creates and configures the panel with \"color grid\" and \"color picker\" inside the {@link #dropdownView}.\n     */\n    _createColorSelector(locale) {\n        const t = locale.t;\n        const defaultColor = this.options.defaultColorValue || '';\n        const removeColorButtonLabel = defaultColor ? t('Restore default') : t('Remove color');\n        const colorSelector = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.ColorSelectorView(locale, {\n            colors: this.options.colorDefinitions,\n            columns: this.options.columns,\n            removeButtonLabel: removeColorButtonLabel,\n            colorPickerLabel: t('Color picker'),\n            colorPickerViewConfig: this.options.colorPickerConfig === false ? false : {\n                ...this.options.colorPickerConfig,\n                hideInput: true\n            }\n        });\n        colorSelector.appendUI();\n        colorSelector.on('execute', (evt, data) => {\n            if (data.source === 'colorPickerSaveButton') {\n                this.dropdownView.isOpen = false;\n                return;\n            }\n            this.value = data.value || defaultColor;\n            // Trigger the listener that actually applies the set value.\n            this.fire('input');\n            if (data.source !== 'colorPicker') {\n                this.dropdownView.isOpen = false;\n            }\n        });\n        /**\n         * Color is saved before changes in color picker. In case \"cancel button\" is pressed\n         * this color will be applied.\n         */\n        let backupColor = this.value;\n        colorSelector.on('colorPicker:cancel', () => {\n            /**\n             * Revert color to previous value before changes in color picker.\n             */\n            this.value = backupColor;\n            this.fire('input');\n            this.dropdownView.isOpen = false;\n        });\n        colorSelector.colorGridsFragmentView.colorPickerButtonView.on('execute', () => {\n            /**\n             * Save color value before changes in color picker.\n             */\n            backupColor = this.value;\n        });\n        colorSelector.bind('selectedColor').to(this, 'value');\n        return colorSelector;\n    }\n    /**\n     * Sets {@link #inputView}'s value property to the color value or color label,\n     * if there is one and the user is not typing.\n     *\n     * Handles cases like:\n     *\n     * * Someone picks the color in the grid.\n     * * The color is set from the plugin level.\n     *\n     * @param inputValue Color value to be set.\n     */\n    _setInputValue(inputValue) {\n        if (!this._stillTyping) {\n            const normalizedInputValue = normalizeColor(inputValue);\n            // Check if the value matches one of our defined colors.\n            const mappedColor = this.options.colorDefinitions.find(def => normalizedInputValue === normalizeColor(def.color));\n            if (mappedColor) {\n                this.inputView.value = mappedColor.label;\n            }\n            else {\n                this.inputView.value = inputValue || '';\n            }\n        }\n    }\n}\n/**\n * Normalizes color value, by stripping extensive whitespace.\n * For example., transforms:\n * * `   rgb(  25 50    0 )` to `rgb(25 50 0)`,\n * * \"\\t  rgb(  25 ,  50,0 )\t\t\" to `rgb(25 50 0)`.\n *\n * @param colorString The value to be normalized.\n */\nfunction normalizeColor(colorString) {\n    return colorString\n        // Remove any whitespace right after `(` or `,`.\n        .replace(/([(,])\\s+/g, '$1')\n        // Remove any whitespace at the beginning or right before the end, `)`, `,`, or another whitespace.\n        .replace(/^\\s+|\\s+(?=[),\\s]|$)/g, '')\n        // Then, replace `,` or whitespace with a single space.\n        .replace(/,|\\s/g, ' ');\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/ui/colorinputview.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/ui/formrowview.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ FormRowView)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/ui */ \"ckeditor5/src/ui.js\");\n/* harmony import */ var _theme_formrow_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../theme/formrow.css */ \"./node_modules/@ckeditor/ckeditor5-table/theme/formrow.css\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/ui/formrowview\n */\n\n\n/**\n * The class representing a single row in a complex form,\n * used by {@link module:table/tablecellproperties/ui/tablecellpropertiesview~TableCellPropertiesView}.\n *\n * **Note**: For now this class is private. When more use cases arrive (beyond ckeditor5-table),\n * it will become a component in ckeditor5-ui.\n *\n * @internal\n */\nclass FormRowView extends ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.View {\n    /**\n     * Creates an instance of the form row class.\n     *\n     * @param locale The locale instance.\n     * @param options.labelView When passed, the row gets the `group` and `aria-labelledby`\n     * DOM attributes and gets described by the label.\n     */\n    constructor(locale, options = {}) {\n        super(locale);\n        const bind = this.bindTemplate;\n        this.set('class', options.class || null);\n        this.children = this.createCollection();\n        if (options.children) {\n            options.children.forEach(child => this.children.add(child));\n        }\n        this.set('_role', null);\n        this.set('_ariaLabelledBy', null);\n        if (options.labelView) {\n            this.set({\n                _role: 'group',\n                _ariaLabelledBy: options.labelView.id\n            });\n        }\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-form__row',\n                    bind.to('class')\n                ],\n                role: bind.to('_role'),\n                'aria-labelledby': bind.to('_ariaLabelledBy')\n            },\n            children: this.children\n        });\n    }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/ui/formrowview.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/ui/inserttableview.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ InsertTableView)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/ui */ \"ckeditor5/src/ui.js\");\n/* harmony import */ var ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/utils */ \"ckeditor5/src/utils.js\");\n/* harmony import */ var _theme_inserttable_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../../theme/inserttable.css */ \"./node_modules/@ckeditor/ckeditor5-table/theme/inserttable.css\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/ui/inserttableview\n */\n\n\n\n/**\n * The table size view.\n *\n * It renders a 10x10 grid to choose the inserted table size.\n */\nclass InsertTableView extends ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.View {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale) {\n        super(locale);\n        const bind = this.bindTemplate;\n        this.items = this._createGridCollection();\n        this.keystrokes = new ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_1__.KeystrokeHandler();\n        this.focusTracker = new ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_1__.FocusTracker();\n        this.set('rows', 0);\n        this.set('columns', 0);\n        this.bind('label').to(this, 'columns', this, 'rows', (columns, rows) => `${rows} × ${columns}`);\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: ['ck']\n            },\n            children: [\n                {\n                    tag: 'div',\n                    attributes: {\n                        class: ['ck-insert-table-dropdown__grid']\n                    },\n                    on: {\n                        'mouseover@.ck-insert-table-dropdown-grid-box': bind.to('boxover')\n                    },\n                    children: this.items\n                },\n                {\n                    tag: 'div',\n                    attributes: {\n                        class: [\n                            'ck',\n                            'ck-insert-table-dropdown__label'\n                        ],\n                        'aria-hidden': true\n                    },\n                    children: [\n                        {\n                            text: bind.to('label')\n                        }\n                    ]\n                }\n            ],\n            on: {\n                mousedown: bind.to(evt => {\n                    evt.preventDefault();\n                }),\n                click: bind.to(() => {\n                    this.fire('execute');\n                })\n            }\n        });\n        // #rows and #columns are set via changes to #focusTracker on mouse over.\n        this.on('boxover', (evt, domEvt) => {\n            const { row, column } = domEvt.target.dataset;\n            this.items.get((parseInt(row, 10) - 1) * 10 + (parseInt(column, 10) - 1)).focus();\n        });\n        // This allows the #rows and #columns to be updated when:\n        // * the user navigates the grid using the keyboard,\n        // * the user moves the mouse over grid items.\n        this.focusTracker.on('change:focusedElement', (evt, name, focusedElement) => {\n            if (!focusedElement) {\n                return;\n            }\n            const { row, column } = focusedElement.dataset;\n            // As row & column indexes are zero-based transform it to number of selected rows & columns.\n            this.set({\n                rows: parseInt(row),\n                columns: parseInt(column)\n            });\n        });\n        this.on('change:columns', () => this._highlightGridBoxes());\n        this.on('change:rows', () => this._highlightGridBoxes());\n    }\n    render() {\n        super.render();\n        (0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.addKeyboardHandlingForGrid)({\n            keystrokeHandler: this.keystrokes,\n            focusTracker: this.focusTracker,\n            gridItems: this.items,\n            numberOfColumns: 10,\n            uiLanguageDirection: this.locale && this.locale.uiLanguageDirection\n        });\n        for (const item of this.items) {\n            this.focusTracker.add(item.element);\n        }\n        this.keystrokes.listenTo(this.element);\n    }\n    /**\n     * @inheritDoc\n     */\n    focus() {\n        this.items.get(0).focus();\n    }\n    /**\n     * @inheritDoc\n     */\n    focusLast() {\n        this.items.get(0).focus();\n    }\n    /**\n     * Highlights grid boxes depending on rows and columns selected.\n     */\n    _highlightGridBoxes() {\n        const rows = this.rows;\n        const columns = this.columns;\n        this.items.map((boxView, index) => {\n            // Translate box index to the row & column index.\n            const itemRow = Math.floor(index / 10);\n            const itemColumn = index % 10;\n            // Grid box is highlighted when its row & column index belongs to selected number of rows & columns.\n            const isOn = itemRow < rows && itemColumn < columns;\n            boxView.set('isOn', isOn);\n        });\n    }\n    /**\n     * Creates a new Button for the grid.\n     *\n     * @param locale The locale instance.\n     * @param row Row number.\n     * @param column Column number.\n     * @param label The grid button label.\n     */\n    _createGridButton(locale, row, column, label) {\n        const button = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.ButtonView(locale);\n        button.set({\n            label,\n            class: 'ck-insert-table-dropdown-grid-box'\n        });\n        button.extendTemplate({\n            attributes: {\n                'data-row': row,\n                'data-column': column\n            }\n        });\n        return button;\n    }\n    /**\n     * @returns A view collection containing boxes to be placed in a table grid.\n     */\n    _createGridCollection() {\n        const boxes = [];\n        // Add grid boxes to table selection view.\n        for (let index = 0; index < 100; index++) {\n            const row = Math.floor(index / 10);\n            const column = index % 10;\n            const label = `${row + 1} × ${column + 1}`;\n            boxes.push(this._createGridButton(this.locale, row + 1, column + 1, label));\n        }\n        return this.createCollection(boxes);\n    }\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/ui/inserttableview.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/utils/common.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createEmptyTableCell: () => (/* binding */ createEmptyTableCell),\n/* harmony export */   enableProperty: () => (/* binding */ enableProperty),\n/* harmony export */   isHeadingColumnCell: () => (/* binding */ isHeadingColumnCell),\n/* harmony export */   updateNumericAttribute: () => (/* binding */ updateNumericAttribute)\n/* harmony export */ });\n/* harmony import */ var _converters_tableproperties__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../converters/tableproperties */ \"./node_modules/@ckeditor/ckeditor5-table/src/converters/tableproperties.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * A common method to update the numeric value. If a value is the default one, it will be unset.\n *\n * @param key An attribute key.\n * @param value The new attribute value.\n * @param item A model item on which the attribute will be set.\n * @param defaultValue The default attribute value. If a value is lower or equal, it will be unset.\n */\nfunction updateNumericAttribute(key, value, item, writer, defaultValue = 1) {\n    if (value !== undefined && value !== null && defaultValue !== undefined && defaultValue !== null && value > defaultValue) {\n        writer.setAttribute(key, value, item);\n    }\n    else {\n        writer.removeAttribute(key, item);\n    }\n}\n/**\n * A common method to create an empty table cell. It creates a proper model structure as a table cell must have at least one block inside.\n *\n * @param writer The model writer.\n * @param insertPosition The position at which the table cell should be inserted.\n * @param attributes The element attributes.\n * @returns Created table cell.\n */\nfunction createEmptyTableCell(writer, insertPosition, attributes = {}) {\n    const tableCell = writer.createElement('tableCell', attributes);\n    writer.insertElement('paragraph', tableCell);\n    writer.insert(tableCell, insertPosition);\n    return tableCell;\n}\n/**\n * Checks if a table cell belongs to the heading column section.\n */\nfunction isHeadingColumnCell(tableUtils, tableCell) {\n    const table = tableCell.parent.parent;\n    const headingColumns = parseInt(table.getAttribute('headingColumns') || '0');\n    const { column } = tableUtils.getCellLocation(tableCell);\n    return !!headingColumns && column < headingColumns;\n}\n/**\n * Enables conversion for an attribute for simple view-model mappings.\n *\n * @param options.defaultValue The default value for the specified `modelAttribute`.\n */\nfunction enableProperty(schema, conversion, options) {\n    const { modelAttribute } = options;\n    schema.extend('tableCell', {\n        allowAttributes: [modelAttribute]\n    });\n    (0,_converters_tableproperties__WEBPACK_IMPORTED_MODULE_0__.upcastStyleToAttribute)(conversion, { viewElement: /^(td|th)$/, ...options });\n    (0,_converters_tableproperties__WEBPACK_IMPORTED_MODULE_0__.downcastAttributeToStyle)(conversion, { modelElement: 'tableCell', ...options });\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/utils/common.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/utils/structure.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   adjustLastColumnIndex: () => (/* binding */ adjustLastColumnIndex),\n/* harmony export */   adjustLastRowIndex: () => (/* binding */ adjustLastRowIndex),\n/* harmony export */   cropTableToDimensions: () => (/* binding */ cropTableToDimensions),\n/* harmony export */   getHorizontallyOverlappingCells: () => (/* binding */ getHorizontallyOverlappingCells),\n/* harmony export */   getVerticallyOverlappingCells: () => (/* binding */ getVerticallyOverlappingCells),\n/* harmony export */   removeEmptyColumns: () => (/* binding */ removeEmptyColumns),\n/* harmony export */   removeEmptyRows: () => (/* binding */ removeEmptyRows),\n/* harmony export */   removeEmptyRowsColumns: () => (/* binding */ removeEmptyRowsColumns),\n/* harmony export */   splitHorizontally: () => (/* binding */ splitHorizontally),\n/* harmony export */   splitVertically: () => (/* binding */ splitVertically),\n/* harmony export */   trimTableCellIfNeeded: () => (/* binding */ trimTableCellIfNeeded)\n/* harmony export */ });\n/* harmony import */ var _tablewalker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tablewalker */ \"./node_modules/@ckeditor/ckeditor5-table/src/tablewalker.js\");\n/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./common */ \"./node_modules/@ckeditor/ckeditor5-table/src/utils/common.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n\n/**\n * Returns a cropped table according to given dimensions.\n\n * To return a cropped table that starts at first row and first column and end in third row and column:\n *\n * ```ts\n * const croppedTable = cropTableToDimensions( table, {\n *   startRow: 1,\n *   endRow: 3,\n *   startColumn: 1,\n *   endColumn: 3\n * }, writer );\n * ```\n *\n * Calling the code above for the table below:\n *\n *        0   1   2   3   4                      0   1   2\n *      ┌───┬───┬───┬───┬───┐\n *   0  │ a │ b │ c │ d │ e │\n *      ├───┴───┤   ├───┴───┤                  ┌───┬───┬───┐\n *   1  │ f     │   │ g     │                  │   │   │ g │  0\n *      ├───┬───┴───┼───┬───┤   will return:   ├───┴───┼───┤\n *   2  │ h │ i     │ j │ k │                  │ i     │ j │  1\n *      ├───┤       ├───┤   │                  │       ├───┤\n *   3  │ l │       │ m │   │                  │       │ m │  2\n *      ├───┼───┬───┤   ├───┤                  └───────┴───┘\n *   4  │ n │ o │ p │   │ q │\n *      └───┴───┴───┴───┴───┘\n */\nfunction cropTableToDimensions(sourceTable, cropDimensions, writer) {\n    const { startRow, startColumn, endRow, endColumn } = cropDimensions;\n    // Create empty table with empty rows equal to crop height.\n    const croppedTable = writer.createElement('table');\n    const cropHeight = endRow - startRow + 1;\n    for (let i = 0; i < cropHeight; i++) {\n        writer.insertElement('tableRow', croppedTable, 'end');\n    }\n    const tableMap = [...new _tablewalker__WEBPACK_IMPORTED_MODULE_0__[\"default\"](sourceTable, { startRow, endRow, startColumn, endColumn, includeAllSlots: true })];\n    // Iterate over source table slots (including empty - spanned - ones).\n    for (const { row: sourceRow, column: sourceColumn, cell: tableCell, isAnchor, cellAnchorRow, cellAnchorColumn } of tableMap) {\n        // Row index in cropped table.\n        const rowInCroppedTable = sourceRow - startRow;\n        const row = croppedTable.getChild(rowInCroppedTable);\n        // For empty slots: fill the gap with empty table cell.\n        if (!isAnchor) {\n            // But fill the gap only if the spanning cell is anchored outside cropped area.\n            // In the table from method jsdoc those cells are: \"c\" & \"f\".\n            if (cellAnchorRow < startRow || cellAnchorColumn < startColumn) {\n                (0,_common__WEBPACK_IMPORTED_MODULE_1__.createEmptyTableCell)(writer, writer.createPositionAt(row, 'end'));\n            }\n        }\n        // Otherwise clone the cell with all children and trim if it exceeds cropped area.\n        else {\n            const tableCellCopy = writer.cloneElement(tableCell);\n            writer.append(tableCellCopy, row);\n            // Trim table if it exceeds cropped area.\n            // In the table from method jsdoc those cells are: \"g\" & \"m\".\n            trimTableCellIfNeeded(tableCellCopy, sourceRow, sourceColumn, endRow, endColumn, writer);\n        }\n    }\n    // Adjust heading rows & columns in cropped table if crop selection includes headings parts.\n    addHeadingsToCroppedTable(croppedTable, sourceTable, startRow, startColumn, writer);\n    return croppedTable;\n}\n/**\n * Returns slot info of cells that starts above and overlaps a given row.\n *\n * In a table below, passing `overlapRow = 3`\n *\n *     ┌───┬───┬───┬───┬───┐\n *  0  │ a │ b │ c │ d │ e │\n *     │   ├───┼───┼───┼───┤\n *  1  │   │ f │ g │ h │ i │\n *     ├───┤   ├───┼───┤   │\n *  2  │ j │   │ k │ l │   │\n *     │   │   │   ├───┼───┤\n *  3  │   │   │   │ m │ n │  <- overlap row to check\n *     ├───┼───┤   │   ├───│\n *  4  │ o │ p │   │   │ q │\n *     └───┴───┴───┴───┴───┘\n *\n * will return slot info for cells: \"j\", \"f\", \"k\".\n *\n * @param table The table to check.\n * @param overlapRow The index of the row to check.\n * @param startRow row to start analysis. Use it when it is known that the cells above that row will not overlap. Default value is 0.\n */\nfunction getVerticallyOverlappingCells(table, overlapRow, startRow = 0) {\n    const cells = [];\n    const tableWalker = new _tablewalker__WEBPACK_IMPORTED_MODULE_0__[\"default\"](table, { startRow, endRow: overlapRow - 1 });\n    for (const slotInfo of tableWalker) {\n        const { row, cellHeight } = slotInfo;\n        const cellEndRow = row + cellHeight - 1;\n        if (row < overlapRow && overlapRow <= cellEndRow) {\n            cells.push(slotInfo);\n        }\n    }\n    return cells;\n}\n/**\n * Splits the table cell horizontally.\n *\n * @returns Created table cell, if any were created.\n */\nfunction splitHorizontally(tableCell, splitRow, writer) {\n    const tableRow = tableCell.parent;\n    const table = tableRow.parent;\n    const rowIndex = tableRow.index;\n    const rowspan = parseInt(tableCell.getAttribute('rowspan'));\n    const newRowspan = splitRow - rowIndex;\n    const newCellAttributes = {};\n    const newCellRowSpan = rowspan - newRowspan;\n    if (newCellRowSpan > 1) {\n        newCellAttributes.rowspan = newCellRowSpan;\n    }\n    const colspan = parseInt(tableCell.getAttribute('colspan') || '1');\n    if (colspan > 1) {\n        newCellAttributes.colspan = colspan;\n    }\n    const startRow = rowIndex;\n    const endRow = startRow + newRowspan;\n    const tableMap = [...new _tablewalker__WEBPACK_IMPORTED_MODULE_0__[\"default\"](table, { startRow, endRow, includeAllSlots: true })];\n    let newCell = null;\n    let columnIndex;\n    for (const tableSlot of tableMap) {\n        const { row, column, cell } = tableSlot;\n        if (cell === tableCell && columnIndex === undefined) {\n            columnIndex = column;\n        }\n        if (columnIndex !== undefined && columnIndex === column && row === endRow) {\n            newCell = (0,_common__WEBPACK_IMPORTED_MODULE_1__.createEmptyTableCell)(writer, tableSlot.getPositionBefore(), newCellAttributes);\n        }\n    }\n    // Update the rowspan attribute after updating table.\n    (0,_common__WEBPACK_IMPORTED_MODULE_1__.updateNumericAttribute)('rowspan', newRowspan, tableCell, writer);\n    return newCell;\n}\n/**\n * Returns slot info of cells that starts before and overlaps a given column.\n *\n * In a table below, passing `overlapColumn = 3`\n *\n *    0   1   2   3   4\n *  ┌───────┬───────┬───┐\n *  │ a     │ b     │ c │\n *  │───┬───┴───────┼───┤\n *  │ d │ e         │ f │\n *  ├───┼───┬───────┴───┤\n *  │ g │ h │ i         │\n *  ├───┼───┼───┬───────┤\n *  │ j │ k │ l │ m     │\n *  ├───┼───┴───┼───┬───┤\n *  │ n │ o     │ p │ q │\n *  └───┴───────┴───┴───┘\n *                ^\n *                Overlap column to check\n *\n * will return slot info for cells: \"b\", \"e\", \"i\".\n *\n * @param table The table to check.\n * @param overlapColumn The index of the column to check.\n */\nfunction getHorizontallyOverlappingCells(table, overlapColumn) {\n    const cellsToSplit = [];\n    const tableWalker = new _tablewalker__WEBPACK_IMPORTED_MODULE_0__[\"default\"](table);\n    for (const slotInfo of tableWalker) {\n        const { column, cellWidth } = slotInfo;\n        const cellEndColumn = column + cellWidth - 1;\n        if (column < overlapColumn && overlapColumn <= cellEndColumn) {\n            cellsToSplit.push(slotInfo);\n        }\n    }\n    return cellsToSplit;\n}\n/**\n * Splits the table cell vertically.\n *\n * @param columnIndex The table cell column index.\n * @param splitColumn The index of column to split cell on.\n * @returns Created table cell.\n */\nfunction splitVertically(tableCell, columnIndex, splitColumn, writer) {\n    const colspan = parseInt(tableCell.getAttribute('colspan'));\n    const newColspan = splitColumn - columnIndex;\n    const newCellAttributes = {};\n    const newCellColSpan = colspan - newColspan;\n    if (newCellColSpan > 1) {\n        newCellAttributes.colspan = newCellColSpan;\n    }\n    const rowspan = parseInt(tableCell.getAttribute('rowspan') || '1');\n    if (rowspan > 1) {\n        newCellAttributes.rowspan = rowspan;\n    }\n    const newCell = (0,_common__WEBPACK_IMPORTED_MODULE_1__.createEmptyTableCell)(writer, writer.createPositionAfter(tableCell), newCellAttributes);\n    // Update the colspan attribute after updating table.\n    (0,_common__WEBPACK_IMPORTED_MODULE_1__.updateNumericAttribute)('colspan', newColspan, tableCell, writer);\n    return newCell;\n}\n/**\n * Adjusts table cell dimensions to not exceed limit row and column.\n *\n * If table cell width (or height) covers a column (or row) that is after a limit column (or row)\n * this method will trim \"colspan\" (or \"rowspan\") attribute so the table cell will fit in a defined limits.\n */\nfunction trimTableCellIfNeeded(tableCell, cellRow, cellColumn, limitRow, limitColumn, writer) {\n    const colspan = parseInt(tableCell.getAttribute('colspan') || '1');\n    const rowspan = parseInt(tableCell.getAttribute('rowspan') || '1');\n    const endColumn = cellColumn + colspan - 1;\n    if (endColumn > limitColumn) {\n        const trimmedSpan = limitColumn - cellColumn + 1;\n        (0,_common__WEBPACK_IMPORTED_MODULE_1__.updateNumericAttribute)('colspan', trimmedSpan, tableCell, writer, 1);\n    }\n    const endRow = cellRow + rowspan - 1;\n    if (endRow > limitRow) {\n        const trimmedSpan = limitRow - cellRow + 1;\n        (0,_common__WEBPACK_IMPORTED_MODULE_1__.updateNumericAttribute)('rowspan', trimmedSpan, tableCell, writer, 1);\n    }\n}\n/**\n * Sets proper heading attributes to a cropped table.\n */\nfunction addHeadingsToCroppedTable(croppedTable, sourceTable, startRow, startColumn, writer) {\n    const headingRows = parseInt(sourceTable.getAttribute('headingRows') || '0');\n    if (headingRows > 0) {\n        const headingRowsInCrop = headingRows - startRow;\n        (0,_common__WEBPACK_IMPORTED_MODULE_1__.updateNumericAttribute)('headingRows', headingRowsInCrop, croppedTable, writer, 0);\n    }\n    const headingColumns = parseInt(sourceTable.getAttribute('headingColumns') || '0');\n    if (headingColumns > 0) {\n        const headingColumnsInCrop = headingColumns - startColumn;\n        (0,_common__WEBPACK_IMPORTED_MODULE_1__.updateNumericAttribute)('headingColumns', headingColumnsInCrop, croppedTable, writer, 0);\n    }\n}\n/**\n * Removes columns that have no cells anchored.\n *\n * In table below:\n *\n *     +----+----+----+----+----+----+----+\n *     | 00 | 01      | 03 | 04      | 06 |\n *     +----+----+----+----+         +----+\n *     | 10 | 11      | 13 |         | 16 |\n *     +----+----+----+----+----+----+----+\n *     | 20 | 21      | 23 | 24      | 26 |\n *     +----+----+----+----+----+----+----+\n *                  ^--- empty ---^\n *\n * Will remove columns 2 and 5.\n *\n * **Note:** This is a low-level helper method for clearing invalid model state when doing table modifications.\n * To remove a column from a table use {@link module:table/tableutils~TableUtils#removeColumns `TableUtils.removeColumns()`}.\n *\n * @internal\n * @returns True if removed some columns.\n */\nfunction removeEmptyColumns(table, tableUtils) {\n    const width = tableUtils.getColumns(table);\n    const columnsMap = new Array(width).fill(0);\n    for (const { column } of new _tablewalker__WEBPACK_IMPORTED_MODULE_0__[\"default\"](table)) {\n        columnsMap[column]++;\n    }\n    const emptyColumns = columnsMap.reduce((result, cellsCount, column) => {\n        return cellsCount ? result : [...result, column];\n    }, []);\n    if (emptyColumns.length > 0) {\n        // Remove only last empty column because it will recurrently trigger removing empty rows.\n        const emptyColumn = emptyColumns[emptyColumns.length - 1];\n        // @if CK_DEBUG_TABLE // console.log( `Removing empty column: ${ emptyColumn }.` );\n        tableUtils.removeColumns(table, { at: emptyColumn });\n        return true;\n    }\n    return false;\n}\n/**\n * Removes rows that have no cells anchored.\n *\n * In table below:\n *\n *     +----+----+----+\n *     | 00 | 01 | 02 |\n *     +----+----+----+\n *     | 10 | 11 | 12 |\n *     +    +    +    +\n *     |    |    |    | <-- empty\n *     +----+----+----+\n *     | 30 | 31 | 32 |\n *     +----+----+----+\n *     | 40      | 42 |\n *     +         +    +\n *     |         |    | <-- empty\n *     +----+----+----+\n *     | 60 | 61 | 62 |\n *     +----+----+----+\n *\n * Will remove rows 2 and 5.\n *\n * **Note:** This is a low-level helper method for clearing invalid model state when doing table modifications.\n * To remove a row from a table use {@link module:table/tableutils~TableUtils#removeRows `TableUtils.removeRows()`}.\n *\n * @internal\n * @returns True if removed some rows.\n */\nfunction removeEmptyRows(table, tableUtils) {\n    const emptyRows = [];\n    const tableRowCount = tableUtils.getRows(table);\n    for (let rowIndex = 0; rowIndex < tableRowCount; rowIndex++) {\n        const tableRow = table.getChild(rowIndex);\n        if (tableRow.isEmpty) {\n            emptyRows.push(rowIndex);\n        }\n    }\n    if (emptyRows.length > 0) {\n        // Remove only last empty row because it will recurrently trigger removing empty columns.\n        const emptyRow = emptyRows[emptyRows.length - 1];\n        // @if CK_DEBUG_TABLE // console.log( `Removing empty row: ${ emptyRow }.` );\n        tableUtils.removeRows(table, { at: emptyRow });\n        return true;\n    }\n    return false;\n}\n/**\n * Removes rows and columns that have no cells anchored.\n *\n * In table below:\n *\n *     +----+----+----+----+\n *     | 00      | 02      |\n *     +----+----+         +\n *     | 10      |         |\n *     +----+----+----+----+\n *     | 20      | 22 | 23 |\n *     +         +    +    +\n *     |         |    |    | <-- empty row\n *     +----+----+----+----+\n *             ^--- empty column\n *\n * Will remove row 3 and column 1.\n *\n * **Note:** This is a low-level helper method for clearing invalid model state when doing table modifications.\n * To remove a rows from a table use {@link module:table/tableutils~TableUtils#removeRows `TableUtils.removeRows()`} and\n * {@link module:table/tableutils~TableUtils#removeColumns `TableUtils.removeColumns()`} to remove a column.\n *\n * @internal\n */\nfunction removeEmptyRowsColumns(table, tableUtils) {\n    const removedColumns = removeEmptyColumns(table, tableUtils);\n    // If there was some columns removed then cleaning empty rows was already triggered.\n    if (!removedColumns) {\n        removeEmptyRows(table, tableUtils);\n    }\n}\n/**\n * Returns adjusted last row index if selection covers part of a row with empty slots (spanned by other cells).\n * The `dimensions.lastRow` is equal to last row index but selection might be bigger.\n *\n * This happens *only* on rectangular selection so we analyze a case like this:\n *\n *        +---+---+---+---+\n *      0 | a | b | c | d |\n *        +   +   +---+---+\n *      1 |   | e | f | g |\n *        +   +---+   +---+\n *      2 |   | h |   | i | <- last row, each cell has rowspan = 2,\n *        +   +   +   +   +    so we need to return 3, not 2\n *      3 |   |   |   |   |\n *        +---+---+---+---+\n *\n * @returns Adjusted last row index.\n */\nfunction adjustLastRowIndex(table, dimensions) {\n    const lastRowMap = Array.from(new _tablewalker__WEBPACK_IMPORTED_MODULE_0__[\"default\"](table, {\n        startColumn: dimensions.firstColumn,\n        endColumn: dimensions.lastColumn,\n        row: dimensions.lastRow\n    }));\n    const everyCellHasSingleRowspan = lastRowMap.every(({ cellHeight }) => cellHeight === 1);\n    // It is a \"flat\" row, so the last row index is OK.\n    if (everyCellHasSingleRowspan) {\n        return dimensions.lastRow;\n    }\n    // Otherwise get any cell's rowspan and adjust the last row index.\n    const rowspanAdjustment = lastRowMap[0].cellHeight - 1;\n    return dimensions.lastRow + rowspanAdjustment;\n}\n/**\n * Returns adjusted last column index if selection covers part of a column with empty slots (spanned by other cells).\n * The `dimensions.lastColumn` is equal to last column index but selection might be bigger.\n *\n * This happens *only* on rectangular selection so we analyze a case like this:\n *\n *       0   1   2   3\n *     +---+---+---+---+\n *     | a             |\n *     +---+---+---+---+\n *     | b | c | d     |\n *     +---+---+---+---+\n *     | e     | f     |\n *     +---+---+---+---+\n *     | g | h         |\n *     +---+---+---+---+\n *               ^\n *              last column, each cell has colspan = 2, so we need to return 3, not 2\n *\n * @returns Adjusted last column index.\n */\nfunction adjustLastColumnIndex(table, dimensions) {\n    const lastColumnMap = Array.from(new _tablewalker__WEBPACK_IMPORTED_MODULE_0__[\"default\"](table, {\n        startRow: dimensions.firstRow,\n        endRow: dimensions.lastRow,\n        column: dimensions.lastColumn\n    }));\n    const everyCellHasSingleColspan = lastColumnMap.every(({ cellWidth }) => cellWidth === 1);\n    // It is a \"flat\" column, so the last column index is OK.\n    if (everyCellHasSingleColspan) {\n        return dimensions.lastColumn;\n    }\n    // Otherwise get any cell's colspan and adjust the last column index.\n    const colspanAdjustment = lastColumnMap[0].cellWidth - 1;\n    return dimensions.lastColumn + colspanAdjustment;\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/utils/structure.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/utils/table-properties.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addDefaultUnitToNumericValue: () => (/* binding */ addDefaultUnitToNumericValue),\n/* harmony export */   getNormalizedDefaultProperties: () => (/* binding */ getNormalizedDefaultProperties),\n/* harmony export */   getSingleValue: () => (/* binding */ getSingleValue)\n/* harmony export */ });\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash-es */ \"./node_modules/lodash-es/isObject.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * Returns a string if all four values of box sides are equal.\n *\n * If a string is passed, it is treated as a single value (pass-through).\n *\n * ```ts\n * // Returns 'foo':\n * getSingleValue( { top: 'foo', right: 'foo', bottom: 'foo', left: 'foo' } );\n * getSingleValue( 'foo' );\n *\n * // Returns undefined:\n * getSingleValue( { top: 'foo', right: 'foo', bottom: 'bar', left: 'foo' } );\n * getSingleValue( { top: 'foo', right: 'foo' } );\n * ```\n */\nfunction getSingleValue(objectOrString) {\n    if (!objectOrString || !(0,lodash_es__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(objectOrString)) {\n        return objectOrString;\n    }\n    const { top, right, bottom, left } = objectOrString;\n    if (top == right && right == bottom && bottom == left) {\n        return top;\n    }\n}\n/**\n * Adds a unit to a value if the value is a number or a string representing a number.\n *\n * **Note**: It does nothing to non-numeric values.\n *\n * ```ts\n * getSingleValue( 25, 'px' ); // '25px'\n * getSingleValue( 25, 'em' ); // '25em'\n * getSingleValue( '25em', 'px' ); // '25em'\n * getSingleValue( 'foo', 'px' ); // 'foo'\n * ```\n *\n * @param defaultUnit A default unit added to a numeric value.\n */\nfunction addDefaultUnitToNumericValue(value, defaultUnit) {\n    const numericValue = parseFloat(value);\n    if (Number.isNaN(numericValue)) {\n        return value;\n    }\n    if (String(numericValue) !== String(value)) {\n        return value;\n    }\n    return `${numericValue}${defaultUnit}`;\n}\n/**\n * Returns the normalized configuration.\n *\n * @param options.includeAlignmentProperty Whether the \"alignment\" property should be added.\n * @param options.includePaddingProperty Whether the \"padding\" property should be added.\n * @param options.includeVerticalAlignmentProperty Whether the \"verticalAlignment\" property should be added.\n * @param options.includeHorizontalAlignmentProperty Whether the \"horizontalAlignment\" property should be added.\n * @param options.isRightToLeftContent Whether the content is right-to-left.\n */\nfunction getNormalizedDefaultProperties(config, options = {}) {\n    const normalizedConfig = {\n        borderStyle: 'none',\n        borderWidth: '',\n        borderColor: '',\n        backgroundColor: '',\n        width: '',\n        height: '',\n        ...config\n    };\n    if (options.includeAlignmentProperty && !normalizedConfig.alignment) {\n        normalizedConfig.alignment = 'center';\n    }\n    if (options.includePaddingProperty && !normalizedConfig.padding) {\n        normalizedConfig.padding = '';\n    }\n    if (options.includeVerticalAlignmentProperty && !normalizedConfig.verticalAlignment) {\n        normalizedConfig.verticalAlignment = 'middle';\n    }\n    if (options.includeHorizontalAlignmentProperty && !normalizedConfig.horizontalAlignment) {\n        normalizedConfig.horizontalAlignment = options.isRightToLeftContent ? 'right' : 'left';\n    }\n    return normalizedConfig;\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/utils/table-properties.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/utils/ui/contextualballoon.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getBalloonCellPositionData: () => (/* binding */ getBalloonCellPositionData),\n/* harmony export */   getBalloonTablePositionData: () => (/* binding */ getBalloonTablePositionData),\n/* harmony export */   repositionContextualBalloon: () => (/* binding */ repositionContextualBalloon)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/utils */ \"ckeditor5/src/utils.js\");\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/ui */ \"ckeditor5/src/ui.js\");\n/* harmony import */ var _widget__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./widget */ \"./node_modules/@ckeditor/ckeditor5-table/src/utils/ui/widget.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/utils/ui/contextualballoon\n */\n\n\n\nconst DEFAULT_BALLOON_POSITIONS = ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.BalloonPanelView.defaultPositions;\nconst BALLOON_POSITIONS = [\n    DEFAULT_BALLOON_POSITIONS.northArrowSouth,\n    DEFAULT_BALLOON_POSITIONS.northArrowSouthWest,\n    DEFAULT_BALLOON_POSITIONS.northArrowSouthEast,\n    DEFAULT_BALLOON_POSITIONS.southArrowNorth,\n    DEFAULT_BALLOON_POSITIONS.southArrowNorthWest,\n    DEFAULT_BALLOON_POSITIONS.southArrowNorthEast,\n    DEFAULT_BALLOON_POSITIONS.viewportStickyNorth\n];\n/**\n * A helper utility that positions the\n * {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon} instance\n * with respect to the table in the editor content, if one is selected.\n *\n * @param editor The editor instance.\n * @param target Either \"cell\" or \"table\". Determines the target the balloon will be attached to.\n */\nfunction repositionContextualBalloon(editor, target) {\n    const balloon = editor.plugins.get('ContextualBalloon');\n    if ((0,_widget__WEBPACK_IMPORTED_MODULE_2__.getTableWidgetAncestor)(editor.editing.view.document.selection)) {\n        let position;\n        if (target === 'cell') {\n            position = getBalloonCellPositionData(editor);\n        }\n        else {\n            position = getBalloonTablePositionData(editor);\n        }\n        balloon.updatePosition(position);\n    }\n}\n/**\n * Returns the positioning options that control the geometry of the\n * {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon} with respect\n * to the selected table in the editor content.\n *\n * @param editor The editor instance.\n */\nfunction getBalloonTablePositionData(editor) {\n    const firstPosition = editor.model.document.selection.getFirstPosition();\n    const modelTable = firstPosition.findAncestor('table');\n    const viewTable = editor.editing.mapper.toViewElement(modelTable);\n    return {\n        target: editor.editing.view.domConverter.mapViewToDom(viewTable),\n        positions: BALLOON_POSITIONS\n    };\n}\n/**\n * Returns the positioning options that control the geometry of the\n * {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon} with respect\n * to the selected table cell in the editor content.\n *\n * @param editor The editor instance.\n */\nfunction getBalloonCellPositionData(editor) {\n    const mapper = editor.editing.mapper;\n    const domConverter = editor.editing.view.domConverter;\n    const selection = editor.model.document.selection;\n    if (selection.rangeCount > 1) {\n        return {\n            target: () => createBoundingRect(selection.getRanges(), editor),\n            positions: BALLOON_POSITIONS\n        };\n    }\n    const modelTableCell = getTableCellAtPosition(selection.getFirstPosition());\n    const viewTableCell = mapper.toViewElement(modelTableCell);\n    return {\n        target: domConverter.mapViewToDom(viewTableCell),\n        positions: BALLOON_POSITIONS\n    };\n}\n/**\n * Returns the first selected table cell from a multi-cell or in-cell selection.\n *\n * @param position Document position.\n */\nfunction getTableCellAtPosition(position) {\n    const isTableCellSelected = position.nodeAfter && position.nodeAfter.is('element', 'tableCell');\n    return isTableCellSelected ? position.nodeAfter : position.findAncestor('tableCell');\n}\n/**\n * Returns bounding rectangle for given model ranges.\n *\n * @param ranges Model ranges that the bounding rect should be returned for.\n * @param editor The editor instance.\n */\nfunction createBoundingRect(ranges, editor) {\n    const mapper = editor.editing.mapper;\n    const domConverter = editor.editing.view.domConverter;\n    const rects = Array.from(ranges).map(range => {\n        const modelTableCell = getTableCellAtPosition(range.start);\n        const viewTableCell = mapper.toViewElement(modelTableCell);\n        return new ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_0__.Rect(domConverter.mapViewToDom(viewTableCell));\n    });\n    return ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_0__.Rect.getBoundingRect(rects);\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/utils/ui/contextualballoon.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/utils/ui/table-properties.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   colorFieldValidator: () => (/* binding */ colorFieldValidator),\n/* harmony export */   defaultColors: () => (/* binding */ defaultColors),\n/* harmony export */   fillToolbar: () => (/* binding */ fillToolbar),\n/* harmony export */   getBorderStyleDefinitions: () => (/* binding */ getBorderStyleDefinitions),\n/* harmony export */   getBorderStyleLabels: () => (/* binding */ getBorderStyleLabels),\n/* harmony export */   getLabeledColorInputCreator: () => (/* binding */ getLabeledColorInputCreator),\n/* harmony export */   getLocalizedColorErrorText: () => (/* binding */ getLocalizedColorErrorText),\n/* harmony export */   getLocalizedLengthErrorText: () => (/* binding */ getLocalizedLengthErrorText),\n/* harmony export */   lengthFieldValidator: () => (/* binding */ lengthFieldValidator),\n/* harmony export */   lineWidthFieldValidator: () => (/* binding */ lineWidthFieldValidator)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/ui */ \"ckeditor5/src/ui.js\");\n/* harmony import */ var ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/utils */ \"ckeditor5/src/utils.js\");\n/* harmony import */ var ckeditor5_src_engine__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ckeditor5/src/engine */ \"ckeditor5/src/engine.js\");\n/* harmony import */ var _ui_colorinputview__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../ui/colorinputview */ \"./node_modules/@ckeditor/ckeditor5-table/src/ui/colorinputview.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/utils/ui/table-properties\n */\n\n\n\n\nconst isEmpty = (val) => val === '';\n/**\n * Returns an object containing pairs of CSS border style values and their localized UI\n * labels. Used by {@link module:table/tablecellproperties/ui/tablecellpropertiesview~TableCellPropertiesView}\n * and {@link module:table/tableproperties/ui/tablepropertiesview~TablePropertiesView}.\n *\n * @param t The \"t\" function provided by the editor that is used to localize strings.\n */\nfunction getBorderStyleLabels(t) {\n    return {\n        none: t('None'),\n        solid: t('Solid'),\n        dotted: t('Dotted'),\n        dashed: t('Dashed'),\n        double: t('Double'),\n        groove: t('Groove'),\n        ridge: t('Ridge'),\n        inset: t('Inset'),\n        outset: t('Outset')\n    };\n}\n/**\n * Returns a localized error string that can be displayed next to color (background, border)\n * fields that have an invalid value.\n *\n * @param t The \"t\" function provided by the editor that is used to localize strings.\n */\nfunction getLocalizedColorErrorText(t) {\n    return t('The color is invalid. Try \"#FF0000\" or \"rgb(255,0,0)\" or \"red\".');\n}\n/**\n * Returns a localized error string that can be displayed next to length (padding, border width)\n * fields that have an invalid value.\n *\n * @param t The \"t\" function provided by the editor that is used to localize strings.\n */\nfunction getLocalizedLengthErrorText(t) {\n    return t('The value is invalid. Try \"10px\" or \"2em\" or simply \"2\".');\n}\n/**\n * Returns `true` when the passed value is an empty string or a valid CSS color expression.\n * Otherwise, `false` is returned.\n *\n * See {@link module:engine/view/styles/utils~isColor}.\n */\nfunction colorFieldValidator(value) {\n    value = value.trim().toLowerCase();\n    return isEmpty(value) || (0,ckeditor5_src_engine__WEBPACK_IMPORTED_MODULE_2__.isColor)(value);\n}\n/**\n * Returns `true` when the passed value is an empty string, a number without a unit or a valid CSS length expression.\n * Otherwise, `false` is returned.\n *\n * See {@link module:engine/view/styles/utils~isLength}.\n * See {@link module:engine/view/styles/utils~isPercentage}.\n */\nfunction lengthFieldValidator(value) {\n    value = value.trim();\n    return isEmpty(value) || isNumberString(value) || (0,ckeditor5_src_engine__WEBPACK_IMPORTED_MODULE_2__.isLength)(value) || (0,ckeditor5_src_engine__WEBPACK_IMPORTED_MODULE_2__.isPercentage)(value);\n}\n/**\n * Returns `true` when the passed value is an empty string, a number without a unit or a valid CSS length expression.\n * Otherwise, `false` is returned.\n *\n * See {@link module:engine/view/styles/utils~isLength}.\n */\nfunction lineWidthFieldValidator(value) {\n    value = value.trim();\n    return isEmpty(value) || isNumberString(value) || (0,ckeditor5_src_engine__WEBPACK_IMPORTED_MODULE_2__.isLength)(value);\n}\n/**\n * Generates item definitions for a UI dropdown that allows changing the border style of a table or a table cell.\n *\n * @param defaultStyle The default border.\n */\nfunction getBorderStyleDefinitions(view, defaultStyle) {\n    const itemDefinitions = new ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_1__.Collection();\n    const styleLabels = getBorderStyleLabels(view.t);\n    for (const style in styleLabels) {\n        const definition = {\n            type: 'button',\n            model: new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.Model({\n                _borderStyleValue: style,\n                label: styleLabels[style],\n                role: 'menuitemradio',\n                withText: true\n            })\n        };\n        if (style === 'none') {\n            definition.model.bind('isOn').to(view, 'borderStyle', value => {\n                if (defaultStyle === 'none') {\n                    return !value;\n                }\n                return value === style;\n            });\n        }\n        else {\n            definition.model.bind('isOn').to(view, 'borderStyle', value => {\n                return value === style;\n            });\n        }\n        itemDefinitions.add(definition);\n    }\n    return itemDefinitions;\n}\n/**\n * A helper that fills a toolbar with buttons that:\n *\n * * have some labels,\n * * have some icons,\n * * set a certain UI view property value upon execution.\n *\n * @param nameToValue A function that maps a button name to a value. By default names are the same as values.\n */\nfunction fillToolbar(options) {\n    const { view, icons, toolbar, labels, propertyName, nameToValue, defaultValue } = options;\n    for (const name in labels) {\n        const button = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.ButtonView(view.locale);\n        button.set({\n            label: labels[name],\n            icon: icons[name],\n            tooltip: labels[name]\n        });\n        // If specified the `nameToValue()` callback, map the value based on the option's name.\n        const buttonValue = nameToValue ? nameToValue(name) : name;\n        button.bind('isOn').to(view, propertyName, value => {\n            // `value` comes from `view[ propertyName ]`.\n            let valueToCompare = value;\n            // If it's empty, and the `defaultValue` is specified, use it instead.\n            if (value === '' && defaultValue) {\n                valueToCompare = defaultValue;\n            }\n            return buttonValue === valueToCompare;\n        });\n        button.on('execute', () => {\n            view[propertyName] = buttonValue;\n        });\n        toolbar.items.add(button);\n    }\n}\n/**\n * A default color palette used by various user interfaces related to tables, for instance,\n * by {@link module:table/tablecellproperties/tablecellpropertiesui~TableCellPropertiesUI} or\n * {@link module:table/tableproperties/tablepropertiesui~TablePropertiesUI}.\n *\n * The color palette follows the {@link module:table/tableconfig~TableColorConfig table color configuration format}\n * and contains the following color definitions:\n *\n * ```ts\n * const defaultColors = [\n *   {\n *     color: 'hsl(0, 0%, 0%)',\n *     label: 'Black'\n *   },\n *   {\n *     color: 'hsl(0, 0%, 30%)',\n *     label: 'Dim grey'\n *   },\n *   {\n *     color: 'hsl(0, 0%, 60%)',\n *     label: 'Grey'\n *   },\n *   {\n *     color: 'hsl(0, 0%, 90%)',\n *     label: 'Light grey'\n *   },\n *   {\n *     color: 'hsl(0, 0%, 100%)',\n *     label: 'White',\n *     hasBorder: true\n *   },\n *   {\n *     color: 'hsl(0, 75%, 60%)',\n *     label: 'Red'\n *   },\n *   {\n *     color: 'hsl(30, 75%, 60%)',\n *     label: 'Orange'\n *   },\n *   {\n *     color: 'hsl(60, 75%, 60%)',\n *     label: 'Yellow'\n *   },\n *   {\n *     color: 'hsl(90, 75%, 60%)',\n *     label: 'Light green'\n *   },\n *   {\n *     color: 'hsl(120, 75%, 60%)',\n *     label: 'Green'\n *   },\n *   {\n *     color: 'hsl(150, 75%, 60%)',\n *     label: 'Aquamarine'\n *   },\n *   {\n *     color: 'hsl(180, 75%, 60%)',\n *     label: 'Turquoise'\n *   },\n *   {\n *     color: 'hsl(210, 75%, 60%)',\n *     label: 'Light blue'\n *   },\n *   {\n *     color: 'hsl(240, 75%, 60%)',\n *     label: 'Blue'\n *   },\n *   {\n *     color: 'hsl(270, 75%, 60%)',\n *     label: 'Purple'\n *   }\n * ];\n * ```\n */\nconst defaultColors = [\n    {\n        color: 'hsl(0, 0%, 0%)',\n        label: 'Black'\n    },\n    {\n        color: 'hsl(0, 0%, 30%)',\n        label: 'Dim grey'\n    },\n    {\n        color: 'hsl(0, 0%, 60%)',\n        label: 'Grey'\n    },\n    {\n        color: 'hsl(0, 0%, 90%)',\n        label: 'Light grey'\n    },\n    {\n        color: 'hsl(0, 0%, 100%)',\n        label: 'White',\n        hasBorder: true\n    },\n    {\n        color: 'hsl(0, 75%, 60%)',\n        label: 'Red'\n    },\n    {\n        color: 'hsl(30, 75%, 60%)',\n        label: 'Orange'\n    },\n    {\n        color: 'hsl(60, 75%, 60%)',\n        label: 'Yellow'\n    },\n    {\n        color: 'hsl(90, 75%, 60%)',\n        label: 'Light green'\n    },\n    {\n        color: 'hsl(120, 75%, 60%)',\n        label: 'Green'\n    },\n    {\n        color: 'hsl(150, 75%, 60%)',\n        label: 'Aquamarine'\n    },\n    {\n        color: 'hsl(180, 75%, 60%)',\n        label: 'Turquoise'\n    },\n    {\n        color: 'hsl(210, 75%, 60%)',\n        label: 'Light blue'\n    },\n    {\n        color: 'hsl(240, 75%, 60%)',\n        label: 'Blue'\n    },\n    {\n        color: 'hsl(270, 75%, 60%)',\n        label: 'Purple'\n    }\n];\n/**\n * Returns a creator for a color input with a label.\n *\n * For given options, it returns a function that creates an instance of a\n * {@link module:table/ui/colorinputview~ColorInputView color input} logically related to\n * a {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView labeled view} in the DOM.\n *\n * The helper does the following:\n *\n * * It sets the color input `id` and `ariaDescribedById` attributes.\n * * It binds the color input `isReadOnly` to the labeled view.\n * * It binds the color input `hasError` to the labeled view.\n * * It enables a logic that cleans up the error when the user starts typing in the color input.\n *\n * Usage:\n *\n * ```ts\n * const colorInputCreator = getLabeledColorInputCreator( {\n *   colorConfig: [ ... ],\n *   columns: 3,\n * } );\n *\n * const labeledInputView = new LabeledFieldView( locale, colorInputCreator );\n * console.log( labeledInputView.view ); // A color input instance.\n * ```\n *\n * @internal\n * @param options Color input options.\n * @param options.colorConfig The configuration of the color palette displayed in the input's dropdown.\n * @param options.columns The configuration of the number of columns the color palette consists of in the input's dropdown.\n * @param options.defaultColorValue If specified, the color input view will replace the \"Remove color\" button with\n * the \"Restore default\" button. Instead of clearing the input field, the default color value will be set.\n * @param options.colorPickerConfig The configuration of the color picker. You could disable it or define your output format.\n */\nfunction getLabeledColorInputCreator(options) {\n    return (labeledFieldView, viewUid, statusUid) => {\n        const colorInputView = new _ui_colorinputview__WEBPACK_IMPORTED_MODULE_3__[\"default\"](labeledFieldView.locale, {\n            colorDefinitions: colorConfigToColorGridDefinitions(options.colorConfig),\n            columns: options.columns,\n            defaultColorValue: options.defaultColorValue,\n            colorPickerConfig: options.colorPickerConfig\n        });\n        colorInputView.inputView.set({\n            id: viewUid,\n            ariaDescribedById: statusUid\n        });\n        colorInputView.bind('isReadOnly').to(labeledFieldView, 'isEnabled', value => !value);\n        colorInputView.bind('hasError').to(labeledFieldView, 'errorText', value => !!value);\n        colorInputView.on('input', () => {\n            // UX: Make the error text disappear and disable the error indicator as the user\n            // starts fixing the errors.\n            labeledFieldView.errorText = null;\n        });\n        labeledFieldView.bind('isEmpty', 'isFocused').to(colorInputView);\n        return colorInputView;\n    };\n}\n/**\n * A simple helper method to detect number strings.\n * I allows full number notation, so omitting 0 is not allowed:\n */\nfunction isNumberString(value) {\n    const parsedValue = parseFloat(value);\n    return !Number.isNaN(parsedValue) && value === String(parsedValue);\n}\nfunction colorConfigToColorGridDefinitions(colorConfig) {\n    return colorConfig.map(item => ({\n        color: item.model,\n        label: item.label,\n        options: {\n            hasBorder: item.hasBorder\n        }\n    }));\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/utils/ui/table-properties.js?")},"./node_modules/@ckeditor/ckeditor5-table/src/utils/ui/widget.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getSelectedTableWidget: () => (/* binding */ getSelectedTableWidget),\n/* harmony export */   getTableWidgetAncestor: () => (/* binding */ getTableWidgetAncestor)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/widget */ \"ckeditor5/src/widget.js\");\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * Returns a table widget editing view element if one is selected.\n */\nfunction getSelectedTableWidget(selection) {\n    const viewElement = selection.getSelectedElement();\n    if (viewElement && isTableWidget(viewElement)) {\n        return viewElement;\n    }\n    return null;\n}\n/**\n * Returns a table widget editing view element if one is among the selection's ancestors.\n */\nfunction getTableWidgetAncestor(selection) {\n    const selectionPosition = selection.getFirstPosition();\n    if (!selectionPosition) {\n        return null;\n    }\n    let parent = selectionPosition.parent;\n    while (parent) {\n        if (parent.is('element') && isTableWidget(parent)) {\n            return parent;\n        }\n        parent = parent.parent;\n    }\n    return null;\n}\n/**\n * Checks if a given view element is a table widget.\n */\nfunction isTableWidget(viewElement) {\n    return !!viewElement.getCustomProperty('table') && (0,ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_0__.isWidget)(viewElement);\n}\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/src/utils/ui/widget.js?")},"./node_modules/css-loader/dist/cjs.js!./node_modules/@ckeditor/ckeditor5-table/theme/colorinput.css":(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/noSourceMaps.js */ "./node_modules/css-loader/dist/runtime/noSourceMaps.js");\n/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");\n/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `/*\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n.ck.ck-input-color {\n\twidth: 100%;\n\tdisplay: flex;\n\tflex-direction: row-reverse;\n\n\t& > input.ck.ck-input-text {\n\t\tmin-width: auto;\n\t\tflex-grow: 1;\n\t}\n\n\t& > div.ck.ck-dropdown {\n\t\tmin-width: auto;\n\n\t\t/* This dropdown has no arrow but a color preview instead. */\n\t\t& > .ck-input-color__button .ck-dropdown__arrow {\n\t\t\tdisplay: none;\n\t\t}\n\t}\n\n\t& .ck.ck-input-color__button {\n\t\t/* Resolving issue with misaligned buttons on Safari (see #10589) */\n\t\tdisplay: flex;\n\n\t\t& .ck.ck-input-color__button__preview {\n\t\t\tposition: relative;\n\t\t\toverflow: hidden;\n\n\t\t\t& > .ck.ck-input-color__button__preview__no-color-indicator {\n\t\t\t\tposition: absolute;\n\t\t\t\tdisplay: block;\n\t\t\t}\n\t\t}\n\t}\n}\n`, ""]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/theme/colorinput.css?./node_modules/css-loader/dist/cjs.js')},"./node_modules/css-loader/dist/cjs.js!./node_modules/@ckeditor/ckeditor5-table/theme/form.css":(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/noSourceMaps.js */ "./node_modules/css-loader/dist/runtime/noSourceMaps.js");\n/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");\n/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `/*\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/*\n * Note: This file should contain the wireframe styles only. But since there are no such styles,\n * it acts as a message to the builder telling that it should look for the corresponding styles\n * **in the theme** when compiling the editor.\n */\n\n`, ""]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/theme/form.css?./node_modules/css-loader/dist/cjs.js')},"./node_modules/css-loader/dist/cjs.js!./node_modules/@ckeditor/ckeditor5-table/theme/formrow.css":(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/noSourceMaps.js */ "./node_modules/css-loader/dist/runtime/noSourceMaps.js");\n/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");\n/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `/*\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n.ck.ck-form__row {\n\tdisplay: flex;\n\tflex-direction: row;\n\tflex-wrap: nowrap;\n\tjustify-content: space-between;\n\n\t/* Ignore labels that work as fieldset legends */\n\t& > *:not(.ck-label) {\n\t\tflex-grow: 1;\n\t}\n\n\t&.ck-table-form__action-row {\n\t\t& .ck-button-save,\n\t\t& .ck-button-cancel {\n\t\t\tjustify-content: center;\n\t\t}\n\t}\n}\n`, ""]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/theme/formrow.css?./node_modules/css-loader/dist/cjs.js')},"./node_modules/css-loader/dist/cjs.js!./node_modules/@ckeditor/ckeditor5-table/theme/inserttable.css":(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/noSourceMaps.js */ "./node_modules/css-loader/dist/runtime/noSourceMaps.js");\n/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");\n/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `/*\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n.ck .ck-insert-table-dropdown__grid {\n\tdisplay: flex;\n\tflex-direction: row;\n\tflex-wrap: wrap;\n}\n`, ""]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/theme/inserttable.css?./node_modules/css-loader/dist/cjs.js')},"./node_modules/css-loader/dist/cjs.js!./node_modules/@ckeditor/ckeditor5-table/theme/table.css":(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/noSourceMaps.js */ "./node_modules/css-loader/dist/runtime/noSourceMaps.js");\n/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");\n/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `/*\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n.ck-content .table {\n\t/* Give the table widget some air and center it horizontally */\n\t/* The first value should be equal to --ck-spacing-large variable if used in the editor context\n\tto avoid the content jumping (See https://github.com/ckeditor/ckeditor5/issues/9825). */\n\tmargin: 0.9em auto;\n\tdisplay: table;\n\n\t& table {\n\t\t/* The table cells should have slight borders */\n\t\tborder-collapse: collapse;\n\t\tborder-spacing: 0;\n\n\t\t/* Table width and height are set on the parent <figure>. Make sure the table inside stretches\n\t\tto the full dimensions of the container (https://github.com/ckeditor/ckeditor5/issues/6186). */\n\t\twidth: 100%;\n\t\theight: 100%;\n\n\t\t/* The outer border of the table should be slightly darker than the inner lines.\n\t\tAlso see https://github.com/ckeditor/ckeditor5-table/issues/50. */\n\t\tborder: 1px double hsl(0, 0%, 70%);\n\n\t\t& td,\n\t\t& th {\n\t\t\tmin-width: 2em;\n\t\t\tpadding: .4em;\n\n\t\t\t/* The border is inherited from .ck-editor__nested-editable styles, so theoretically it\'s not necessary here.\n\t\t\tHowever, the border is a content style, so it should use .ck-content (so it works outside the editor).\n\t\t\tHence, the duplication. See https://github.com/ckeditor/ckeditor5/issues/6314 */\n\t\t\tborder: 1px solid hsl(0, 0%, 75%);\n\t\t}\n\n\t\t& th {\n\t\t\tfont-weight: bold;\n\t\t\tbackground: hsla(0, 0%, 0%, 5%);\n\t\t}\n\t}\n}\n\n/* Text alignment of the table header should match the editor settings and override the native browser styling,\nwhen content is available outside the editor. See https://github.com/ckeditor/ckeditor5/issues/6638 */\n.ck-content[dir="rtl"] .table th {\n\ttext-align: right;\n}\n\n.ck-content[dir="ltr"] .table th {\n\ttext-align: left;\n}\n\n.ck-editor__editable .ck-table-bogus-paragraph {\n\t/*\n\t * Use display:inline-block to force Chrome/Safari to limit text mutations to this element.\n\t * See https://github.com/ckeditor/ckeditor5/issues/6062.\n\t */\n\tdisplay: inline-block;\n\n\t/*\n\t * Inline HTML elements nested in the span should always be dimensioned in relation to the whole cell width.\n\t * See https://github.com/ckeditor/ckeditor5/issues/9117.\n\t */\n\twidth: 100%;\n}\n`, ""]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/theme/table.css?./node_modules/css-loader/dist/cjs.js')},"./node_modules/css-loader/dist/cjs.js!./node_modules/@ckeditor/ckeditor5-table/theme/tablecaption.css":(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/noSourceMaps.js */ "./node_modules/css-loader/dist/runtime/noSourceMaps.js");\n/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");\n/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `/*\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n:root {\n\t--ck-color-selector-caption-background: hsl(0, 0%, 97%);\n\t--ck-color-selector-caption-text: hsl(0, 0%, 20%);\n\t--ck-color-selector-caption-highlighted-background: hsl(52deg 100% 50%);\n}\n\n/* Content styles */\n.ck-content .table > figcaption {\n\tdisplay: table-caption;\n\tcaption-side: top;\n\tword-break: break-word;\n\ttext-align: center;\n\tcolor: var(--ck-color-selector-caption-text);\n\tbackground-color: var(--ck-color-selector-caption-background);\n\tpadding: .6em;\n\tfont-size: .75em;\n\toutline-offset: -1px;\n}\n\n/* Editing styles */\n.ck.ck-editor__editable .table > figcaption {\n\t&.table__caption_highlighted {\n\t\tanimation: ck-table-caption-highlight .6s ease-out;\n\t}\n\n\t&.ck-placeholder::before {\n\t\tpadding-left: inherit;\n\t\tpadding-right: inherit;\n\n\t\t/*\n\t\t * Make sure the table caption placeholder doesn\'t overflow the placeholder area.\n\t\t * See https://github.com/ckeditor/ckeditor5/issues/9162.\n\t\t */\n\t\twhite-space: nowrap;\n\t\toverflow: hidden;\n\t\ttext-overflow: ellipsis;\n\t}\n}\n\n@keyframes ck-table-caption-highlight {\n\t0% {\n\t\tbackground-color: var(--ck-color-selector-caption-highlighted-background);\n\t}\n\n\t100% {\n\t\tbackground-color: var(--ck-color-selector-caption-background);\n\t}\n}\n`, ""]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/theme/tablecaption.css?./node_modules/css-loader/dist/cjs.js')},"./node_modules/css-loader/dist/cjs.js!./node_modules/@ckeditor/ckeditor5-table/theme/tablecellproperties.css":(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/noSourceMaps.js */ "./node_modules/css-loader/dist/runtime/noSourceMaps.js");\n/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");\n/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `/*\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n.ck.ck-table-cell-properties-form {\n\t& .ck-form__row {\n\t\t&.ck-table-cell-properties-form__alignment-row {\n\t\t\tflex-wrap: wrap;\n\n\t\t\t& .ck.ck-toolbar {\n\t\t\t\t&:first-of-type {\n\t\t\t\t\t/* 4 buttons out of 7 (h-alignment + v-alignment) = 0.57 */\n\t\t\t\t\tflex-grow: 0.57;\n\t\t\t\t}\n\n\t\t\t\t&:last-of-type {\n\t\t\t\t\t/* 3 buttons out of 7 (h-alignment + v-alignment) = 0.43 */\n\t\t\t\t\tflex-grow: 0.43;\n\t\t\t\t}\n\n\t\t\t\t& .ck-button {\n\t\t\t\t\tflex-grow: 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n`, ""]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/theme/tablecellproperties.css?./node_modules/css-loader/dist/cjs.js')},"./node_modules/css-loader/dist/cjs.js!./node_modules/@ckeditor/ckeditor5-table/theme/tablecolumnresize.css":(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/noSourceMaps.js */ "./node_modules/css-loader/dist/runtime/noSourceMaps.js");\n/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");\n/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `/*\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n:root {\n\t--ck-color-selector-column-resizer-hover: var(--ck-color-base-active);\n\t--ck-table-column-resizer-width: 7px;\n\n\t/* The offset used for absolute positioning of the resizer element, so that it is placed exactly above the cell border.\n\t   The value is: minus half the width of the resizer decreased additionaly by the half the width of the border (0.5px). */\n\t--ck-table-column-resizer-position-offset: calc(var(--ck-table-column-resizer-width) * -0.5 - 0.5px);\n}\n\n.ck-content .table .ck-table-resized {\n\ttable-layout: fixed;\n}\n\n.ck-content .table table {\n\toverflow: hidden;\n}\n\n.ck-content .table td,\n.ck-content .table th {\n\t/* To prevent text overflowing beyond its cell when columns are resized by resize handler\n\t(https://github.com/ckeditor/ckeditor5/pull/14379#issuecomment-1589460978). */\n\toverflow-wrap: break-word;\n\tposition: relative;\n}\n\n.ck.ck-editor__editable .table .ck-table-column-resizer {\n\tposition: absolute;\n\ttop: 0;\n\tbottom: 0;\n\tright: var(--ck-table-column-resizer-position-offset);\n\twidth: var(--ck-table-column-resizer-width);\n\tcursor: col-resize;\n\tuser-select: none;\n\tz-index: var(--ck-z-default);\n}\n\n.ck.ck-editor__editable.ck-column-resize_disabled .table .ck-table-column-resizer {\n\tdisplay: none;\n}\n\n/* The resizer elements, which are extended to an extremely high height, break the drag & drop feature in Chrome. To make it work again,\n   all resizers must be hidden while the table is dragged. */\n.ck.ck-editor__editable .table[draggable] .ck-table-column-resizer {\n\tdisplay: none;\n}\n\n.ck.ck-editor__editable .table .ck-table-column-resizer:hover,\n.ck.ck-editor__editable .table .ck-table-column-resizer__active {\n\tbackground-color: var(--ck-color-selector-column-resizer-hover);\n\topacity: 0.25;\n\t/* The resizer element resides in each cell so to occupy the entire height of the table, which is unknown from a CSS point of view,\n\t   it is extended to an extremely high height. Even for screens with a very high pixel density, the resizer will fulfill its role as\n\t   it should, i.e. for a screen of 476 ppi the total height of the resizer will take over 350 sheets of A4 format, which is totally\n\t   unrealistic height for a single table. */\n\ttop: -999999px;\n\tbottom: -999999px;\n}\n\n.ck.ck-editor__editable[dir=rtl] .table .ck-table-column-resizer {\n\tleft: var(--ck-table-column-resizer-position-offset);\n\tright: unset;\n}\n`, ""]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/theme/tablecolumnresize.css?./node_modules/css-loader/dist/cjs.js')},"./node_modules/css-loader/dist/cjs.js!./node_modules/@ckeditor/ckeditor5-table/theme/tableediting.css":(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/noSourceMaps.js */ "./node_modules/css-loader/dist/runtime/noSourceMaps.js");\n/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");\n/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `/*\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/*\n * Note: This file should contain the wireframe styles only. But since there are no such styles,\n * it acts as a message to the builder telling that it should look for the corresponding styles\n * **in the theme** when compiling the editor.\n */\n`, ""]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/theme/tableediting.css?./node_modules/css-loader/dist/cjs.js')},"./node_modules/css-loader/dist/cjs.js!./node_modules/@ckeditor/ckeditor5-table/theme/tableform.css":(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/noSourceMaps.js */ "./node_modules/css-loader/dist/runtime/noSourceMaps.js");\n/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");\n/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `/*\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n.ck.ck-table-form {\n\t& .ck-form__row {\n\t\t&.ck-table-form__border-row {\n\t\t\tflex-wrap: wrap;\n\t\t}\n\n\t\t&.ck-table-form__background-row {\n\t\t\tflex-wrap: wrap;\n\t\t}\n\n\t\t&.ck-table-form__dimensions-row {\n\t\t\tflex-wrap: wrap;\n\t\t\talign-items: center;\n\n\t\t\t& .ck-labeled-field-view {\n\t\t\t\tdisplay: flex;\n\t\t\t\tflex-direction: column-reverse;\n\t\t\t\talign-items: center;\n\n\t\t\t\t& .ck.ck-dropdown {\n\t\t\t\t\tflex-grow: 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t& .ck-table-form__dimension-operator {\n\t\t\t\tflex-grow: 0;\n\t\t\t}\n\t\t}\n\t}\n\n\t& .ck.ck-labeled-field-view {\n\t\t/* Allow absolute positioning of the status (error) balloons. */\n\t\tposition: relative;\n\n\t\t& .ck.ck-labeled-field-view__status {\n\t\t\tposition: absolute;\n\t\t\tleft: 50%;\n\t\t\tbottom: calc( -1 * var(--ck-table-properties-error-arrow-size) );\n\t\t\ttransform: translate(-50%,100%);\n\n\t\t\t/* Make sure the balloon status stays on top of other form elements. */\n\t\t\tz-index: 1;\n\n\t\t\t/* The arrow pointing towards the field. */\n\t\t\t&::after {\n\t\t\t\tcontent: "";\n\t\t\t\tposition: absolute;\n\t\t\t\ttop: calc( -1 * var(--ck-table-properties-error-arrow-size) );\n\t\t\t\tleft: 50%;\n\t\t\t\ttransform: translateX( -50% );\n\t\t\t}\n\t\t}\n\t}\n}\n`, ""]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/theme/tableform.css?./node_modules/css-loader/dist/cjs.js')},"./node_modules/css-loader/dist/cjs.js!./node_modules/@ckeditor/ckeditor5-table/theme/tableproperties.css":(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/noSourceMaps.js */ "./node_modules/css-loader/dist/runtime/noSourceMaps.js");\n/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");\n/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `/*\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n.ck.ck-table-properties-form {\n\t& .ck-form__row {\n\t\t&.ck-table-properties-form__alignment-row {\n\t\t\tflex-wrap: wrap;\n\t\t\tflex-basis: 0;\n\t\t\talign-content: baseline;\n\n\t\t\t& .ck.ck-toolbar .ck-toolbar__items {\n\t\t\t\tflex-wrap: nowrap;\n\t\t\t}\n\t\t}\n\t}\n}\n`, ""]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/theme/tableproperties.css?./node_modules/css-loader/dist/cjs.js')},"./node_modules/css-loader/dist/cjs.js!./node_modules/@ckeditor/ckeditor5-table/theme/tableselection.css":(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/noSourceMaps.js */ "./node_modules/css-loader/dist/runtime/noSourceMaps.js");\n/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");\n/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `/*\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/*\n * Note: This file should contain the wireframe styles only. But since there are no such styles,\n * it acts as a message to the builder telling that it should look for the corresponding styles\n * **in the theme** when compiling the editor.\n */\n`, ""]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/theme/tableselection.css?./node_modules/css-loader/dist/cjs.js')},"./node_modules/css-loader/dist/runtime/api.js":module=>{"use strict";eval('\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = "";\n      var needLayer = typeof item[5] !== "undefined";\n      if (item[4]) {\n        content += "@supports (".concat(item[4], ") {");\n      }\n      if (item[2]) {\n        content += "@media ".concat(item[2], " {");\n      }\n      if (needLayer) {\n        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += "}";\n      }\n      if (item[2]) {\n        content += "}";\n      }\n      if (item[4]) {\n        content += "}";\n      }\n      return content;\n    }).join("");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === "string") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== "undefined") {\n        if (typeof item[5] === "undefined") {\n          item[5] = layer;\n        } else {\n          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = "".concat(supports);\n        } else {\n          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/css-loader/dist/runtime/api.js?')},"./node_modules/css-loader/dist/runtime/noSourceMaps.js":module=>{"use strict";eval("\n\nmodule.exports = function (i) {\n  return i[1];\n};\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/css-loader/dist/runtime/noSourceMaps.js?")},"./icons/websparkButton.svg":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg version=\\"1.1\\" id=\\"Layer_1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\" x=\\"0px\\" y=\\"0px\\"\\n\\t width=\\"100%\\" viewBox=\\"0 0 72 72\\" enable-background=\\"new 0 0 72 72\\" xml:space=\\"preserve\\">\\n<path fill=\\"#FFFFFF\\" opacity=\\"1.000000\\" stroke=\\"none\\" \\n\\td=\\"\\nM37.000000,73.000000 \\n\\tC24.666666,73.000000 12.833333,73.000000 1.000000,73.000000 \\n\\tC1.000000,49.000000 1.000000,25.000000 1.000000,1.000000 \\n\\tC25.000000,1.000000 49.000000,1.000000 73.000000,1.000000 \\n\\tC73.000000,25.000000 73.000000,49.000000 73.000000,73.000000 \\n\\tC61.166668,73.000000 49.333332,73.000000 37.000000,73.000000 \\nM51.488518,27.002369 \\n\\tC39.183563,27.001835 26.878611,27.002577 14.573657,26.999577 \\n\\tC12.389810,26.999044 10.006021,26.682770 10.004490,29.996738 \\n\\tC10.001911,35.582336 10.003784,41.167934 10.003784,46.708206 \\n\\tC28.314724,46.708206 46.016563,46.708206 63.694138,46.708206 \\n\\tC63.694138,40.024033 63.694138,33.635628 63.694138,27.002369 \\n\\tC59.754177,27.002369 56.118122,27.002369 51.488518,27.002369 \\nz\\"/>\\n<path fill=\\"#464646\\" opacity=\\"1.000000\\" stroke=\\"none\\" \\n\\td=\\"\\nM51.985291,27.002369 \\n\\tC56.118122,27.002369 59.754177,27.002369 63.694138,27.002369 \\n\\tC63.694138,33.635628 63.694138,40.024033 63.694138,46.708206 \\n\\tC46.016563,46.708206 28.314724,46.708206 10.003784,46.708206 \\n\\tC10.003784,41.167934 10.001911,35.582336 10.004490,29.996738 \\n\\tC10.006021,26.682770 12.389810,26.999044 14.573657,26.999577 \\n\\tC26.878611,27.002577 39.183563,27.001835 51.985291,27.002369 \\nz\\"/>\\n</svg>");\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./icons/websparkButton.svg?')},"./icons/websparkDivider.svg":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg xmlns=\\"http://www.w3.org/2000/svg\\" width=\\"72\\" height=\\"72\\" viewBox=\\"0 0 72 72\\" version=\\"1.1\\"><path d=\\"M 10 36 C 10 37.949, 10.667 38, 36 38 C 61.333 38, 62 37.949, 62 36 C 62 34.051, 61.333 34, 36 34 C 10.667 34, 10 34.051, 10 36\\" stroke=\\"none\\" fill=\\"#ffc424\\" fill-rule=\\"evenodd\\"/><path d=\\"\\" stroke=\\"none\\" fill=\\"#fcc424\\" fill-rule=\\"evenodd\\"/></svg>");\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./icons/websparkDivider.svg?')},"./icons/websparkHighlightedHeading.svg":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg xmlns=\\"http://www.w3.org/2000/svg\\" width=\\"71\\" height=\\"72\\" viewBox=\\"0 0 71 72\\" version=\\"1.1\\"><path d=\\"M 50.123 17.042 C 46.088 17.947, 42.375 21.462, 41.453 25.250 C 40.819 27.853, 40.970 28, 44.277 28 C 46.899 28, 48.178 27.377, 49.408 25.500 C 51.193 22.776, 55.681 22.081, 57.800 24.200 C 60.678 27.078, 59.075 30.088, 50 38.841 C 41.819 46.731, 41 47.861, 41 51.260 L 41 55 54 55 L 67 55 67 52 L 67 49 58.500 49 C 53.714 49, 50 48.579, 50 48.036 C 50 47.507, 52.794 44.748, 56.209 41.906 C 63.780 35.605, 65.834 33.079, 66.633 29.087 C 68.275 20.874, 59.989 14.828, 50.123 17.042 M 4 36 L 4 55 8 55 L 12 55 12 47 L 12 39 20.500 39 L 29 39 29 47 L 29 55 33 55 L 37 55 37 36 L 37 17 33 17 L 29 17 29 24.500 L 29 32 20.500 32 L 12 32 12 24.500 L 12 17 8 17 L 4 17 4 36\\" stroke=\\"none\\" fill=\\"#21201c\\" fill-rule=\\"evenodd\\"/><path d=\\"M -0 36.013 L -0 72.025 35.750 71.763 L 71.500 71.500 71.763 35.750 L 72.025 -0 36.013 -0 L 0 0 -0 36.013 M 0.451 36.500 C 0.451 56.300, 0.585 64.542, 0.748 54.815 C 0.912 45.088, 0.912 28.888, 0.749 18.815 C 0.586 8.742, 0.452 16.700, 0.451 36.500 M 50.123 17.042 C 46.088 17.947, 42.375 21.462, 41.453 25.250 C 40.819 27.853, 40.970 28, 44.277 28 C 46.899 28, 48.178 27.377, 49.408 25.500 C 51.193 22.776, 55.681 22.081, 57.800 24.200 C 60.678 27.078, 59.075 30.088, 50 38.841 C 41.819 46.731, 41 47.861, 41 51.260 L 41 55 54 55 L 67 55 67 52 L 67 49 58.500 49 C 53.714 49, 50 48.579, 50 48.036 C 50 47.507, 52.794 44.748, 56.209 41.906 C 63.780 35.605, 65.834 33.079, 66.633 29.087 C 68.275 20.874, 59.989 14.828, 50.123 17.042 M 4 36 L 4 55 8 55 L 12 55 12 47 L 12 39 20.500 39 L 29 39 29 47 L 29 55 33 55 L 37 55 37 36 L 37 17 33 17 L 29 17 29 24.500 L 29 32 20.500 32 L 12 32 12 24.500 L 12 17 8 17 L 4 17 4 36\\" stroke=\\"none\\" fill=\\"#facc48\\" fill-rule=\\"evenodd\\"/></svg>");\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./icons/websparkHighlightedHeading.svg?')},"./icons/websparkListStyle.svg":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>\x3c!-- Uploaded to: SVG Repo, www.svgrepo.com, Generator: SVG Repo Mixer Tools --\x3e\\n<svg fill=\\"#000000\\" width=\\"800px\\" height=\\"800px\\" viewBox=\\"0 0 24 24\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M23,6a1,1,0,0,1-1,1H12a1,1,0,0,1,0-2H22A1,1,0,0,1,23,6Zm-1,5H12a1,1,0,0,0,0,2H22a1,1,0,0,0,0-2Zm0,6H12a1,1,0,0,0,0,2H22a1,1,0,0,0,0-2ZM9,12A4,4,0,1,1,5,8,4,4,0,0,1,9,12ZM7,12a2,2,0,1,0-2,2A2,2,0,0,0,7,12Z\\"/></svg>");\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./icons/websparkListStyle.svg?')},"./icons/websparkblockquote.svg":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg xmlns=\\"http://www.w3.org/2000/svg\\" width=\\"72\\" height=\\"72\\" viewBox=\\"0 0 72 72\\" version=\\"1.1\\"><path d=\\"\\" stroke=\\"none\\" fill=\\"#901c44\\" fill-rule=\\"evenodd\\"/><path d=\\"M 15.437 18.304 C 15.145 19.065, 15.040 23.020, 15.203 27.094 L 15.500 34.500 18.796 34.817 C 21.344 35.062, 21.979 35.516, 21.594 36.817 C 21.319 37.743, 20.810 39.698, 20.461 41.162 C 20.113 42.625, 18.516 44.991, 16.914 46.419 C 15.311 47.847, 14 49.436, 14 49.951 C 14 51.068, 18.003 58, 18.648 58 C 22.051 58, 31.451 48.835, 32.725 44.275 C 33.151 42.749, 33.500 36.100, 33.500 29.500 L 33.500 17.500 24.734 17.211 C 17.992 16.988, 15.845 17.241, 15.437 18.304 M 38.422 18.344 C 38.138 19.083, 38.040 23.020, 38.203 27.094 C 38.494 34.346, 38.557 34.507, 41.250 34.816 C 43.156 35.036, 44 35.706, 44 37.001 C 44 40.318, 42.003 44.446, 39.334 46.645 C 36.401 49.061, 36.565 52.006, 39.858 56.073 C 41.719 58.371, 41.776 58.377, 44.621 56.567 C 53.815 50.717, 56.009 46.158, 56.736 31.395 C 57.149 23.011, 56.964 19.661, 56.025 18.530 C 54.318 16.473, 39.201 16.313, 38.422 18.344\\" stroke=\\"none\\" fill=\\"#8c1c44\\" fill-rule=\\"evenodd\\"/></svg>");\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./icons/websparkblockquote.svg?')},"./icons/websparklead.svg":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg xmlns=\\"http://www.w3.org/2000/svg\\" width=\\"72\\" height=\\"72\\" viewBox=\\"0 0 72 72\\" version=\\"1.1\\"><path d=\\"\\" stroke=\\"none\\" fill=\\"#484444\\" fill-rule=\\"evenodd\\"/><path d=\\"M 22 36 L 22 54 26 54 L 30 54 30 47 L 30 40 36.050 40 C 42.558 40, 47.294 38.188, 48.970 35.055 C 49.537 33.997, 50 31.042, 50 28.489 C 50 24.691, 49.468 23.314, 47.077 20.923 C 44.198 18.044, 43.987 18, 33.077 18 L 22 18 22 36 M 30 29.127 L 30 34.254 35.107 33.764 C 40.442 33.251, 41.959 32.030, 41.985 28.225 C 42.002 25.597, 38.771 24, 33.435 24 L 30 24 30 29.127\\" stroke=\\"none\\" fill=\\"#444444\\" fill-rule=\\"evenodd\\"/></svg>");\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./icons/websparklead.svg?')},"./icons/websparktable.svg":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" standalone=\\"no\\"?>\\n<!DOCTYPE svg PUBLIC \\"-//W3C//DTD SVG 20010904//EN\\"\\n \\"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd\\">\\n<svg version=\\"1.0\\" xmlns=\\"http://www.w3.org/2000/svg\\"\\n width=\\"16.000000pt\\" height=\\"16.000000pt\\" viewBox=\\"0 0 16.000000 16.000000\\"\\n preserveAspectRatio=\\"xMidYMid meet\\">\\n\\n<g transform=\\"translate(0.000000,16.000000) scale(0.100000,-0.100000)\\"\\nfill=\\"#000000\\" stroke=\\"none\\">\\n<path d=\\"M0 80 l0 -70 80 0 80 0 0 70 0 70 -80 0 -80 0 0 -70z m50 10 c0 -13\\n-7 -20 -20 -20 -13 0 -20 7 -20 20 0 13 7 20 20 20 13 0 20 -7 20 -20z m50 0\\nc0 -13 -7 -20 -20 -20 -13 0 -20 7 -20 20 0 13 7 20 20 20 13 0 20 -7 20 -20z\\nm50 0 c0 -13 -7 -20 -20 -20 -13 0 -20 7 -20 20 0 13 7 20 20 20 13 0 20 -7\\n20 -20z m-100 -50 c0 -13 -7 -20 -20 -20 -13 0 -20 7 -20 20 0 13 7 20 20 20\\n13 0 20 -7 20 -20z m50 0 c0 -13 -7 -20 -20 -20 -13 0 -20 7 -20 20 0 13 7 20\\n20 20 13 0 20 -7 20 -20z m50 0 c0 -13 -7 -20 -20 -20 -13 0 -20 7 -20 20 0\\n13 7 20 20 20 13 0 20 -7 20 -20z\\"/>\\n</g>\\n</svg>\\n");\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./icons/websparktable.svg?')},"./js/ckeditor5_plugins/websparkPlugin/src/tablecellwsproperties/icons/table-cell-properties.svg":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg viewBox=\\"0 0 20 20\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"m11.105 18-.17 1H2.5A1.5 1.5 0 0 1 1 17.5v-15A1.5 1.5 0 0 1 2.5 1h15A1.5 1.5 0 0 1 19 2.5v9.975l-.85-.124-.15-.302V8h-5v4h.021l-.172.351-1.916.28-.151.027c-.287.063-.54.182-.755.341L8 13v5h3.105zM2 12h5V8H2v4zm10-4H8v4h4V8zM2 2v5h5V2H2zm0 16h5v-5H2v5zM13 7h5V2h-5v5zM8 2v5h4V2H8z\\" opacity=\\".6\\"/><path d=\\"m15.5 11.5 1.323 2.68 2.957.43-2.14 2.085.505 2.946L15.5 18.25l-2.645 1.39.505-2.945-2.14-2.086 2.957-.43L15.5 11.5zM13 6a1 1 0 0 1 1 1v3.172a2.047 2.047 0 0 0-.293.443l-.858 1.736-1.916.28-.151.027A1.976 1.976 0 0 0 9.315 14H7a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1h6zm-1 2H8v4h4V8z\\"/></svg>");\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./js/ckeditor5_plugins/websparkPlugin/src/tablecellwsproperties/icons/table-cell-properties.svg?')},"./node_modules/@ckeditor/ckeditor5-table/theme/icons/table-cell-properties.svg":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg viewBox=\\"0 0 20 20\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"m11.105 18-.17 1H2.5A1.5 1.5 0 0 1 1 17.5v-15A1.5 1.5 0 0 1 2.5 1h15A1.5 1.5 0 0 1 19 2.5v9.975l-.85-.124-.15-.302V8h-5v4h.021l-.172.351-1.916.28-.151.027c-.287.063-.54.182-.755.341L8 13v5h3.105zM2 12h5V8H2v4zm10-4H8v4h4V8zM2 2v5h5V2H2zm0 16h5v-5H2v5zM13 7h5V2h-5v5zM8 2v5h4V2H8z\\" opacity=\\".6\\"/><path d=\\"m15.5 11.5 1.323 2.68 2.957.43-2.14 2.085.505 2.946L15.5 18.25l-2.645 1.39.505-2.945-2.14-2.086 2.957-.43L15.5 11.5zM13 6a1 1 0 0 1 1 1v3.172a2.047 2.047 0 0 0-.293.443l-.858 1.736-1.916.28-.151.027A1.976 1.976 0 0 0 9.315 14H7a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1h6zm-1 2H8v4h4V8z\\"/></svg>");\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/theme/icons/table-cell-properties.svg?')},"./node_modules/@ckeditor/ckeditor5-table/theme/icons/table-column.svg":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg viewBox=\\"0 0 20 20\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M2.5 1h15A1.5 1.5 0 0 1 19 2.5v15a1.5 1.5 0 0 1-1.5 1.5h-15A1.5 1.5 0 0 1 1 17.5v-15A1.5 1.5 0 0 1 2.5 1zM2 2v16h16V2H2z\\" opacity=\\".6\\"/><path d=\\"M18 7v1H2V7h16zm0 5v1H2v-1h16z\\" opacity=\\".6\\"/><path d=\\"M14 1v18a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V1a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1zm-2 1H8v4h4V2zm0 6H8v4h4V8zm0 6H8v4h4v-4z\\"/></svg>");\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/theme/icons/table-column.svg?')},"./node_modules/@ckeditor/ckeditor5-table/theme/icons/table-merge-cell.svg":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg viewBox=\\"0 0 20 20\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M2.5 1h15A1.5 1.5 0 0 1 19 2.5v15a1.5 1.5 0 0 1-1.5 1.5h-15A1.5 1.5 0 0 1 1 17.5v-15A1.5 1.5 0 0 1 2.5 1zM2 2v16h16V2H2z\\" opacity=\\".6\\"/><path d=\\"M7 2h1v16H7V2zm5 0h1v7h-1V2zm6 5v1H2V7h16zM8 12v1H2v-1h6z\\" opacity=\\".6\\"/><path d=\\"M7 7h12a1 1 0 0 1 1 1v11a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V8a1 1 0 0 1 1-1zm1 2v9h10V9H8z\\"/></svg>");\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/theme/icons/table-merge-cell.svg?')},"./node_modules/@ckeditor/ckeditor5-table/theme/icons/table-properties.svg":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg viewBox=\\"0 0 20 20\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M8 2v5h4V2h1v5h5v1h-5v4h.021l-.172.351-1.916.28-.151.027c-.287.063-.54.182-.755.341L8 13v5H7v-5H2v-1h5V8H2V7h5V2h1zm4 6H8v4h4V8z\\" opacity=\\".6\\"/><path d=\\"m15.5 11.5 1.323 2.68 2.957.43-2.14 2.085.505 2.946L15.5 18.25l-2.645 1.39.505-2.945-2.14-2.086 2.957-.43L15.5 11.5zM17 1a2 2 0 0 1 2 2v9.475l-.85-.124-.857-1.736a2.048 2.048 0 0 0-.292-.44L17 3H3v14h7.808l.402.392L10.935 19H3a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h14z\\"/></svg>");\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/theme/icons/table-properties.svg?')},"./node_modules/@ckeditor/ckeditor5-table/theme/icons/table-row.svg":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg viewBox=\\"0 0 20 20\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M2.5 1h15A1.5 1.5 0 0 1 19 2.5v15a1.5 1.5 0 0 1-1.5 1.5h-15A1.5 1.5 0 0 1 1 17.5v-15A1.5 1.5 0 0 1 2.5 1zM2 2v16h16V2H2z\\" opacity=\\".6\\"/><path d=\\"M7 2h1v16H7V2zm5 0h1v16h-1V2z\\" opacity=\\".6\\"/><path d=\\"M1 6h18a1 1 0 0 1 1 1v6a1 1 0 0 1-1 1H1a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1zm1 2v4h4V8H2zm6 0v4h4V8H8zm6 0v4h4V8h-4z\\"/></svg>");\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/theme/icons/table-row.svg?')},"./node_modules/@ckeditor/ckeditor5-table/theme/icons/table.svg":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg viewBox=\\"0 0 20 20\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M3 6v3h4V6H3zm0 4v3h4v-3H3zm0 4v3h4v-3H3zm5 3h4v-3H8v3zm5 0h4v-3h-4v3zm4-4v-3h-4v3h4zm0-4V6h-4v3h4zm1.5 8a1.5 1.5 0 0 1-1.5 1.5H3A1.5 1.5 0 0 1 1.5 17V4c.222-.863 1.068-1.5 2-1.5h13c.932 0 1.778.637 2 1.5v13zM12 13v-3H8v3h4zm0-4V6H8v3h4z\\"/></svg>");\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/theme/icons/table.svg?')},"./node_modules/@ckeditor/ckeditor5-table/theme/colorinput.css":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");\n/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _css_loader_dist_cjs_js_colorinput_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./colorinput.css */ "./node_modules/css-loader/dist/cjs.js!./node_modules/@ckeditor/ckeditor5-table/theme/colorinput.css");\n\n            \n\nvar options = {};\n\noptions.insert = "head";\noptions.singleton = false;\n\nvar update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_colorinput_css__WEBPACK_IMPORTED_MODULE_1__["default"], options);\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_colorinput_css__WEBPACK_IMPORTED_MODULE_1__["default"].locals || {});\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/theme/colorinput.css?')},"./node_modules/@ckeditor/ckeditor5-table/theme/form.css":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");\n/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _css_loader_dist_cjs_js_form_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./form.css */ "./node_modules/css-loader/dist/cjs.js!./node_modules/@ckeditor/ckeditor5-table/theme/form.css");\n\n            \n\nvar options = {};\n\noptions.insert = "head";\noptions.singleton = false;\n\nvar update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_form_css__WEBPACK_IMPORTED_MODULE_1__["default"], options);\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_form_css__WEBPACK_IMPORTED_MODULE_1__["default"].locals || {});\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/theme/form.css?')},"./node_modules/@ckeditor/ckeditor5-table/theme/formrow.css":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");\n/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _css_loader_dist_cjs_js_formrow_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./formrow.css */ "./node_modules/css-loader/dist/cjs.js!./node_modules/@ckeditor/ckeditor5-table/theme/formrow.css");\n\n            \n\nvar options = {};\n\noptions.insert = "head";\noptions.singleton = false;\n\nvar update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_formrow_css__WEBPACK_IMPORTED_MODULE_1__["default"], options);\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_formrow_css__WEBPACK_IMPORTED_MODULE_1__["default"].locals || {});\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/theme/formrow.css?')},"./node_modules/@ckeditor/ckeditor5-table/theme/inserttable.css":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");\n/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _css_loader_dist_cjs_js_inserttable_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./inserttable.css */ "./node_modules/css-loader/dist/cjs.js!./node_modules/@ckeditor/ckeditor5-table/theme/inserttable.css");\n\n            \n\nvar options = {};\n\noptions.insert = "head";\noptions.singleton = false;\n\nvar update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_inserttable_css__WEBPACK_IMPORTED_MODULE_1__["default"], options);\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_inserttable_css__WEBPACK_IMPORTED_MODULE_1__["default"].locals || {});\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/theme/inserttable.css?')},"./node_modules/@ckeditor/ckeditor5-table/theme/table.css":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");\n/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _css_loader_dist_cjs_js_table_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./table.css */ "./node_modules/css-loader/dist/cjs.js!./node_modules/@ckeditor/ckeditor5-table/theme/table.css");\n\n            \n\nvar options = {};\n\noptions.insert = "head";\noptions.singleton = false;\n\nvar update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_table_css__WEBPACK_IMPORTED_MODULE_1__["default"], options);\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_table_css__WEBPACK_IMPORTED_MODULE_1__["default"].locals || {});\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/theme/table.css?')},"./node_modules/@ckeditor/ckeditor5-table/theme/tablecaption.css":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");\n/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _css_loader_dist_cjs_js_tablecaption_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./tablecaption.css */ "./node_modules/css-loader/dist/cjs.js!./node_modules/@ckeditor/ckeditor5-table/theme/tablecaption.css");\n\n            \n\nvar options = {};\n\noptions.insert = "head";\noptions.singleton = false;\n\nvar update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_tablecaption_css__WEBPACK_IMPORTED_MODULE_1__["default"], options);\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_tablecaption_css__WEBPACK_IMPORTED_MODULE_1__["default"].locals || {});\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/theme/tablecaption.css?')},"./node_modules/@ckeditor/ckeditor5-table/theme/tablecellproperties.css":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");\n/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _css_loader_dist_cjs_js_tablecellproperties_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./tablecellproperties.css */ "./node_modules/css-loader/dist/cjs.js!./node_modules/@ckeditor/ckeditor5-table/theme/tablecellproperties.css");\n\n            \n\nvar options = {};\n\noptions.insert = "head";\noptions.singleton = false;\n\nvar update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_tablecellproperties_css__WEBPACK_IMPORTED_MODULE_1__["default"], options);\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_tablecellproperties_css__WEBPACK_IMPORTED_MODULE_1__["default"].locals || {});\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/theme/tablecellproperties.css?')},"./node_modules/@ckeditor/ckeditor5-table/theme/tablecolumnresize.css":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");\n/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _css_loader_dist_cjs_js_tablecolumnresize_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./tablecolumnresize.css */ "./node_modules/css-loader/dist/cjs.js!./node_modules/@ckeditor/ckeditor5-table/theme/tablecolumnresize.css");\n\n            \n\nvar options = {};\n\noptions.insert = "head";\noptions.singleton = false;\n\nvar update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_tablecolumnresize_css__WEBPACK_IMPORTED_MODULE_1__["default"], options);\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_tablecolumnresize_css__WEBPACK_IMPORTED_MODULE_1__["default"].locals || {});\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/theme/tablecolumnresize.css?')},"./node_modules/@ckeditor/ckeditor5-table/theme/tableediting.css":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");\n/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _css_loader_dist_cjs_js_tableediting_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./tableediting.css */ "./node_modules/css-loader/dist/cjs.js!./node_modules/@ckeditor/ckeditor5-table/theme/tableediting.css");\n\n            \n\nvar options = {};\n\noptions.insert = "head";\noptions.singleton = false;\n\nvar update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_tableediting_css__WEBPACK_IMPORTED_MODULE_1__["default"], options);\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_tableediting_css__WEBPACK_IMPORTED_MODULE_1__["default"].locals || {});\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/theme/tableediting.css?')},"./node_modules/@ckeditor/ckeditor5-table/theme/tableform.css":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");\n/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _css_loader_dist_cjs_js_tableform_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./tableform.css */ "./node_modules/css-loader/dist/cjs.js!./node_modules/@ckeditor/ckeditor5-table/theme/tableform.css");\n\n            \n\nvar options = {};\n\noptions.insert = "head";\noptions.singleton = false;\n\nvar update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_tableform_css__WEBPACK_IMPORTED_MODULE_1__["default"], options);\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_tableform_css__WEBPACK_IMPORTED_MODULE_1__["default"].locals || {});\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/theme/tableform.css?')},"./node_modules/@ckeditor/ckeditor5-table/theme/tableproperties.css":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");\n/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _css_loader_dist_cjs_js_tableproperties_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./tableproperties.css */ "./node_modules/css-loader/dist/cjs.js!./node_modules/@ckeditor/ckeditor5-table/theme/tableproperties.css");\n\n            \n\nvar options = {};\n\noptions.insert = "head";\noptions.singleton = false;\n\nvar update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_tableproperties_css__WEBPACK_IMPORTED_MODULE_1__["default"], options);\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_tableproperties_css__WEBPACK_IMPORTED_MODULE_1__["default"].locals || {});\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/theme/tableproperties.css?')},"./node_modules/@ckeditor/ckeditor5-table/theme/tableselection.css":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");\n/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _css_loader_dist_cjs_js_tableselection_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./tableselection.css */ "./node_modules/css-loader/dist/cjs.js!./node_modules/@ckeditor/ckeditor5-table/theme/tableselection.css");\n\n            \n\nvar options = {};\n\noptions.insert = "head";\noptions.singleton = false;\n\nvar update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_tableselection_css__WEBPACK_IMPORTED_MODULE_1__["default"], options);\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_tableselection_css__WEBPACK_IMPORTED_MODULE_1__["default"].locals || {});\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/@ckeditor/ckeditor5-table/theme/tableselection.css?')},"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar isOldIE = function isOldIE() {\n  var memo;\n  return function memorize() {\n    if (typeof memo === 'undefined') {\n      // Test for IE <= 9 as proposed by Browserhacks\n      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n      // Tests for existence of standard globals is to allow style-loader\n      // to operate correctly into non-standard environments\n      // @see https://github.com/webpack-contrib/style-loader/issues/177\n      memo = Boolean(window && document && document.all && !window.atob);\n    }\n\n    return memo;\n  };\n}();\n\nvar getTarget = function getTarget() {\n  var memo = {};\n  return function memorize(target) {\n    if (typeof memo[target] === 'undefined') {\n      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself\n\n      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n        try {\n          // This will throw an exception if access to iframe is blocked\n          // due to cross-origin restrictions\n          styleTarget = styleTarget.contentDocument.head;\n        } catch (e) {\n          // istanbul ignore next\n          styleTarget = null;\n        }\n      }\n\n      memo[target] = styleTarget;\n    }\n\n    return memo[target];\n  };\n}();\n\nvar stylesInDom = [];\n\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n\n  for (var i = 0; i < stylesInDom.length; i++) {\n    if (stylesInDom[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n\n  return result;\n}\n\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var index = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3]\n    };\n\n    if (index !== -1) {\n      stylesInDom[index].references++;\n      stylesInDom[index].updater(obj);\n    } else {\n      stylesInDom.push({\n        identifier: identifier,\n        updater: addStyle(obj, options),\n        references: 1\n      });\n    }\n\n    identifiers.push(identifier);\n  }\n\n  return identifiers;\n}\n\nfunction insertStyleElement(options) {\n  var style = document.createElement('style');\n  var attributes = options.attributes || {};\n\n  if (typeof attributes.nonce === 'undefined') {\n    var nonce =  true ? __webpack_require__.nc : 0;\n\n    if (nonce) {\n      attributes.nonce = nonce;\n    }\n  }\n\n  Object.keys(attributes).forEach(function (key) {\n    style.setAttribute(key, attributes[key]);\n  });\n\n  if (typeof options.insert === 'function') {\n    options.insert(style);\n  } else {\n    var target = getTarget(options.insert || 'head');\n\n    if (!target) {\n      throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n    }\n\n    target.appendChild(style);\n  }\n\n  return style;\n}\n\nfunction removeStyleElement(style) {\n  // istanbul ignore if\n  if (style.parentNode === null) {\n    return false;\n  }\n\n  style.parentNode.removeChild(style);\n}\n/* istanbul ignore next  */\n\n\nvar replaceText = function replaceText() {\n  var textStore = [];\n  return function replace(index, replacement) {\n    textStore[index] = replacement;\n    return textStore.filter(Boolean).join('\\n');\n  };\n}();\n\nfunction applyToSingletonTag(style, index, remove, obj) {\n  var css = remove ? '' : obj.media ? \"@media \".concat(obj.media, \" {\").concat(obj.css, \"}\") : obj.css; // For old IE\n\n  /* istanbul ignore if  */\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = replaceText(index, css);\n  } else {\n    var cssNode = document.createTextNode(css);\n    var childNodes = style.childNodes;\n\n    if (childNodes[index]) {\n      style.removeChild(childNodes[index]);\n    }\n\n    if (childNodes.length) {\n      style.insertBefore(cssNode, childNodes[index]);\n    } else {\n      style.appendChild(cssNode);\n    }\n  }\n}\n\nfunction applyToTag(style, options, obj) {\n  var css = obj.css;\n  var media = obj.media;\n  var sourceMap = obj.sourceMap;\n\n  if (media) {\n    style.setAttribute('media', media);\n  } else {\n    style.removeAttribute('media');\n  }\n\n  if (sourceMap && typeof btoa !== 'undefined') {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  } // For old IE\n\n  /* istanbul ignore if  */\n\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    while (style.firstChild) {\n      style.removeChild(style.firstChild);\n    }\n\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar singleton = null;\nvar singletonCounter = 0;\n\nfunction addStyle(obj, options) {\n  var style;\n  var update;\n  var remove;\n\n  if (options.singleton) {\n    var styleIndex = singletonCounter++;\n    style = singleton || (singleton = insertStyleElement(options));\n    update = applyToSingletonTag.bind(null, style, styleIndex, false);\n    remove = applyToSingletonTag.bind(null, style, styleIndex, true);\n  } else {\n    style = insertStyleElement(options);\n    update = applyToTag.bind(null, style, options);\n\n    remove = function remove() {\n      removeStyleElement(style);\n    };\n  }\n\n  update(obj);\n  return function updateStyle(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {\n        return;\n      }\n\n      update(obj = newObj);\n    } else {\n      remove();\n    }\n  };\n}\n\nmodule.exports = function (list, options) {\n  options = options || {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n  // tags it will allow on a page\n\n  if (!options.singleton && typeof options.singleton !== 'boolean') {\n    options.singleton = isOldIE();\n  }\n\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n\n    if (Object.prototype.toString.call(newList) !== '[object Array]') {\n      return;\n    }\n\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDom[index].references--;\n    }\n\n    var newLastIdentifiers = modulesToDom(newList, options);\n\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n\n      var _index = getIndexByIdentifier(_identifier);\n\n      if (stylesInDom[_index].references === 0) {\n        stylesInDom[_index].updater();\n\n        stylesInDom.splice(_index, 1);\n      }\n    }\n\n    lastIdentifiers = newLastIdentifiers;\n  };\n};\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js?")},"ckeditor5/src/core.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/core.js");\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/delegated_./core.js_from_dll-reference_CKEditor5.dll?')},"ckeditor5/src/engine.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/engine.js");\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/delegated_./engine.js_from_dll-reference_CKEditor5.dll?')},"ckeditor5/src/ui.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/ui.js");\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/delegated_./ui.js_from_dll-reference_CKEditor5.dll?')},"ckeditor5/src/utils.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/utils.js");\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/delegated_./utils.js_from_dll-reference_CKEditor5.dll?')},"ckeditor5/src/widget.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/widget.js");\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/delegated_./widget.js_from_dll-reference_CKEditor5.dll?')},"dll-reference CKEditor5.dll":e=>{"use strict";e.exports=CKEditor5.dll},"./node_modules/lodash-es/_DataView.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _getNative_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getNative.js */ "./node_modules/lodash-es/_getNative.js");\n/* harmony import */ var _root_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_root.js */ "./node_modules/lodash-es/_root.js");\n\n\n\n/* Built-in method references that are verified to be native. */\nvar DataView = (0,_getNative_js__WEBPACK_IMPORTED_MODULE_0__["default"])(_root_js__WEBPACK_IMPORTED_MODULE_1__["default"], \'DataView\');\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (DataView);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_DataView.js?')},"./node_modules/lodash-es/_Hash.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _hashClear_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_hashClear.js */ "./node_modules/lodash-es/_hashClear.js");\n/* harmony import */ var _hashDelete_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_hashDelete.js */ "./node_modules/lodash-es/_hashDelete.js");\n/* harmony import */ var _hashGet_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_hashGet.js */ "./node_modules/lodash-es/_hashGet.js");\n/* harmony import */ var _hashHas_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_hashHas.js */ "./node_modules/lodash-es/_hashHas.js");\n/* harmony import */ var _hashSet_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./_hashSet.js */ "./node_modules/lodash-es/_hashSet.js");\n\n\n\n\n\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = _hashClear_js__WEBPACK_IMPORTED_MODULE_0__["default"];\nHash.prototype[\'delete\'] = _hashDelete_js__WEBPACK_IMPORTED_MODULE_1__["default"];\nHash.prototype.get = _hashGet_js__WEBPACK_IMPORTED_MODULE_2__["default"];\nHash.prototype.has = _hashHas_js__WEBPACK_IMPORTED_MODULE_3__["default"];\nHash.prototype.set = _hashSet_js__WEBPACK_IMPORTED_MODULE_4__["default"];\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Hash);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_Hash.js?')},"./node_modules/lodash-es/_ListCache.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _listCacheClear_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_listCacheClear.js */ "./node_modules/lodash-es/_listCacheClear.js");\n/* harmony import */ var _listCacheDelete_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_listCacheDelete.js */ "./node_modules/lodash-es/_listCacheDelete.js");\n/* harmony import */ var _listCacheGet_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_listCacheGet.js */ "./node_modules/lodash-es/_listCacheGet.js");\n/* harmony import */ var _listCacheHas_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_listCacheHas.js */ "./node_modules/lodash-es/_listCacheHas.js");\n/* harmony import */ var _listCacheSet_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./_listCacheSet.js */ "./node_modules/lodash-es/_listCacheSet.js");\n\n\n\n\n\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = _listCacheClear_js__WEBPACK_IMPORTED_MODULE_0__["default"];\nListCache.prototype[\'delete\'] = _listCacheDelete_js__WEBPACK_IMPORTED_MODULE_1__["default"];\nListCache.prototype.get = _listCacheGet_js__WEBPACK_IMPORTED_MODULE_2__["default"];\nListCache.prototype.has = _listCacheHas_js__WEBPACK_IMPORTED_MODULE_3__["default"];\nListCache.prototype.set = _listCacheSet_js__WEBPACK_IMPORTED_MODULE_4__["default"];\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ListCache);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_ListCache.js?')},"./node_modules/lodash-es/_Map.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _getNative_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getNative.js */ "./node_modules/lodash-es/_getNative.js");\n/* harmony import */ var _root_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_root.js */ "./node_modules/lodash-es/_root.js");\n\n\n\n/* Built-in method references that are verified to be native. */\nvar Map = (0,_getNative_js__WEBPACK_IMPORTED_MODULE_0__["default"])(_root_js__WEBPACK_IMPORTED_MODULE_1__["default"], \'Map\');\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Map);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_Map.js?')},"./node_modules/lodash-es/_MapCache.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _mapCacheClear_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_mapCacheClear.js */ "./node_modules/lodash-es/_mapCacheClear.js");\n/* harmony import */ var _mapCacheDelete_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_mapCacheDelete.js */ "./node_modules/lodash-es/_mapCacheDelete.js");\n/* harmony import */ var _mapCacheGet_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_mapCacheGet.js */ "./node_modules/lodash-es/_mapCacheGet.js");\n/* harmony import */ var _mapCacheHas_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_mapCacheHas.js */ "./node_modules/lodash-es/_mapCacheHas.js");\n/* harmony import */ var _mapCacheSet_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./_mapCacheSet.js */ "./node_modules/lodash-es/_mapCacheSet.js");\n\n\n\n\n\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = _mapCacheClear_js__WEBPACK_IMPORTED_MODULE_0__["default"];\nMapCache.prototype[\'delete\'] = _mapCacheDelete_js__WEBPACK_IMPORTED_MODULE_1__["default"];\nMapCache.prototype.get = _mapCacheGet_js__WEBPACK_IMPORTED_MODULE_2__["default"];\nMapCache.prototype.has = _mapCacheHas_js__WEBPACK_IMPORTED_MODULE_3__["default"];\nMapCache.prototype.set = _mapCacheSet_js__WEBPACK_IMPORTED_MODULE_4__["default"];\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MapCache);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_MapCache.js?')},"./node_modules/lodash-es/_Promise.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _getNative_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getNative.js */ "./node_modules/lodash-es/_getNative.js");\n/* harmony import */ var _root_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_root.js */ "./node_modules/lodash-es/_root.js");\n\n\n\n/* Built-in method references that are verified to be native. */\nvar Promise = (0,_getNative_js__WEBPACK_IMPORTED_MODULE_0__["default"])(_root_js__WEBPACK_IMPORTED_MODULE_1__["default"], \'Promise\');\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Promise);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_Promise.js?')},"./node_modules/lodash-es/_Set.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _getNative_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getNative.js */ "./node_modules/lodash-es/_getNative.js");\n/* harmony import */ var _root_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_root.js */ "./node_modules/lodash-es/_root.js");\n\n\n\n/* Built-in method references that are verified to be native. */\nvar Set = (0,_getNative_js__WEBPACK_IMPORTED_MODULE_0__["default"])(_root_js__WEBPACK_IMPORTED_MODULE_1__["default"], \'Set\');\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Set);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_Set.js?')},"./node_modules/lodash-es/_SetCache.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _MapCache_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_MapCache.js */ "./node_modules/lodash-es/_MapCache.js");\n/* harmony import */ var _setCacheAdd_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_setCacheAdd.js */ "./node_modules/lodash-es/_setCacheAdd.js");\n/* harmony import */ var _setCacheHas_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_setCacheHas.js */ "./node_modules/lodash-es/_setCacheHas.js");\n\n\n\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new _MapCache_js__WEBPACK_IMPORTED_MODULE_0__["default"];\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = _setCacheAdd_js__WEBPACK_IMPORTED_MODULE_1__["default"];\nSetCache.prototype.has = _setCacheHas_js__WEBPACK_IMPORTED_MODULE_2__["default"];\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SetCache);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_SetCache.js?')},"./node_modules/lodash-es/_Stack.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _ListCache_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_ListCache.js */ "./node_modules/lodash-es/_ListCache.js");\n/* harmony import */ var _stackClear_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_stackClear.js */ "./node_modules/lodash-es/_stackClear.js");\n/* harmony import */ var _stackDelete_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_stackDelete.js */ "./node_modules/lodash-es/_stackDelete.js");\n/* harmony import */ var _stackGet_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_stackGet.js */ "./node_modules/lodash-es/_stackGet.js");\n/* harmony import */ var _stackHas_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./_stackHas.js */ "./node_modules/lodash-es/_stackHas.js");\n/* harmony import */ var _stackSet_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./_stackSet.js */ "./node_modules/lodash-es/_stackSet.js");\n\n\n\n\n\n\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new _ListCache_js__WEBPACK_IMPORTED_MODULE_0__["default"](entries);\n  this.size = data.size;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = _stackClear_js__WEBPACK_IMPORTED_MODULE_1__["default"];\nStack.prototype[\'delete\'] = _stackDelete_js__WEBPACK_IMPORTED_MODULE_2__["default"];\nStack.prototype.get = _stackGet_js__WEBPACK_IMPORTED_MODULE_3__["default"];\nStack.prototype.has = _stackHas_js__WEBPACK_IMPORTED_MODULE_4__["default"];\nStack.prototype.set = _stackSet_js__WEBPACK_IMPORTED_MODULE_5__["default"];\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Stack);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_Stack.js?')},"./node_modules/lodash-es/_Symbol.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _root_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_root.js */ "./node_modules/lodash-es/_root.js");\n\n\n/** Built-in value references. */\nvar Symbol = _root_js__WEBPACK_IMPORTED_MODULE_0__["default"].Symbol;\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Symbol);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_Symbol.js?')},"./node_modules/lodash-es/_Uint8Array.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _root_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_root.js */ "./node_modules/lodash-es/_root.js");\n\n\n/** Built-in value references. */\nvar Uint8Array = _root_js__WEBPACK_IMPORTED_MODULE_0__["default"].Uint8Array;\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Uint8Array);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_Uint8Array.js?')},"./node_modules/lodash-es/_WeakMap.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _getNative_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getNative.js */ "./node_modules/lodash-es/_getNative.js");\n/* harmony import */ var _root_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_root.js */ "./node_modules/lodash-es/_root.js");\n\n\n\n/* Built-in method references that are verified to be native. */\nvar WeakMap = (0,_getNative_js__WEBPACK_IMPORTED_MODULE_0__["default"])(_root_js__WEBPACK_IMPORTED_MODULE_1__["default"], \'WeakMap\');\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (WeakMap);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_WeakMap.js?')},"./node_modules/lodash-es/_arrayFilter.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (arrayFilter);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_arrayFilter.js?')},"./node_modules/lodash-es/_arrayLikeKeys.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _baseTimes_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./_baseTimes.js */ "./node_modules/lodash-es/_baseTimes.js");\n/* harmony import */ var _isArguments_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isArguments.js */ "./node_modules/lodash-es/isArguments.js");\n/* harmony import */ var _isArray_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isArray.js */ "./node_modules/lodash-es/isArray.js");\n/* harmony import */ var _isBuffer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./isBuffer.js */ "./node_modules/lodash-es/isBuffer.js");\n/* harmony import */ var _isIndex_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./_isIndex.js */ "./node_modules/lodash-es/_isIndex.js");\n/* harmony import */ var _isTypedArray_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./isTypedArray.js */ "./node_modules/lodash-es/isTypedArray.js");\n\n\n\n\n\n\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = (0,_isArray_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value),\n      isArg = !isArr && (0,_isArguments_js__WEBPACK_IMPORTED_MODULE_1__["default"])(value),\n      isBuff = !isArr && !isArg && (0,_isBuffer_js__WEBPACK_IMPORTED_MODULE_2__["default"])(value),\n      isType = !isArr && !isArg && !isBuff && (0,_isTypedArray_js__WEBPACK_IMPORTED_MODULE_3__["default"])(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? (0,_baseTimes_js__WEBPACK_IMPORTED_MODULE_4__["default"])(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == \'length\' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == \'offset\' || key == \'parent\')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == \'buffer\' || key == \'byteLength\' || key == \'byteOffset\')) ||\n           // Skip index properties.\n           (0,_isIndex_js__WEBPACK_IMPORTED_MODULE_5__["default"])(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (arrayLikeKeys);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_arrayLikeKeys.js?')},"./node_modules/lodash-es/_arrayPush.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (arrayPush);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_arrayPush.js?')},"./node_modules/lodash-es/_arraySome.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (arraySome);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_arraySome.js?')},"./node_modules/lodash-es/_assocIndexOf.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _eq_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./eq.js */ "./node_modules/lodash-es/eq.js");\n\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if ((0,_eq_js__WEBPACK_IMPORTED_MODULE_0__["default"])(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (assocIndexOf);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_assocIndexOf.js?')},"./node_modules/lodash-es/_baseGetAllKeys.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _arrayPush_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_arrayPush.js */ "./node_modules/lodash-es/_arrayPush.js");\n/* harmony import */ var _isArray_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isArray.js */ "./node_modules/lodash-es/isArray.js");\n\n\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return (0,_isArray_js__WEBPACK_IMPORTED_MODULE_0__["default"])(object) ? result : (0,_arrayPush_js__WEBPACK_IMPORTED_MODULE_1__["default"])(result, symbolsFunc(object));\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseGetAllKeys);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_baseGetAllKeys.js?')},"./node_modules/lodash-es/_baseGetTag.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Symbol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_Symbol.js */ "./node_modules/lodash-es/_Symbol.js");\n/* harmony import */ var _getRawTag_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_getRawTag.js */ "./node_modules/lodash-es/_getRawTag.js");\n/* harmony import */ var _objectToString_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_objectToString.js */ "./node_modules/lodash-es/_objectToString.js");\n\n\n\n\n/** `Object#toString` result references. */\nvar nullTag = \'[object Null]\',\n    undefinedTag = \'[object Undefined]\';\n\n/** Built-in value references. */\nvar symToStringTag = _Symbol_js__WEBPACK_IMPORTED_MODULE_0__["default"] ? _Symbol_js__WEBPACK_IMPORTED_MODULE_0__["default"].toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? (0,_getRawTag_js__WEBPACK_IMPORTED_MODULE_1__["default"])(value)\n    : (0,_objectToString_js__WEBPACK_IMPORTED_MODULE_2__["default"])(value);\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseGetTag);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_baseGetTag.js?')},"./node_modules/lodash-es/_baseIsArguments.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _baseGetTag_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseGetTag.js */ "./node_modules/lodash-es/_baseGetTag.js");\n/* harmony import */ var _isObjectLike_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isObjectLike.js */ "./node_modules/lodash-es/isObjectLike.js");\n\n\n\n/** `Object#toString` result references. */\nvar argsTag = \'[object Arguments]\';\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return (0,_isObjectLike_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value) && (0,_baseGetTag_js__WEBPACK_IMPORTED_MODULE_1__["default"])(value) == argsTag;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseIsArguments);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_baseIsArguments.js?')},"./node_modules/lodash-es/_baseIsEqual.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _baseIsEqualDeep_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseIsEqualDeep.js */ "./node_modules/lodash-es/_baseIsEqualDeep.js");\n/* harmony import */ var _isObjectLike_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isObjectLike.js */ "./node_modules/lodash-es/isObjectLike.js");\n\n\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!(0,_isObjectLike_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value) && !(0,_isObjectLike_js__WEBPACK_IMPORTED_MODULE_0__["default"])(other))) {\n    return value !== value && other !== other;\n  }\n  return (0,_baseIsEqualDeep_js__WEBPACK_IMPORTED_MODULE_1__["default"])(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseIsEqual);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_baseIsEqual.js?')},"./node_modules/lodash-es/_baseIsEqualDeep.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Stack_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_Stack.js */ "./node_modules/lodash-es/_Stack.js");\n/* harmony import */ var _equalArrays_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./_equalArrays.js */ "./node_modules/lodash-es/_equalArrays.js");\n/* harmony import */ var _equalByTag_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./_equalByTag.js */ "./node_modules/lodash-es/_equalByTag.js");\n/* harmony import */ var _equalObjects_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./_equalObjects.js */ "./node_modules/lodash-es/_equalObjects.js");\n/* harmony import */ var _getTag_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_getTag.js */ "./node_modules/lodash-es/_getTag.js");\n/* harmony import */ var _isArray_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isArray.js */ "./node_modules/lodash-es/isArray.js");\n/* harmony import */ var _isBuffer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./isBuffer.js */ "./node_modules/lodash-es/isBuffer.js");\n/* harmony import */ var _isTypedArray_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./isTypedArray.js */ "./node_modules/lodash-es/isTypedArray.js");\n\n\n\n\n\n\n\n\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** `Object#toString` result references. */\nvar argsTag = \'[object Arguments]\',\n    arrayTag = \'[object Array]\',\n    objectTag = \'[object Object]\';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = (0,_isArray_js__WEBPACK_IMPORTED_MODULE_0__["default"])(object),\n      othIsArr = (0,_isArray_js__WEBPACK_IMPORTED_MODULE_0__["default"])(other),\n      objTag = objIsArr ? arrayTag : (0,_getTag_js__WEBPACK_IMPORTED_MODULE_1__["default"])(object),\n      othTag = othIsArr ? arrayTag : (0,_getTag_js__WEBPACK_IMPORTED_MODULE_1__["default"])(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && (0,_isBuffer_js__WEBPACK_IMPORTED_MODULE_2__["default"])(object)) {\n    if (!(0,_isBuffer_js__WEBPACK_IMPORTED_MODULE_2__["default"])(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new _Stack_js__WEBPACK_IMPORTED_MODULE_3__["default"]);\n    return (objIsArr || (0,_isTypedArray_js__WEBPACK_IMPORTED_MODULE_4__["default"])(object))\n      ? (0,_equalArrays_js__WEBPACK_IMPORTED_MODULE_5__["default"])(object, other, bitmask, customizer, equalFunc, stack)\n      : (0,_equalByTag_js__WEBPACK_IMPORTED_MODULE_6__["default"])(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, \'__wrapped__\'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, \'__wrapped__\');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new _Stack_js__WEBPACK_IMPORTED_MODULE_3__["default"]);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new _Stack_js__WEBPACK_IMPORTED_MODULE_3__["default"]);\n  return (0,_equalObjects_js__WEBPACK_IMPORTED_MODULE_7__["default"])(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseIsEqualDeep);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_baseIsEqualDeep.js?')},"./node_modules/lodash-es/_baseIsNative.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _isFunction_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./isFunction.js */ "./node_modules/lodash-es/isFunction.js");\n/* harmony import */ var _isMasked_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_isMasked.js */ "./node_modules/lodash-es/_isMasked.js");\n/* harmony import */ var _isObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isObject.js */ "./node_modules/lodash-es/isObject.js");\n/* harmony import */ var _toSource_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_toSource.js */ "./node_modules/lodash-es/_toSource.js");\n\n\n\n\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp(\'^\' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, \'\\\\$&\')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, \'$1.*?\') + \'$\'\n);\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!(0,_isObject_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value) || (0,_isMasked_js__WEBPACK_IMPORTED_MODULE_1__["default"])(value)) {\n    return false;\n  }\n  var pattern = (0,_isFunction_js__WEBPACK_IMPORTED_MODULE_2__["default"])(value) ? reIsNative : reIsHostCtor;\n  return pattern.test((0,_toSource_js__WEBPACK_IMPORTED_MODULE_3__["default"])(value));\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseIsNative);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_baseIsNative.js?')},"./node_modules/lodash-es/_baseIsTypedArray.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _baseGetTag_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_baseGetTag.js */ \"./node_modules/lodash-es/_baseGetTag.js\");\n/* harmony import */ var _isLength_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isLength.js */ \"./node_modules/lodash-es/isLength.js\");\n/* harmony import */ var _isObjectLike_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isObjectLike.js */ \"./node_modules/lodash-es/isObjectLike.js\");\n\n\n\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return (0,_isObjectLike_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(value) &&\n    (0,_isLength_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(value.length) && !!typedArrayTags[(0,_baseGetTag_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(value)];\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseIsTypedArray);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_baseIsTypedArray.js?")},"./node_modules/lodash-es/_baseKeys.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _isPrototype_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_isPrototype.js */ "./node_modules/lodash-es/_isPrototype.js");\n/* harmony import */ var _nativeKeys_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_nativeKeys.js */ "./node_modules/lodash-es/_nativeKeys.js");\n\n\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keys` which doesn\'t treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!(0,_isPrototype_js__WEBPACK_IMPORTED_MODULE_0__["default"])(object)) {\n    return (0,_nativeKeys_js__WEBPACK_IMPORTED_MODULE_1__["default"])(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != \'constructor\') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseKeys);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_baseKeys.js?')},"./node_modules/lodash-es/_baseTimes.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseTimes);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_baseTimes.js?')},"./node_modules/lodash-es/_baseTrim.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _trimmedEndIndex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_trimmedEndIndex.js */ "./node_modules/lodash-es/_trimmedEndIndex.js");\n\n\n/** Used to match leading whitespace. */\nvar reTrimStart = /^\\s+/;\n\n/**\n * The base implementation of `_.trim`.\n *\n * @private\n * @param {string} string The string to trim.\n * @returns {string} Returns the trimmed string.\n */\nfunction baseTrim(string) {\n  return string\n    ? string.slice(0, (0,_trimmedEndIndex_js__WEBPACK_IMPORTED_MODULE_0__["default"])(string) + 1).replace(reTrimStart, \'\')\n    : string;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseTrim);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_baseTrim.js?')},"./node_modules/lodash-es/_baseUnary.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseUnary);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_baseUnary.js?')},"./node_modules/lodash-es/_cacheHas.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (cacheHas);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_cacheHas.js?')},"./node_modules/lodash-es/_coreJsData.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _root_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_root.js */ "./node_modules/lodash-es/_root.js");\n\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = _root_js__WEBPACK_IMPORTED_MODULE_0__["default"][\'__core-js_shared__\'];\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (coreJsData);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_coreJsData.js?')},"./node_modules/lodash-es/_equalArrays.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _SetCache_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_SetCache.js */ "./node_modules/lodash-es/_SetCache.js");\n/* harmony import */ var _arraySome_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_arraySome.js */ "./node_modules/lodash-es/_arraySome.js");\n/* harmony import */ var _cacheHas_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_cacheHas.js */ "./node_modules/lodash-es/_cacheHas.js");\n\n\n\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Check that cyclic values are equal.\n  var arrStacked = stack.get(array);\n  var othStacked = stack.get(other);\n  if (arrStacked && othStacked) {\n    return arrStacked == other && othStacked == array;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new _SetCache_js__WEBPACK_IMPORTED_MODULE_0__["default"] : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!(0,_arraySome_js__WEBPACK_IMPORTED_MODULE_1__["default"])(other, function(othValue, othIndex) {\n            if (!(0,_cacheHas_js__WEBPACK_IMPORTED_MODULE_2__["default"])(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack[\'delete\'](array);\n  stack[\'delete\'](other);\n  return result;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (equalArrays);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_equalArrays.js?')},"./node_modules/lodash-es/_equalByTag.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Symbol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_Symbol.js */ "./node_modules/lodash-es/_Symbol.js");\n/* harmony import */ var _Uint8Array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_Uint8Array.js */ "./node_modules/lodash-es/_Uint8Array.js");\n/* harmony import */ var _eq_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./eq.js */ "./node_modules/lodash-es/eq.js");\n/* harmony import */ var _equalArrays_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./_equalArrays.js */ "./node_modules/lodash-es/_equalArrays.js");\n/* harmony import */ var _mapToArray_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_mapToArray.js */ "./node_modules/lodash-es/_mapToArray.js");\n/* harmony import */ var _setToArray_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./_setToArray.js */ "./node_modules/lodash-es/_setToArray.js");\n\n\n\n\n\n\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** `Object#toString` result references. */\nvar boolTag = \'[object Boolean]\',\n    dateTag = \'[object Date]\',\n    errorTag = \'[object Error]\',\n    mapTag = \'[object Map]\',\n    numberTag = \'[object Number]\',\n    regexpTag = \'[object RegExp]\',\n    setTag = \'[object Set]\',\n    stringTag = \'[object String]\',\n    symbolTag = \'[object Symbol]\';\n\nvar arrayBufferTag = \'[object ArrayBuffer]\',\n    dataViewTag = \'[object DataView]\';\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = _Symbol_js__WEBPACK_IMPORTED_MODULE_0__["default"] ? _Symbol_js__WEBPACK_IMPORTED_MODULE_0__["default"].prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new _Uint8Array_js__WEBPACK_IMPORTED_MODULE_1__["default"](object), new _Uint8Array_js__WEBPACK_IMPORTED_MODULE_1__["default"](other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return (0,_eq_js__WEBPACK_IMPORTED_MODULE_2__["default"])(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + \'\');\n\n    case mapTag:\n      var convert = _mapToArray_js__WEBPACK_IMPORTED_MODULE_3__["default"];\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = _setToArray_js__WEBPACK_IMPORTED_MODULE_4__["default"]);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = (0,_equalArrays_js__WEBPACK_IMPORTED_MODULE_5__["default"])(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack[\'delete\'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (equalByTag);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_equalByTag.js?')},"./node_modules/lodash-es/_equalObjects.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _getAllKeys_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getAllKeys.js */ \"./node_modules/lodash-es/_getAllKeys.js\");\n\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = (0,_getAllKeys_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(object),\n      objLength = objProps.length,\n      othProps = (0,_getAllKeys_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Check that cyclic values are equal.\n  var objStacked = stack.get(object);\n  var othStacked = stack.get(other);\n  if (objStacked && othStacked) {\n    return objStacked == other && othStacked == object;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (equalObjects);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_equalObjects.js?")},"./node_modules/lodash-es/_freeGlobal.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (freeGlobal);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_freeGlobal.js?")},"./node_modules/lodash-es/_getAllKeys.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _baseGetAllKeys_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_baseGetAllKeys.js */ "./node_modules/lodash-es/_baseGetAllKeys.js");\n/* harmony import */ var _getSymbols_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_getSymbols.js */ "./node_modules/lodash-es/_getSymbols.js");\n/* harmony import */ var _keys_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./keys.js */ "./node_modules/lodash-es/keys.js");\n\n\n\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return (0,_baseGetAllKeys_js__WEBPACK_IMPORTED_MODULE_0__["default"])(object, _keys_js__WEBPACK_IMPORTED_MODULE_1__["default"], _getSymbols_js__WEBPACK_IMPORTED_MODULE_2__["default"]);\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getAllKeys);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_getAllKeys.js?')},"./node_modules/lodash-es/_getMapData.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _isKeyable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_isKeyable.js */ \"./node_modules/lodash-es/_isKeyable.js\");\n\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return (0,_isKeyable_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getMapData);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_getMapData.js?")},"./node_modules/lodash-es/_getNative.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _baseIsNative_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseIsNative.js */ "./node_modules/lodash-es/_baseIsNative.js");\n/* harmony import */ var _getValue_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getValue.js */ "./node_modules/lodash-es/_getValue.js");\n\n\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it\'s native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = (0,_getValue_js__WEBPACK_IMPORTED_MODULE_0__["default"])(object, key);\n  return (0,_baseIsNative_js__WEBPACK_IMPORTED_MODULE_1__["default"])(value) ? value : undefined;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getNative);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_getNative.js?')},"./node_modules/lodash-es/_getRawTag.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Symbol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_Symbol.js */ "./node_modules/lodash-es/_Symbol.js");\n\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = _Symbol_js__WEBPACK_IMPORTED_MODULE_0__["default"] ? _Symbol_js__WEBPACK_IMPORTED_MODULE_0__["default"].toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getRawTag);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_getRawTag.js?')},"./node_modules/lodash-es/_getSymbols.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _arrayFilter_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_arrayFilter.js */ "./node_modules/lodash-es/_arrayFilter.js");\n/* harmony import */ var _stubArray_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stubArray.js */ "./node_modules/lodash-es/stubArray.js");\n\n\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols;\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? _stubArray_js__WEBPACK_IMPORTED_MODULE_0__["default"] : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return (0,_arrayFilter_js__WEBPACK_IMPORTED_MODULE_1__["default"])(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getSymbols);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_getSymbols.js?')},"./node_modules/lodash-es/_getTag.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _DataView_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_DataView.js */ "./node_modules/lodash-es/_DataView.js");\n/* harmony import */ var _Map_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_Map.js */ "./node_modules/lodash-es/_Map.js");\n/* harmony import */ var _Promise_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_Promise.js */ "./node_modules/lodash-es/_Promise.js");\n/* harmony import */ var _Set_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./_Set.js */ "./node_modules/lodash-es/_Set.js");\n/* harmony import */ var _WeakMap_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./_WeakMap.js */ "./node_modules/lodash-es/_WeakMap.js");\n/* harmony import */ var _baseGetTag_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./_baseGetTag.js */ "./node_modules/lodash-es/_baseGetTag.js");\n/* harmony import */ var _toSource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_toSource.js */ "./node_modules/lodash-es/_toSource.js");\n\n\n\n\n\n\n\n\n/** `Object#toString` result references. */\nvar mapTag = \'[object Map]\',\n    objectTag = \'[object Object]\',\n    promiseTag = \'[object Promise]\',\n    setTag = \'[object Set]\',\n    weakMapTag = \'[object WeakMap]\';\n\nvar dataViewTag = \'[object DataView]\';\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = (0,_toSource_js__WEBPACK_IMPORTED_MODULE_0__["default"])(_DataView_js__WEBPACK_IMPORTED_MODULE_1__["default"]),\n    mapCtorString = (0,_toSource_js__WEBPACK_IMPORTED_MODULE_0__["default"])(_Map_js__WEBPACK_IMPORTED_MODULE_2__["default"]),\n    promiseCtorString = (0,_toSource_js__WEBPACK_IMPORTED_MODULE_0__["default"])(_Promise_js__WEBPACK_IMPORTED_MODULE_3__["default"]),\n    setCtorString = (0,_toSource_js__WEBPACK_IMPORTED_MODULE_0__["default"])(_Set_js__WEBPACK_IMPORTED_MODULE_4__["default"]),\n    weakMapCtorString = (0,_toSource_js__WEBPACK_IMPORTED_MODULE_0__["default"])(_WeakMap_js__WEBPACK_IMPORTED_MODULE_5__["default"]);\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = _baseGetTag_js__WEBPACK_IMPORTED_MODULE_6__["default"];\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((_DataView_js__WEBPACK_IMPORTED_MODULE_1__["default"] && getTag(new _DataView_js__WEBPACK_IMPORTED_MODULE_1__["default"](new ArrayBuffer(1))) != dataViewTag) ||\n    (_Map_js__WEBPACK_IMPORTED_MODULE_2__["default"] && getTag(new _Map_js__WEBPACK_IMPORTED_MODULE_2__["default"]) != mapTag) ||\n    (_Promise_js__WEBPACK_IMPORTED_MODULE_3__["default"] && getTag(_Promise_js__WEBPACK_IMPORTED_MODULE_3__["default"].resolve()) != promiseTag) ||\n    (_Set_js__WEBPACK_IMPORTED_MODULE_4__["default"] && getTag(new _Set_js__WEBPACK_IMPORTED_MODULE_4__["default"]) != setTag) ||\n    (_WeakMap_js__WEBPACK_IMPORTED_MODULE_5__["default"] && getTag(new _WeakMap_js__WEBPACK_IMPORTED_MODULE_5__["default"]) != weakMapTag)) {\n  getTag = function(value) {\n    var result = (0,_baseGetTag_js__WEBPACK_IMPORTED_MODULE_6__["default"])(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? (0,_toSource_js__WEBPACK_IMPORTED_MODULE_0__["default"])(Ctor) : \'\';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getTag);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_getTag.js?')},"./node_modules/lodash-es/_getValue.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getValue);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_getValue.js?')},"./node_modules/lodash-es/_hashClear.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _nativeCreate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_nativeCreate.js */ "./node_modules/lodash-es/_nativeCreate.js");\n\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = _nativeCreate_js__WEBPACK_IMPORTED_MODULE_0__["default"] ? (0,_nativeCreate_js__WEBPACK_IMPORTED_MODULE_0__["default"])(null) : {};\n  this.size = 0;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (hashClear);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_hashClear.js?')},"./node_modules/lodash-es/_hashDelete.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (hashDelete);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_hashDelete.js?')},"./node_modules/lodash-es/_hashGet.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _nativeCreate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_nativeCreate.js */ "./node_modules/lodash-es/_nativeCreate.js");\n\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = \'__lodash_hash_undefined__\';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (_nativeCreate_js__WEBPACK_IMPORTED_MODULE_0__["default"]) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (hashGet);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_hashGet.js?')},"./node_modules/lodash-es/_hashHas.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _nativeCreate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_nativeCreate.js */ "./node_modules/lodash-es/_nativeCreate.js");\n\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return _nativeCreate_js__WEBPACK_IMPORTED_MODULE_0__["default"] ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (hashHas);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_hashHas.js?')},"./node_modules/lodash-es/_hashSet.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _nativeCreate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_nativeCreate.js */ "./node_modules/lodash-es/_nativeCreate.js");\n\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = \'__lodash_hash_undefined__\';\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (_nativeCreate_js__WEBPACK_IMPORTED_MODULE_0__["default"] && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (hashSet);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_hashSet.js?')},"./node_modules/lodash-es/_isIndex.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isIndex);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_isIndex.js?")},"./node_modules/lodash-es/_isKeyable.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isKeyable);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_isKeyable.js?")},"./node_modules/lodash-es/_isMasked.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _coreJsData_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_coreJsData.js */ "./node_modules/lodash-es/_coreJsData.js");\n\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(_coreJsData_js__WEBPACK_IMPORTED_MODULE_0__["default"] && _coreJsData_js__WEBPACK_IMPORTED_MODULE_0__["default"].keys && _coreJsData_js__WEBPACK_IMPORTED_MODULE_0__["default"].keys.IE_PROTO || \'\');\n  return uid ? (\'Symbol(src)_1.\' + uid) : \'\';\n}());\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isMasked);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_isMasked.js?')},"./node_modules/lodash-es/_isPrototype.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isPrototype);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_isPrototype.js?")},"./node_modules/lodash-es/_listCacheClear.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (listCacheClear);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_listCacheClear.js?')},"./node_modules/lodash-es/_listCacheDelete.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _assocIndexOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_assocIndexOf.js */ "./node_modules/lodash-es/_assocIndexOf.js");\n\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype;\n\n/** Built-in value references. */\nvar splice = arrayProto.splice;\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = (0,_assocIndexOf_js__WEBPACK_IMPORTED_MODULE_0__["default"])(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (listCacheDelete);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_listCacheDelete.js?')},"./node_modules/lodash-es/_listCacheGet.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _assocIndexOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_assocIndexOf.js */ "./node_modules/lodash-es/_assocIndexOf.js");\n\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = (0,_assocIndexOf_js__WEBPACK_IMPORTED_MODULE_0__["default"])(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (listCacheGet);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_listCacheGet.js?')},"./node_modules/lodash-es/_listCacheHas.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _assocIndexOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_assocIndexOf.js */ "./node_modules/lodash-es/_assocIndexOf.js");\n\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return (0,_assocIndexOf_js__WEBPACK_IMPORTED_MODULE_0__["default"])(this.__data__, key) > -1;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (listCacheHas);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_listCacheHas.js?')},"./node_modules/lodash-es/_listCacheSet.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _assocIndexOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_assocIndexOf.js */ "./node_modules/lodash-es/_assocIndexOf.js");\n\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = (0,_assocIndexOf_js__WEBPACK_IMPORTED_MODULE_0__["default"])(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (listCacheSet);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_listCacheSet.js?')},"./node_modules/lodash-es/_mapCacheClear.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Hash_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_Hash.js */ "./node_modules/lodash-es/_Hash.js");\n/* harmony import */ var _ListCache_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_ListCache.js */ "./node_modules/lodash-es/_ListCache.js");\n/* harmony import */ var _Map_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_Map.js */ "./node_modules/lodash-es/_Map.js");\n\n\n\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    \'hash\': new _Hash_js__WEBPACK_IMPORTED_MODULE_0__["default"],\n    \'map\': new (_Map_js__WEBPACK_IMPORTED_MODULE_1__["default"] || _ListCache_js__WEBPACK_IMPORTED_MODULE_2__["default"]),\n    \'string\': new _Hash_js__WEBPACK_IMPORTED_MODULE_0__["default"]\n  };\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (mapCacheClear);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_mapCacheClear.js?')},"./node_modules/lodash-es/_mapCacheDelete.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _getMapData_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getMapData.js */ "./node_modules/lodash-es/_getMapData.js");\n\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = (0,_getMapData_js__WEBPACK_IMPORTED_MODULE_0__["default"])(this, key)[\'delete\'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (mapCacheDelete);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_mapCacheDelete.js?')},"./node_modules/lodash-es/_mapCacheGet.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _getMapData_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getMapData.js */ "./node_modules/lodash-es/_getMapData.js");\n\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return (0,_getMapData_js__WEBPACK_IMPORTED_MODULE_0__["default"])(this, key).get(key);\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (mapCacheGet);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_mapCacheGet.js?')},"./node_modules/lodash-es/_mapCacheHas.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _getMapData_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getMapData.js */ "./node_modules/lodash-es/_getMapData.js");\n\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return (0,_getMapData_js__WEBPACK_IMPORTED_MODULE_0__["default"])(this, key).has(key);\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (mapCacheHas);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_mapCacheHas.js?')},"./node_modules/lodash-es/_mapCacheSet.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _getMapData_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getMapData.js */ "./node_modules/lodash-es/_getMapData.js");\n\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = (0,_getMapData_js__WEBPACK_IMPORTED_MODULE_0__["default"])(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (mapCacheSet);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_mapCacheSet.js?')},"./node_modules/lodash-es/_mapToArray.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (mapToArray);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_mapToArray.js?')},"./node_modules/lodash-es/_nativeCreate.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _getNative_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getNative.js */ "./node_modules/lodash-es/_getNative.js");\n\n\n/* Built-in method references that are verified to be native. */\nvar nativeCreate = (0,_getNative_js__WEBPACK_IMPORTED_MODULE_0__["default"])(Object, \'create\');\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (nativeCreate);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_nativeCreate.js?')},"./node_modules/lodash-es/_nativeKeys.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _overArg_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_overArg.js */ "./node_modules/lodash-es/_overArg.js");\n\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = (0,_overArg_js__WEBPACK_IMPORTED_MODULE_0__["default"])(Object.keys, Object);\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (nativeKeys);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_nativeKeys.js?')},"./node_modules/lodash-es/_nodeUtil.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _freeGlobal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_freeGlobal.js */ \"./node_modules/lodash-es/_freeGlobal.js\");\n\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && _freeGlobal_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    // Use `util.types` for Node.js 10+.\n    var types = freeModule && freeModule.require && freeModule.require('util').types;\n\n    if (types) {\n      return types;\n    }\n\n    // Legacy `process.binding('util')` for Node.js < 10.\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (nodeUtil);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_nodeUtil.js?")},"./node_modules/lodash-es/_objectToString.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (objectToString);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_objectToString.js?')},"./node_modules/lodash-es/_overArg.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (overArg);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_overArg.js?')},"./node_modules/lodash-es/_root.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _freeGlobal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_freeGlobal.js */ "./node_modules/lodash-es/_freeGlobal.js");\n\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == \'object\' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = _freeGlobal_js__WEBPACK_IMPORTED_MODULE_0__["default"] || freeSelf || Function(\'return this\')();\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (root);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_root.js?')},"./node_modules/lodash-es/_setCacheAdd.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (setCacheAdd);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_setCacheAdd.js?")},"./node_modules/lodash-es/_setCacheHas.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (setCacheHas);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_setCacheHas.js?')},"./node_modules/lodash-es/_setToArray.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (setToArray);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_setToArray.js?')},"./node_modules/lodash-es/_stackClear.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _ListCache_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_ListCache.js */ "./node_modules/lodash-es/_ListCache.js");\n\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new _ListCache_js__WEBPACK_IMPORTED_MODULE_0__["default"];\n  this.size = 0;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stackClear);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_stackClear.js?')},"./node_modules/lodash-es/_stackDelete.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stackDelete);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_stackDelete.js?")},"./node_modules/lodash-es/_stackGet.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stackGet);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_stackGet.js?')},"./node_modules/lodash-es/_stackHas.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stackHas);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_stackHas.js?')},"./node_modules/lodash-es/_stackSet.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _ListCache_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_ListCache.js */ "./node_modules/lodash-es/_ListCache.js");\n/* harmony import */ var _Map_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_Map.js */ "./node_modules/lodash-es/_Map.js");\n/* harmony import */ var _MapCache_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_MapCache.js */ "./node_modules/lodash-es/_MapCache.js");\n\n\n\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof _ListCache_js__WEBPACK_IMPORTED_MODULE_0__["default"]) {\n    var pairs = data.__data__;\n    if (!_Map_js__WEBPACK_IMPORTED_MODULE_1__["default"] || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new _MapCache_js__WEBPACK_IMPORTED_MODULE_2__["default"](pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stackSet);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_stackSet.js?')},"./node_modules/lodash-es/_toSource.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/** Used for built-in method references. */\nvar funcProto = Function.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (toSource);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_toSource.js?")},"./node_modules/lodash-es/_trimmedEndIndex.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/** Used to match a single whitespace character. */\nvar reWhitespace = /\\s/;\n\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n * character of `string`.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {number} Returns the index of the last non-whitespace character.\n */\nfunction trimmedEndIndex(string) {\n  var index = string.length;\n\n  while (index-- && reWhitespace.test(string.charAt(index))) {}\n  return index;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (trimmedEndIndex);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/_trimmedEndIndex.js?')},"./node_modules/lodash-es/debounce.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _isObject_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isObject.js */ \"./node_modules/lodash-es/isObject.js\");\n/* harmony import */ var _now_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./now.js */ \"./node_modules/lodash-es/now.js\");\n/* harmony import */ var _toNumber_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toNumber.js */ \"./node_modules/lodash-es/toNumber.js\");\n\n\n\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = (0,_toNumber_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(wait) || 0;\n  if ((0,_isObject_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax((0,_toNumber_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        timeWaiting = wait - timeSinceLastCall;\n\n    return maxing\n      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n      : timeWaiting;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = (0,_now_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge((0,_now_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])());\n  }\n\n  function debounced() {\n    var time = (0,_now_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        clearTimeout(timerId);\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (debounce);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/debounce.js?")},"./node_modules/lodash-es/eq.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (eq);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/eq.js?")},"./node_modules/lodash-es/isArguments.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _baseIsArguments_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_baseIsArguments.js */ "./node_modules/lodash-es/_baseIsArguments.js");\n/* harmony import */ var _isObjectLike_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isObjectLike.js */ "./node_modules/lodash-es/isObjectLike.js");\n\n\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = (0,_baseIsArguments_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function() { return arguments; }()) ? _baseIsArguments_js__WEBPACK_IMPORTED_MODULE_0__["default"] : function(value) {\n  return (0,_isObjectLike_js__WEBPACK_IMPORTED_MODULE_1__["default"])(value) && hasOwnProperty.call(value, \'callee\') &&\n    !propertyIsEnumerable.call(value, \'callee\');\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isArguments);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/isArguments.js?')},"./node_modules/lodash-es/isArray.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isArray);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/isArray.js?")},"./node_modules/lodash-es/isArrayLike.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _isFunction_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isFunction.js */ "./node_modules/lodash-es/isFunction.js");\n/* harmony import */ var _isLength_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isLength.js */ "./node_modules/lodash-es/isLength.js");\n\n\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it\'s\n * not a function and has a `value.length` that\'s an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike(\'abc\');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && (0,_isLength_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value.length) && !(0,_isFunction_js__WEBPACK_IMPORTED_MODULE_1__["default"])(value);\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isArrayLike);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/isArrayLike.js?')},"./node_modules/lodash-es/isBuffer.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _root_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_root.js */ "./node_modules/lodash-es/_root.js");\n/* harmony import */ var _stubFalse_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stubFalse.js */ "./node_modules/lodash-es/stubFalse.js");\n\n\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == \'object\' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == \'object\' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? _root_js__WEBPACK_IMPORTED_MODULE_0__["default"].Buffer : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || _stubFalse_js__WEBPACK_IMPORTED_MODULE_1__["default"];\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isBuffer);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/isBuffer.js?')},"./node_modules/lodash-es/isEqual.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _baseIsEqual_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_baseIsEqual.js */ "./node_modules/lodash-es/_baseIsEqual.js");\n\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { \'a\': 1 };\n * var other = { \'a\': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return (0,_baseIsEqual_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value, other);\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isEqual);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/isEqual.js?')},"./node_modules/lodash-es/isFunction.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _baseGetTag_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseGetTag.js */ \"./node_modules/lodash-es/_baseGetTag.js\");\n/* harmony import */ var _isObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isObject.js */ \"./node_modules/lodash-es/isObject.js\");\n\n\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!(0,_isObject_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = (0,_baseGetTag_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isFunction);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/isFunction.js?")},"./node_modules/lodash-es/isLength.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isLength);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/isLength.js?")},"./node_modules/lodash-es/isObject.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isObject);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/isObject.js?")},"./node_modules/lodash-es/isObjectLike.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * Checks if `value` is object-like. A value is object-like if it\'s not `null`\n * and has a `typeof` result of "object".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == \'object\';\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isObjectLike);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/isObjectLike.js?')},"./node_modules/lodash-es/isSymbol.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _baseGetTag_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseGetTag.js */ "./node_modules/lodash-es/_baseGetTag.js");\n/* harmony import */ var _isObjectLike_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isObjectLike.js */ "./node_modules/lodash-es/isObjectLike.js");\n\n\n\n/** `Object#toString` result references. */\nvar symbolTag = \'[object Symbol]\';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol(\'abc\');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == \'symbol\' ||\n    ((0,_isObjectLike_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value) && (0,_baseGetTag_js__WEBPACK_IMPORTED_MODULE_1__["default"])(value) == symbolTag);\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isSymbol);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/isSymbol.js?')},"./node_modules/lodash-es/isTypedArray.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _baseIsTypedArray_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_baseIsTypedArray.js */ "./node_modules/lodash-es/_baseIsTypedArray.js");\n/* harmony import */ var _baseUnary_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseUnary.js */ "./node_modules/lodash-es/_baseUnary.js");\n/* harmony import */ var _nodeUtil_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_nodeUtil.js */ "./node_modules/lodash-es/_nodeUtil.js");\n\n\n\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = _nodeUtil_js__WEBPACK_IMPORTED_MODULE_0__["default"] && _nodeUtil_js__WEBPACK_IMPORTED_MODULE_0__["default"].isTypedArray;\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? (0,_baseUnary_js__WEBPACK_IMPORTED_MODULE_1__["default"])(nodeIsTypedArray) : _baseIsTypedArray_js__WEBPACK_IMPORTED_MODULE_2__["default"];\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isTypedArray);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/isTypedArray.js?')},"./node_modules/lodash-es/keys.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _arrayLikeKeys_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_arrayLikeKeys.js */ "./node_modules/lodash-es/_arrayLikeKeys.js");\n/* harmony import */ var _baseKeys_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_baseKeys.js */ "./node_modules/lodash-es/_baseKeys.js");\n/* harmony import */ var _isArrayLike_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isArrayLike.js */ "./node_modules/lodash-es/isArrayLike.js");\n\n\n\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => [\'a\', \'b\'] (iteration order is not guaranteed)\n *\n * _.keys(\'hi\');\n * // => [\'0\', \'1\']\n */\nfunction keys(object) {\n  return (0,_isArrayLike_js__WEBPACK_IMPORTED_MODULE_0__["default"])(object) ? (0,_arrayLikeKeys_js__WEBPACK_IMPORTED_MODULE_1__["default"])(object) : (0,_baseKeys_js__WEBPACK_IMPORTED_MODULE_2__["default"])(object);\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (keys);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/keys.js?')},"./node_modules/lodash-es/now.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _root_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_root.js */ "./node_modules/lodash-es/_root.js");\n\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return _root_js__WEBPACK_IMPORTED_MODULE_0__["default"].Date.now();\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (now);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/now.js?')},"./node_modules/lodash-es/stubArray.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stubArray);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/stubArray.js?')},"./node_modules/lodash-es/stubFalse.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stubFalse);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/stubFalse.js?')},"./node_modules/lodash-es/throttle.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _debounce_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./debounce.js */ \"./node_modules/lodash-es/debounce.js\");\n/* harmony import */ var _isObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isObject.js */ \"./node_modules/lodash-es/isObject.js\");\n\n\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a throttled function that only invokes `func` at most once per\n * every `wait` milliseconds. The throttled function comes with a `cancel`\n * method to cancel delayed `func` invocations and a `flush` method to\n * immediately invoke them. Provide `options` to indicate whether `func`\n * should be invoked on the leading and/or trailing edge of the `wait`\n * timeout. The `func` is invoked with the last arguments provided to the\n * throttled function. Subsequent calls to the throttled function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the throttled function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.throttle` and `_.debounce`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to throttle.\n * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=true]\n *  Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new throttled function.\n * @example\n *\n * // Avoid excessively updating the position while scrolling.\n * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n *\n * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n * jQuery(element).on('click', throttled);\n *\n * // Cancel the trailing throttled invocation.\n * jQuery(window).on('popstate', throttled.cancel);\n */\nfunction throttle(func, wait, options) {\n  var leading = true,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  if ((0,_isObject_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(options)) {\n    leading = 'leading' in options ? !!options.leading : leading;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n  return (0,_debounce_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(func, wait, {\n    'leading': leading,\n    'maxWait': wait,\n    'trailing': trailing\n  });\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (throttle);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/throttle.js?")},"./node_modules/lodash-es/toNumber.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _baseTrim_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_baseTrim.js */ "./node_modules/lodash-es/_baseTrim.js");\n/* harmony import */ var _isObject_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isObject.js */ "./node_modules/lodash-es/isObject.js");\n/* harmony import */ var _isSymbol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isSymbol.js */ "./node_modules/lodash-es/isSymbol.js");\n\n\n\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber(\'3.2\');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == \'number\') {\n    return value;\n  }\n  if ((0,_isSymbol_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value)) {\n    return NAN;\n  }\n  if ((0,_isObject_js__WEBPACK_IMPORTED_MODULE_1__["default"])(value)) {\n    var other = typeof value.valueOf == \'function\' ? value.valueOf() : value;\n    value = (0,_isObject_js__WEBPACK_IMPORTED_MODULE_1__["default"])(other) ? (other + \'\') : other;\n  }\n  if (typeof value != \'string\') {\n    return value === 0 ? value : +value;\n  }\n  value = (0,_baseTrim_js__WEBPACK_IMPORTED_MODULE_2__["default"])(value);\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (toNumber);\n\n\n//# sourceURL=webpack://CKEditor5.websparkPlugin/./node_modules/lodash-es/toNumber.js?')}},__webpack_module_cache__={};function __webpack_require__(e){var n=__webpack_module_cache__[e];if(void 0!==n)return n.exports;var t=__webpack_module_cache__[e]={id:e,exports:{}};return __webpack_modules__[e](t,t.exports,__webpack_require__),t.exports}__webpack_require__.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return __webpack_require__.d(n,{a:n}),n},__webpack_require__.d=(e,n)=>{for(var t in n)__webpack_require__.o(n,t)&&!__webpack_require__.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},__webpack_require__.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),__webpack_require__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},__webpack_require__.nc=void 0;var __webpack_exports__=__webpack_require__("./js/ckeditor5_plugins/websparkPlugin/src/index.js");return __webpack_exports__=__webpack_exports__.default,__webpack_exports__})()));